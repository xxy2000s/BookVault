{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \u5173\u4e8e\u81ea\u5b9a\u4e49\u57df\u540d\u548c GitHub \u9875\u9762 - GitHub Docs","title":"\u524d\u8a00"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \u5173\u4e8e\u81ea\u5b9a\u4e49\u57df\u540d\u548c GitHub \u9875\u9762 - GitHub Docs","title":"Project layout"},{"location":"JavaAPI/","text":"","title":"JavaAPI"},{"location":"Linux/","text":"","title":"Linux"},{"location":"%E5%B7%A5%E5%85%B7/Git/","text":"","title":"Git"},{"location":"%E5%B7%A5%E5%85%B7/%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/","text":"","title":"\u7b14\u8bb0\u7cfb\u7edf"},{"location":"%E5%B7%A5%E5%85%B7/%E8%AE%BA%E6%96%87/","text":"","title":"\u8bba\u6587"},{"location":"%E5%BC%80%E5%8F%91/C%2B%2B/","text":"","title":"C++"},{"location":"%E5%BC%80%E5%8F%91/Go/","text":"","title":"Go"},{"location":"%E5%BC%80%E5%8F%91/Java/","text":"","title":"Java"},{"location":"%E5%BC%80%E5%8F%91/Python/","text":"","title":"Python"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"DP\u601d\u8003\u6a21\u677f \u00b6 DP\u601d\u8003\u6a21\u677f \u00b6 \u5173\u6ce8\u53d8\u91cf 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[i] dp[i][j]\u6240\u4ee3\u8868\u5b9a\u4e49\uff08\u4e00\u7ef4\u3001\u4e8c\u7ef4\u7b49\uff09 2.\u72b6\u6001\u8f6c\u79fb\uff1a\u5173\u6ce8\u72b6\u6001\u600e\u4e48\u904d\u5386\uff0c\u600e\u4e48\u8f6c\u79fb 3.\u521d\u59cb\u5316\uff1adp\u6570\u7ec4\u5927\u5c0f\uff0c\u6eda\u52a8\u521d\u503c 4.\u904d\u5386\u987a\u5e8f\uff1a\u5c24\u5176\u4e8c\u7ef4 5.\u8fd4\u56de\u6761\u4ef6 */ 403. \u9752\u86d9\u8fc7\u6cb3 \u00b6 class Solution { public boolean canCross ( int [] stones ) { /* \u5173\u6ce8\u53d8\u91cf\uff1a\u5f53\u524dstone\u6570\u7ec4\u7684\u7d22\u5f15index\uff0c\u8df3\u7684\u6b65\u6570k 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[idx][k] \u4ee3\u8868\u8df3\u4e86k\u6b65\u4e4b\u540e\u6765\u5230\u7d22\u5f15\u4e3aidx\u7684\u77f3\u5934\u4e0a 2.\u72b6\u6001\u8f6c\u79fb\uff1aidx\u53ef\u4ee5\u4ecej\u2208[1, idx-1]\u4f4d\u7f6e\u7684\u77f3\u5934\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u9700\u8981\u904d\u5386\u3002\u7531\u4e8e\u662f\u8df3\u4e86k\u6b65(k = diff = stone[idx]-stone[j])\u6765\u5230idx\u4e0a\uff0c\u6240\u4ee5\u8df3\u5230\u524d\u4e00\u5757\u77f3\u5934j\u7684\u6b65\u6570\u5fc5\u987b\u662f k-1 || k || k+1 \u4ece\u800c\u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[idx][diff] = dp[j][diff-1] || dp[j][diff] || dp[j][diff+1] 3.\u521d\u59cb\u5316\uff1adp[1][1]=true; 4.\u904d\u5386\u987a\u5e8f\uff1a\u5916\u5c42\u904d\u5386i\uff0ci\u2208[2, len-1]\uff0c\u4ee3\u8868stone\u7d22\u5f15idx\u3002 \u5185\u5c42\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0c\u4ee3\u8868\u4ece\u524d\u9762\u7684[1, i-1]\u77f3\u5934\u5f97\u5230\u7684\u72b6\u6001\u8f6c\u79fb 5.\u8fd4\u56de\u6761\u4ef6\uff1adp[n-1][k] k\u2208[1, n-1] (\u8df3\u5230stone[n-1]\u7684\u6b65\u6570\u53ef\u4ee5\u4e3a[1, n-1]) */ int len = stones . length ; if ( stones [ 1 ] != 1 ) return false ; //dp[n][k]\u4e3a\u8df3\u8dc3\u4e86k\u6b65\u6765\u5230\u4e86stone[n]\u7684\u4f4d\u7f6e //n\u5bf9\u5e94stone\u7684\u7d22\u5f15\uff0c\u4ed6\u7684\u72b6\u6001\u5e94\u8be5\u7531i\u2208[0,n-1]\u8f6c\u79fb\u800c\u6765 \u7531\u4e8e0\u30011\u7279\u6b8a\u6027\u53ef\u4ee5\u4ece[2, n-1]\u904d\u5386i //\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0cdiff\u5bf9\u5e94\u8df3\u8dc3\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6b65\u6570 //\u5219\u8f6c\u79fb\u60c5\u51b5\u7b49\u4ef7\u4e8edp[i][diff] = dp[j][diff] || dp[j][diff-1] || dp[j][diff+1] boolean [][] dp = new boolean [ len ][ len + 1 ] ; dp [ 1 ][ 1 ] = true ; //i\u4e3astones\u5bf9\u5e94\u7d22\u5f15\uff0c\u4e3a\u6574\u4f53\u5916\u90e8\u904d\u5386 for ( int i = 2 ; i < len ; i ++ ){ //\u72b6\u6001\u8f6c\u79fb\u90e8\u5206\uff0cj\u2208[1, i-1]\u4e3a\u4e4b\u524d\u7684\u72b6\u6001\u904d\u5386 for ( int j = 1 ; j < i ; j ++ ){ //\u8be5\u6b21\u6240\u8df3\u6b65\u6570 int diff = stones [ i ] - stones [ j ] ; if ( diff <= j + 1 ){ //j+1\u4e3a\u7406\u8bba\u6700\u5927\u6b65\u6570 //\u8be5\u6b21\u8df3diff\u6b65\uff0c\u90a3\u4e0a\u4e00\u6b21\u4e5f\u53ea\u80fd\u8df3diff-1 || diff || diff+1\u6b65\uff0c\u4ece\u800c\u5f97\u8f6c\u79fb\u65b9\u7a0b dp [ i ][ diff ] = dp [ j ][ diff - 1 ] || dp [ j ][ diff ] || dp [ j ][ diff + 1 ] ; } } } //len\u662f\u6b65\u6570k\u7684\u4e0a\u9650 for ( int k = 1 ; k < len ; k ++ ){ if ( dp [ len - 1 ][ k ] == true ) return true ; } return false ; } }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#dp","text":"","title":"DP\u601d\u8003\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#dp_1","text":"\u5173\u6ce8\u53d8\u91cf 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[i] dp[i][j]\u6240\u4ee3\u8868\u5b9a\u4e49\uff08\u4e00\u7ef4\u3001\u4e8c\u7ef4\u7b49\uff09 2.\u72b6\u6001\u8f6c\u79fb\uff1a\u5173\u6ce8\u72b6\u6001\u600e\u4e48\u904d\u5386\uff0c\u600e\u4e48\u8f6c\u79fb 3.\u521d\u59cb\u5316\uff1adp\u6570\u7ec4\u5927\u5c0f\uff0c\u6eda\u52a8\u521d\u503c 4.\u904d\u5386\u987a\u5e8f\uff1a\u5c24\u5176\u4e8c\u7ef4 5.\u8fd4\u56de\u6761\u4ef6 */","title":"DP\u601d\u8003\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#403","text":"class Solution { public boolean canCross ( int [] stones ) { /* \u5173\u6ce8\u53d8\u91cf\uff1a\u5f53\u524dstone\u6570\u7ec4\u7684\u7d22\u5f15index\uff0c\u8df3\u7684\u6b65\u6570k 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[idx][k] \u4ee3\u8868\u8df3\u4e86k\u6b65\u4e4b\u540e\u6765\u5230\u7d22\u5f15\u4e3aidx\u7684\u77f3\u5934\u4e0a 2.\u72b6\u6001\u8f6c\u79fb\uff1aidx\u53ef\u4ee5\u4ecej\u2208[1, idx-1]\u4f4d\u7f6e\u7684\u77f3\u5934\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u9700\u8981\u904d\u5386\u3002\u7531\u4e8e\u662f\u8df3\u4e86k\u6b65(k = diff = stone[idx]-stone[j])\u6765\u5230idx\u4e0a\uff0c\u6240\u4ee5\u8df3\u5230\u524d\u4e00\u5757\u77f3\u5934j\u7684\u6b65\u6570\u5fc5\u987b\u662f k-1 || k || k+1 \u4ece\u800c\u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[idx][diff] = dp[j][diff-1] || dp[j][diff] || dp[j][diff+1] 3.\u521d\u59cb\u5316\uff1adp[1][1]=true; 4.\u904d\u5386\u987a\u5e8f\uff1a\u5916\u5c42\u904d\u5386i\uff0ci\u2208[2, len-1]\uff0c\u4ee3\u8868stone\u7d22\u5f15idx\u3002 \u5185\u5c42\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0c\u4ee3\u8868\u4ece\u524d\u9762\u7684[1, i-1]\u77f3\u5934\u5f97\u5230\u7684\u72b6\u6001\u8f6c\u79fb 5.\u8fd4\u56de\u6761\u4ef6\uff1adp[n-1][k] k\u2208[1, n-1] (\u8df3\u5230stone[n-1]\u7684\u6b65\u6570\u53ef\u4ee5\u4e3a[1, n-1]) */ int len = stones . length ; if ( stones [ 1 ] != 1 ) return false ; //dp[n][k]\u4e3a\u8df3\u8dc3\u4e86k\u6b65\u6765\u5230\u4e86stone[n]\u7684\u4f4d\u7f6e //n\u5bf9\u5e94stone\u7684\u7d22\u5f15\uff0c\u4ed6\u7684\u72b6\u6001\u5e94\u8be5\u7531i\u2208[0,n-1]\u8f6c\u79fb\u800c\u6765 \u7531\u4e8e0\u30011\u7279\u6b8a\u6027\u53ef\u4ee5\u4ece[2, n-1]\u904d\u5386i //\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0cdiff\u5bf9\u5e94\u8df3\u8dc3\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6b65\u6570 //\u5219\u8f6c\u79fb\u60c5\u51b5\u7b49\u4ef7\u4e8edp[i][diff] = dp[j][diff] || dp[j][diff-1] || dp[j][diff+1] boolean [][] dp = new boolean [ len ][ len + 1 ] ; dp [ 1 ][ 1 ] = true ; //i\u4e3astones\u5bf9\u5e94\u7d22\u5f15\uff0c\u4e3a\u6574\u4f53\u5916\u90e8\u904d\u5386 for ( int i = 2 ; i < len ; i ++ ){ //\u72b6\u6001\u8f6c\u79fb\u90e8\u5206\uff0cj\u2208[1, i-1]\u4e3a\u4e4b\u524d\u7684\u72b6\u6001\u904d\u5386 for ( int j = 1 ; j < i ; j ++ ){ //\u8be5\u6b21\u6240\u8df3\u6b65\u6570 int diff = stones [ i ] - stones [ j ] ; if ( diff <= j + 1 ){ //j+1\u4e3a\u7406\u8bba\u6700\u5927\u6b65\u6570 //\u8be5\u6b21\u8df3diff\u6b65\uff0c\u90a3\u4e0a\u4e00\u6b21\u4e5f\u53ea\u80fd\u8df3diff-1 || diff || diff+1\u6b65\uff0c\u4ece\u800c\u5f97\u8f6c\u79fb\u65b9\u7a0b dp [ i ][ diff ] = dp [ j ][ diff - 1 ] || dp [ j ][ diff ] || dp [ j ][ diff + 1 ] ; } } } //len\u662f\u6b65\u6570k\u7684\u4e0a\u9650 for ( int k = 1 ; k < len ; k ++ ){ if ( dp [ len - 1 ][ k ] == true ) return true ; } return false ; } }","title":"403. \u9752\u86d9\u8fc7\u6cb3"}]}