{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \u5173\u4e8e\u81ea\u5b9a\u4e49\u57df\u540d\u548c GitHub \u9875\u9762 - GitHub Docs","title":"\u524d\u8a00"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \u5173\u4e8e\u81ea\u5b9a\u4e49\u57df\u540d\u548c GitHub \u9875\u9762 - GitHub Docs","title":"Project layout"},{"location":"JavaAPI/","text":"","title":"JavaAPI"},{"location":"Linux/","text":"","title":"Linux"},{"location":"%E5%B7%A5%E5%85%B7/Git/","text":"","title":"Git"},{"location":"%E5%B7%A5%E5%85%B7/%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/","text":"","title":"\u7b14\u8bb0\u7cfb\u7edf"},{"location":"%E5%B7%A5%E5%85%B7/%E8%AE%BA%E6%96%87/","text":"","title":"\u8bba\u6587"},{"location":"%E5%BC%80%E5%8F%91/C%2B%2B/","text":"","title":"C++"},{"location":"%E5%BC%80%E5%8F%91/Go/","text":"","title":"Go"},{"location":"%E5%BC%80%E5%8F%91/Java/","text":"","title":"Java"},{"location":"%E5%BC%80%E5%8F%91/Python/","text":"","title":"Python"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/","text":"\u9898\u76ee\u6574\u5408 \u00b6 \u8881\u53a8\u7684\u7b97\u6cd5\u5c0f\u5c4b \u6570\u7ec4\uff1a \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 59 \u87ba\u65cb\u77e9\u9635 II leetcode 66 \u52a0\u4e00 \u5251\u6307offer3 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 leetcode 75 \u989c\u8272\u5206\u7c7b leetcode 54 \u87ba\u65cb\u77e9\u9635 leetcode 560 \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u94fe\u8868\uff1a \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 21 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 leetcode 203 \u79fb\u9664\u94fe\u8868\u5143\u7d20 leetcode 206 \u53cd\u8f6c\u94fe\u8868 leetcode 141 \u73af\u5f62\u94fe\u8868 leetcode 86 \u5206\u9694\u94fe\u8868 leetcode 61 \u65cb\u8f6c\u94fe\u8868 \u5251\u6307 Offer 22 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u5251\u6307 Offer 52\uff1a \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \u5b57\u7b26\u4e32 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 344 \u53cd\u8f6c\u5b57\u7b26\u4e32 \u5251\u6307 Offer 05 \u66ff\u6362\u7a7a\u683c leetcode 151 \u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd \u5251\u6307offer 58 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 leetcode 13 \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 leetcode 28 \u5b9e\u73b0 strStr() \u54c8\u5e0c\u8868 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 242 \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd leetcode 1207 \u72ec\u4e00\u65e0\u4e8c\u7684\u51fa\u73b0\u6b21\u6570 \u5251\u6307 Offer 56 - I \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \u5251\u6307 Offer 56 - II \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II leetcode 349 \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 202 \u5feb\u4e50\u6570 \u6808\u548c\u961f\u5217 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 20 \u6709\u6548\u7684\u62ec\u53f7 \u5251\u6307 Offer 09 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 leetcode 225 \u7528\u961f\u5217\u5b9e\u73b0\u6808 leetcode 1047 \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879 leetcode 1021 \u5220\u9664\u6700\u5916\u5c42\u7684\u62ec\u53f7 \u4e8c\u53c9\u6811 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 144 \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 leetcode 94 \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 leetcode 145 \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 \u5251\u6307 Offer 27 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u5251\u6307 Offer 28 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u5251\u6307 Offer 55 - I \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 102 \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 404 \u5de6\u53f6\u5b50\u4e4b\u548c 129 \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c 106 \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u5251\u6307 Offer 07 \u91cd\u5efa\u4e8c\u53c9\u6811 700 \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 96 \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 235 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 669 \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811 \u56fe \u00b6 \u9898\u53f7 \u9898\u76ee 841 \u94a5\u5319\u548c\u623f\u95f4 133 \u514b\u9686\u56fe 1162 \u5730\u56fe\u5206\u6790 \u53cc\u6307\u9488\uff1a \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 27 \u79fb\u9664\u5143\u7d20 leetcode 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 leetcode 141 \u73af\u5f62\u94fe\u8868 II leetcode 328 \u5947\u5076\u94fe\u8868 leetcode 15 \u4e09\u6570\u4e4b\u548c leetcode 18 \u56db\u6570\u4e4b\u548c \u4e8c\u5206\u67e5\u627e \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 35 \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e leetcode 34 \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a leetcode 33 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 leetcode 81 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II leetcode 153 \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c leetcode 74 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u5251\u6307 Offer 53 - II 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u6ed1\u52a8\u7a97\u53e3 \u00b6 \u9898\u53f7 \u9898\u76ee \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 3 \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 53 \u6700\u5927\u5b50\u5e8f\u548c 424 \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26 \u8d2a\u5fc3 \u00b6 \u9898\u53f7 \u9898\u76ee 455 \u5206\u53d1\u997c\u5e72 376 \u6446\u52a8\u5e8f\u5217 53 \u6700\u5927\u5b50\u5e8f\u548c 860 \u67e0\u6aac\u6c34\u627e\u96f6 122 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 134 \u52a0\u6cb9\u7ad9 406 \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 452 \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 56 \u5408\u5e76\u533a\u95f4 738 \u5355\u8c03\u9012\u589e\u7684\u6570\u5b57 \u5206\u6cbb \u00b6 \u9898\u53f7 \u9898\u76ee 53 \u6700\u5927\u5b50\u5e8f\u548c 169 \u591a\u6570\u5143\u7d20 \u5251\u6307 Offer 40 \u6700\u5c0f\u7684k\u4e2a\u6570 215 \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 23 \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 4 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u5355\u8c03\u6808\u5355\u8c03\u961f\u5217 \u00b6 \u9898\u53f7 \u9898\u76ee 155 \u6700\u5c0f\u6808 739 \u6bcf\u65e5\u6e29\u5ea6 \u5251\u6307 Offer 59 - II \u961f\u5217\u7684\u6700\u5927\u503c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 42 \u63a5\u96e8\u6c34 496 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I 503 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II 1081 \u4e0d\u540c\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 \u4f4d\u8fd0\u7b97 \u00b6 \u9898\u53f7 \u9898\u76ee 136 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 137 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II 260 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u5251\u6307 Offer 65 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u5251\u6307 Offer 15 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 78 \u5b50\u96c6 \u56de\u6eaf \u00b6 \u9898\u53f7 \u9898\u76ee 77 \u7ec4\u5408 39 \u7ec4\u5408\u603b\u548c 40 \u7ec4\u5408\u603b\u548c II 216 \u7ec4\u5408\u603b\u548c III 46 \u5168\u6392\u5217 47 \u5168\u6392\u5217 II \u9762\u8bd5\u9898 08.12 \u516b\u7687\u540e 51 N \u7687\u540e \u52a8\u6001\u89c4\u5212 \u00b6 \u9898\u53f7 \u9898\u76ee 509 \u6590\u6ce2\u90a3\u5951\u6570 70 \u722c\u697c\u68af 746 \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af 121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a 64 \u6700\u5c0f\u8def\u5f84\u548c 198 \u6253\u5bb6\u52ab\u820d 213 \u6253\u5bb6\u52ab\u820d II 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 120 \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u6301\u7eed\u66f4\u65b0\u4e2d....... Hot 100 \u00b6 \u975e\u5e38\u4e0d\u719f\u7684... \u00b6 309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f \u00b6 \u9762\u7ecf\u4e2d\u7684\u7b97\u6cd5\u9898 \u00b6 31. \u4e0b\u4e00\u4e2a\u6392\u5217 \u00b6 \u5b9e\u73b0\u83b7\u53d6 \u4e0b\u4e00\u4e2a\u6392\u5217 \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 void nextPermutation ( vector < int >& nums ) { int len = nums . size () -1 ; for ( int i = len ; i > 0 ; -- i ){ if ( nums [ i ] > nums [ i -1 ]){ for ( int k = len ; k >= i ; -- k ){ if ( nums [ k ] > nums [ i -1 ]){ swap ( nums [ k ], nums [ i -1 ]); break ; } } sort ( nums . begin () + i , nums . end ()); return ; } else continue ; } sort ( nums . begin (), nums . end ()); return ; } \u524d\u7f00\u548c \u00b6 \u53c2\u8003 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u00b6 \u7ecf\u5178\u6570\u7ec4\u95ee\u9898 \u00b6 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u00b6 \u7c7b\u4f3c\u9898\uff1a 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u00b6 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e \u00b6 \u80cc\u5305\u95ee\u9898 \u00b6 \u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 416. \u5206\u5272\u7b49\u548c\u5b50\u96c6 \u00b6 \u7ecf\u5178\u94fe\u8868\u95ee\u9898 \u00b6 148. \u6392\u5e8f\u94fe\u8868 \u00b6 \u7ecf\u5178\u6808\u95ee\u9898 \u00b6 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 224. \u57fa\u672c\u8ba1\u7b97\u5668 \u00b6 227. \u57fa\u672c\u8ba1\u7b97\u5668 II \u00b6 \u7ecf\u5178Hash\u8868 \u00b6 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u00b6 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u00b6 \u7ecf\u5178\u6811 \u00b6 687. \u6700\u957f\u540c\u503c\u8def\u5f84 \uff08\u8fd8\u6ca1\u505a\uff09 \u00b6 \u7ecf\u5178\u56de\u6eaf \u00b6 \u7ec4\u5408\u6392\u5217 \u00b6 131. \u5206\u5272\u56de\u6587\u4e32 \uff08\u4e0d\u662fhot100\uff09 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 vector < vector < string >> partition ( string s ) { vector < vector < string > > ans ; vector < string > path ; dfs ( s , ans , path , 0 ); return ans ; } void dfs ( string s , vector < vector < string > >& ans , vector < string >& path , int depth ){ if ( depth == s . size ()){ ans . push_back ( path ); return ; } for ( int i = depth ; i < s . size (); ++ i ){ if ( isPalindrome ( s , depth , i )){ path . push_back ( s . substr ( depth , i - depth + 1 )); } else continue ; dfs ( s , ans , path , i + 1 ); path . pop_back (); } } bool isPalindrome ( const string & s , int lo , int hi ){ for ( int i = lo , j = hi ; i < j ; ++ i , -- j ){ if ( s [ i ] != s [ j ]) return false ; } return true ; } 51. N \u7687\u540e \u00b6 \u7ecf\u5178\u5b57\u7b26\u4e32\u95ee\u9898 \u00b6 \u5fc5\u987b\u638c\u63e1\uff1a \u56de\u6587\u5b50\u4e32 \u00b6 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u00b6 \u7ecf\u5178\u6a21\u677f if ( s . size () < 2 ) return s ; int lo = 0 ; int len = 1 ; //\u8fd9\u4e2a\u53cc\u91cdfor\u5faa\u73af\u5c31\u80fd\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5339\u914d\u60c5\u51b5\u5b8c\u5168\u5199\u5230isPalindromic\u8fd9\u4e2a\u4e8c\u7ef4dp table\u4e2d vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); for ( int i = s . size (); i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])){ isPalindromic [ i ][ j ] = true ; if ( len < j - i + 1 ){ lo = i ; len = j - i + 1 ; } } } } return s . substr ( lo , len ); 131. \u5206\u5272\u56de\u6587\u4e32 \u00b6 647. \u56de\u6587\u5b50\u4e32 \u00b6 132. \u5206\u5272\u56de\u6587\u4e32 II \u00b6 //\u7528131\u7684\u65b9\u6cd5\u7684\u8bdd\u4f1a\u8d85\u65f6 int minCut ( string s ) { if ( s . size () == 0 ) return 0 ; vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); //---------\u8fd9\u91cc\u5fc5\u987b\u5012\u5e8f\u6765(\u5f88\u5de7\u5999) for ( int i = s . size () -1 ; i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])) isPalindromic [ i ][ j ] = true ; } } //\u540e\u9762\u5c31\u662f\u7b80\u5355\u52a8\u6001\u89c4\u5212\u4e86 vector < int > dp ( s . size (), 0 ); for ( int i = 0 ; i < s . size (); ++ i ) dp [ i ] = i ; for ( int i = 1 ; i < s . size (); ++ i ){ if ( isPalindromic [ 0 ][ i ]){ dp [ i ] = 0 ; continue ; } for ( int j = 0 ; j < i ; ++ j ){ if ( isPalindromic [ j + 1 ][ i ]) dp [ i ] = min ( dp [ i ], dp [ j ] + 1 ); } } return dp [ s . size () -1 ]; } \u5b57\u7b26\u4e32\u52a8\u6001\u89c4\u5212<\u9ad8\u9891\uff01\uff01\uff01\uff01> \u00b6 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 bool isMatch ( string s , string p ) { int len1 = s . size (); int len2 = p . size (); //dp[i][j]\u8868\u793as\u7b2ci\u4e2a \u548cp\u7b2cj\u4e2a \u5b57\u7b26(\u5305\u62eci,j)\u4e4b\u524d\u662f\u5426\u5339\u914d vector < vector < bool > > dp ( len1 + 1 , vector < bool > ( len2 + 1 , false )); dp [ 0 ][ 0 ] = true ; //\u8fd9\u91cc\u5f88\u91cd\u8981 //\u9488\u5bf9\u5339\u914ds\u4e3a\u7a7a\u65f6\u7684\u7279\u6b8a\u60c5\u51b5\u7684\u521d\u59cb\u5316 for ( int i = 0 ; i < p . size (); ++ i ){ //\u6ce8\u610f\u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5\u8fd9\u91cci-1\u80af\u5b9a\u5408\u6cd5 if ( p [ i ] == '*' ) dp [ 0 ][ i + 1 ] = dp [ 0 ][ i -1 ]; } for ( int i = 0 ; i < len1 ; ++ i ){ for ( int j = 0 ; j < len2 ; ++ j ){ //\u5982\u679c\u76f8\u7b49\u6216p[j]\u4e07\u80fd\u5339\u914d \u76f4\u63a5\u90fd\u540e\u9000\u4e00\u683c if ( s [ i ] == p [ j ] || p [ j ] == '.' ) dp [ i + 1 ][ j + 1 ] = dp [ i ][ j ]; //\u5982\u679c\u4e3a'*'\u5219\u4e24\u79cd\u60c5\u51b5 else if ( p [ j ] == '*' ){ //\u4e4b\u524d\u8bf4\u4e86 \u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5j>=1 \u540e\u9762j-1\u90fd\u5408\u6cd5 //\u5982\u679c\u524d\u4e00\u683c\u5339\u914d if ( p [ j -1 ] == s [ i ] || p [ j -1 ] == '.' ){ //dp[i+1][j-1]\u5bf9\u5e94\u5339\u914d\u96f6\u4e2a //dp[i+1][j]\u5bf9\u5e94\u5339\u914d\u4e00\u4e2a //dp[i][j+1]\u5bf9\u5e94\u5339\u914d\u591a\u4e2a dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ] || dp [ i + 1 ][ j ] || dp [ i ][ j + 1 ]; } //\u5bf9\u4e8ep \u524d\u4e00\u4e2a\u5b57\u7b26\u548cs\u5f53\u524d\u5b57\u7b26\u4e0d\u5339\u914d \u5219p\u56de\u9000\u4e24\u683c else dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ]; } //\u5982\u679cp[j]\u4e0d\u4e3a\u7279\u6b8a\u5b57\u7b26\u4e14\u4e0es[i]\u4e0d\u7b49 \u5219\u7ee7\u7eed else continue ; } } return dp [ len1 ][ len2 ]; } 132. \u5206\u5272\u56de\u6587\u4e32 II \u00b6 \u5b57\u7b26\u4e32\u4e0e\u6808 \u00b6 \u5b57\u7b26\u4e32\u95ee\u9898\u5e38\u5e38\u548c\u6808\u7ed3\u5408 394. \u5b57\u7b26\u4e32\u89e3\u7801 \u00b6 string decodeString ( string s ) { stack < int > num_st ; stack < string > s_st ; int multi = 0 ; string res ; for ( auto & c : s ){ if (( c - '0' ) >= 0 && ( c - '0' ) <= 9 ){ multi = multi * 10 + ( c - '0' ); } else if ( c == '[' ){ //\u6570\u5b57\u5165\u6808 \u5e76\u6e05\u96f6 num_st . push ( multi ); multi = 0 ; //\u5b57\u7b26\u5165\u6808\u5e76\u7f6e\u7a7a s_st . push ( res ); res = \"\" ; } //\u8981\u8fdb\u884c\u8ba1\u7b97\u5e76\u66f4\u65b0res\u4e86 else if ( c == ']' ){ multi = num_st . top (); //\u8fd9\u91cc\u5904\u7406\u5b57\u7b26\u4e32\u975e\u5e38\u5de7\u5999 //-----------------\u6838\u5fc3\u90e8\u5206----------- for ( int i = 0 ; i < multi ; ++ i ){ s_st . top () += res ; //\u8fd9\u4e2a\u5faa\u73af\u8ba1\u7b97 \u6570\u5b57*\u5b57\u7b26\u4e32 } res = s_st . top (); s_st . pop (); //\u66f4\u65b0\u6570\u5b57 num_st . pop (); multi = 0 ; } //\u4e3a\u5b57\u7b26\u5219\u5f80\u540e\u52a0 else res . push_back ( c ); } return res ; } \u5b57\u7b26\u4e32\u7ec4\u5408\u95ee\u9898\u53ca\u5207\u5206\u95ee\u9898\uff08\u56de\u6eaf\uff09 \u00b6 131. \u5206\u5272\u56de\u6587\u4e32 \u00b6 \u5b57\u7b26\u4e32\u5206\u7c7b\u8ba8\u8bba \u00b6 394. \u5b57\u7b26\u4e32\u89e3\u7801 \u00b6 \u7ecf\u5178\u6392\u5e8f\u95ee\u9898 \u00b6 406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 \u00b6 \u53c2\u8003 \u91cd\u5199\u6392\u5e8fcmp \u8eab\u9ad8\u964d\u5e8f \u4f4d\u7f6e\u5347\u5e8f \u6309\u7167\u8eab\u9ad8\u6392\u5e8f\u4e4b\u540e\uff0c\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\uff0c\u540e\u5e8f\u63d2\u5165\u8282\u70b9\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u5df2\u7ecf\u63d2\u5165\u7684\u8282\u70b9\uff0c\u6700\u7ec8\u6309\u7167k\u7684\u89c4\u5219\u5b8c\u6210\u4e86\u961f\u5217\u3002 \u6240\u4ee5\u5728\u6309\u7167\u8eab\u9ad8\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\uff1a **\u5c40\u90e8\u6700\u4f18\uff1a**\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\u3002\u63d2\u5165\u64cd\u4f5c\u8fc7\u540e\u7684people\u6ee1\u8db3\u961f\u5217\u5c5e\u6027 **\u5168\u5c40\u6700\u4f18\uff1a**\u6700\u540e\u90fd\u505a\u5b8c\u63d2\u5165\u64cd\u4f5c\uff0c\u6574\u4e2a\u961f\u5217\u6ee1\u8db3\u9898\u76ee\u961f\u5217\u5c5e\u6027 \u590d\u4e60\uff1a \u52a8\u6001\u6570\u7ec4vector\u592a\u6162 \u7528\u94fe\u8868\u66f4\u597d \u7ecf\u5178\u8d2a\u5fc3\u95ee\u9898 \u00b6 135. \u5206\u53d1\u7cd6\u679c \u00b6 \u7ecf\u5178\u52a8\u6001\u89c4\u5212 \u00b6 312. \u6233\u6c14\u7403 \u00b6 \u7ecf\u5178\u56fe\u95ee\u9898 \u00b6 \u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a.... 207. \u8bfe\u7a0b\u8868 \u00b6 399. \u9664\u6cd5\u6c42\u503c \u00b6 const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; } \u529b\u6263\u6bcf\u65e5\u4e00\u9898 \u00b6 1128. \u7b49\u4ef7\u591a\u7c73\u8bfa\u9aa8\u724c\u5bf9\u7684\u6570\u91cf \u00b6 \u89e3\u9898\u601d\u8def \u66b4\u529b\u7684\u8bdd\u4f1a\u8d85\u65f6 \u7528map\u7edf\u8ba1\u6bcf\u4e00\u5f20\u9aa8\u724c\u7684\u6570\u91cf\uff08\u7edf\u8ba1\u65f6\u5148\u5c06\u6240\u6709\u9aa8\u724c\u7ffb\u8f6c\u4e3anums[0]\u5c0f\uff0cnums[1]\u5927\uff0c\u4fbf\u4e8e\u5efa\u8868\uff09\u3002 \u9700\u8981\u6ce8\u610f\uff1a unordered_map \u4e0d\u652f\u6301 unordered_map , int> \u6216\u8005 unordered_map , int> \u56e0\u4e3astd::unordered_map\u5e95\u5c42\u662fhash\uff0c\u800cunordered_map\u6ca1\u6709\u4e13\u95e8\u7684hash\u63d0\u4f9b\u7ed9std::pair\u3002 \u53c2\u8003 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int cnt = 0 ; map < vector < int > , int > nums2Cnts ; for ( vector < int >& nums : dominoes ) { //\u7ffb\u8f6c\u9aa8\u724c if ( nums [ 0 ] > nums [ 1 ]) { swap ( nums [ 0 ], nums [ 1 ]); } ++ nums2Cnts [ nums ]; } for ( auto & c : nums2Cnts ) { if ( c . second > 1 ) { //\u6392\u5217\u7ec4\u5408C(n,2)\uff0c\u5176\u4e2dn\u4e3a\u7b49\u4ef7\u9aa8\u724c\u7684\u603b\u6570\u91cf\u3002 cnt += ( c . second * ( c . second - 1 )) / 2 ; } } return cnt ; } \u63d0\u4ea4 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int ans = 0 ; if ( dominoes . size () == 0 || dominoes [ 0 ]. size () == 0 ) return ans ; map < vector < int > , int > dir ; for ( auto & nums : dominoes ){ if ( nums [ 0 ] > nums [ 1 ]) swap ( nums [ 0 ], nums [ 1 ]); ++ dir [ nums ]; } for ( auto & c : dir ){ if ( c . second > 1 ) { ans += c . second * ( c . second -1 ) / 2 ; } } return ans ; } \u601d\u8003\uff1a \u590d\u4e60\u638c\u63e1\u4e00\u4e0bmap\u7684\u7528\u6cd5 \u4ee5\u53caauto\u5173\u952e\u5b57\u548cc++\u57fa\u7840 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 \u00b6 \u53c2\u8003 705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408 \u00b6 706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04 \u00b6 54. \u87ba\u65cb\u77e9\u9635 \u00b6 59. \u87ba\u65cb\u77e9\u9635 II \u00b6 115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 \u00b6 92. \u53cd\u8f6c\u94fe\u8868 II \u00b6 73. \u77e9\u9635\u7f6e\u96f6 \u00b6 341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u2b50 \u00b6 456. 132 \u6a21\u5f0f \u2b50 \u00b6 173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668 \u00b6 190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d \u00b6 74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u00b6 664. \u5947\u602a\u7684\u6253\u5370\u673a \u00b6 cv\u5927\u6cd5 \u91cd\u8981\u7684\u6bcf\u65e5\u4e00\u9898 \u00b6 421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c \u00b6 c\u57fa\u7840\uff0c\u90a3\u4e9b\u4ec0\u4e48\u7ed3\u6784\u4f53\u3001\u6307\u9488\u5565\u7684\u4e00\u584c\u7cca\u6d82\u3002 \u5b57\u5178\u6811\uff0c\u6709\u8003\u5bdf\uff0c\u7ecf\u5178\u3002","title":"\u529b\u6263HOT100"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_1","text":"\u8881\u53a8\u7684\u7b97\u6cd5\u5c0f\u5c4b","title":"\u9898\u76ee\u6574\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_2","text":"\u9898\u53f7 \u9898\u76ee leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 59 \u87ba\u65cb\u77e9\u9635 II leetcode 66 \u52a0\u4e00 \u5251\u6307offer3 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 leetcode 75 \u989c\u8272\u5206\u7c7b leetcode 54 \u87ba\u65cb\u77e9\u9635 leetcode 560 \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4","title":"\u6570\u7ec4\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_3","text":"\u9898\u53f7 \u9898\u76ee leetcode 21 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 leetcode 203 \u79fb\u9664\u94fe\u8868\u5143\u7d20 leetcode 206 \u53cd\u8f6c\u94fe\u8868 leetcode 141 \u73af\u5f62\u94fe\u8868 leetcode 86 \u5206\u9694\u94fe\u8868 leetcode 61 \u65cb\u8f6c\u94fe\u8868 \u5251\u6307 Offer 22 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u5251\u6307 Offer 52\uff1a \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9","title":"\u94fe\u8868\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_4","text":"\u9898\u53f7 \u9898\u76ee leetcode 344 \u53cd\u8f6c\u5b57\u7b26\u4e32 \u5251\u6307 Offer 05 \u66ff\u6362\u7a7a\u683c leetcode 151 \u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd \u5251\u6307offer 58 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 leetcode 13 \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 leetcode 28 \u5b9e\u73b0 strStr()","title":"\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_5","text":"\u9898\u53f7 \u9898\u76ee leetcode 242 \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd leetcode 1207 \u72ec\u4e00\u65e0\u4e8c\u7684\u51fa\u73b0\u6b21\u6570 \u5251\u6307 Offer 56 - I \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \u5251\u6307 Offer 56 - II \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II leetcode 349 \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 202 \u5feb\u4e50\u6570","title":"\u54c8\u5e0c\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_6","text":"\u9898\u53f7 \u9898\u76ee leetcode 20 \u6709\u6548\u7684\u62ec\u53f7 \u5251\u6307 Offer 09 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 leetcode 225 \u7528\u961f\u5217\u5b9e\u73b0\u6808 leetcode 1047 \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879 leetcode 1021 \u5220\u9664\u6700\u5916\u5c42\u7684\u62ec\u53f7","title":"\u6808\u548c\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_7","text":"\u9898\u53f7 \u9898\u76ee leetcode 144 \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 leetcode 94 \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 leetcode 145 \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 \u5251\u6307 Offer 27 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u5251\u6307 Offer 28 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u5251\u6307 Offer 55 - I \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 102 \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 404 \u5de6\u53f6\u5b50\u4e4b\u548c 129 \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c 106 \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u5251\u6307 Offer 07 \u91cd\u5efa\u4e8c\u53c9\u6811 700 \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 96 \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 235 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 669 \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","title":"\u4e8c\u53c9\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_8","text":"\u9898\u53f7 \u9898\u76ee 841 \u94a5\u5319\u548c\u623f\u95f4 133 \u514b\u9686\u56fe 1162 \u5730\u56fe\u5206\u6790","title":"\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_9","text":"\u9898\u53f7 \u9898\u76ee leetcode 27 \u79fb\u9664\u5143\u7d20 leetcode 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 leetcode 141 \u73af\u5f62\u94fe\u8868 II leetcode 328 \u5947\u5076\u94fe\u8868 leetcode 15 \u4e09\u6570\u4e4b\u548c leetcode 18 \u56db\u6570\u4e4b\u548c","title":"\u53cc\u6307\u9488\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_10","text":"\u9898\u53f7 \u9898\u76ee leetcode 35 \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e leetcode 34 \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a leetcode 33 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 leetcode 81 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II leetcode 153 \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c leetcode 74 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u5251\u6307 Offer 53 - II 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_11","text":"\u9898\u53f7 \u9898\u76ee \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 3 \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 53 \u6700\u5927\u5b50\u5e8f\u548c 424 \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_12","text":"\u9898\u53f7 \u9898\u76ee 455 \u5206\u53d1\u997c\u5e72 376 \u6446\u52a8\u5e8f\u5217 53 \u6700\u5927\u5b50\u5e8f\u548c 860 \u67e0\u6aac\u6c34\u627e\u96f6 122 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 134 \u52a0\u6cb9\u7ad9 406 \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 452 \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 56 \u5408\u5e76\u533a\u95f4 738 \u5355\u8c03\u9012\u589e\u7684\u6570\u5b57","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_13","text":"\u9898\u53f7 \u9898\u76ee 53 \u6700\u5927\u5b50\u5e8f\u548c 169 \u591a\u6570\u5143\u7d20 \u5251\u6307 Offer 40 \u6700\u5c0f\u7684k\u4e2a\u6570 215 \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 23 \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 4 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","title":"\u5206\u6cbb"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_14","text":"\u9898\u53f7 \u9898\u76ee 155 \u6700\u5c0f\u6808 739 \u6bcf\u65e5\u6e29\u5ea6 \u5251\u6307 Offer 59 - II \u961f\u5217\u7684\u6700\u5927\u503c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 42 \u63a5\u96e8\u6c34 496 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I 503 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II 1081 \u4e0d\u540c\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u5e8f\u5217","title":"\u5355\u8c03\u6808\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_15","text":"\u9898\u53f7 \u9898\u76ee 136 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 137 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II 260 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u5251\u6307 Offer 65 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u5251\u6307 Offer 15 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 78 \u5b50\u96c6","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_16","text":"\u9898\u53f7 \u9898\u76ee 77 \u7ec4\u5408 39 \u7ec4\u5408\u603b\u548c 40 \u7ec4\u5408\u603b\u548c II 216 \u7ec4\u5408\u603b\u548c III 46 \u5168\u6392\u5217 47 \u5168\u6392\u5217 II \u9762\u8bd5\u9898 08.12 \u516b\u7687\u540e 51 N \u7687\u540e","title":"\u56de\u6eaf"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_17","text":"\u9898\u53f7 \u9898\u76ee 509 \u6590\u6ce2\u90a3\u5951\u6570 70 \u722c\u697c\u68af 746 \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af 121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a 64 \u6700\u5c0f\u8def\u5f84\u548c 198 \u6253\u5bb6\u52ab\u820d 213 \u6253\u5bb6\u52ab\u820d II 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 120 \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u6301\u7eed\u66f4\u65b0\u4e2d.......","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#hot-100","text":"","title":"Hot 100"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_18","text":"","title":"\u975e\u5e38\u4e0d\u719f\u7684..."},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#309","text":"","title":"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_19","text":"","title":"\u9762\u7ecf\u4e2d\u7684\u7b97\u6cd5\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#31","text":"\u5b9e\u73b0\u83b7\u53d6 \u4e0b\u4e00\u4e2a\u6392\u5217 \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 void nextPermutation ( vector < int >& nums ) { int len = nums . size () -1 ; for ( int i = len ; i > 0 ; -- i ){ if ( nums [ i ] > nums [ i -1 ]){ for ( int k = len ; k >= i ; -- k ){ if ( nums [ k ] > nums [ i -1 ]){ swap ( nums [ k ], nums [ i -1 ]); break ; } } sort ( nums . begin () + i , nums . end ()); return ; } else continue ; } sort ( nums . begin (), nums . end ()); return ; }","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_20","text":"\u53c2\u8003","title":"\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#560-k","text":"","title":"560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_21","text":"","title":"\u7ecf\u5178\u6570\u7ec4\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#448","text":"\u7c7b\u4f3c\u9898\uff1a","title":"448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#41","text":"","title":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#442","text":"","title":"442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_22","text":"\u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c","title":"\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#416","text":"","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_23","text":"","title":"\u7ecf\u5178\u94fe\u8868\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#148","text":"","title":"148. \u6392\u5e8f\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_24","text":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762","title":"\u7ecf\u5178\u6808\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#150","text":"","title":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#224","text":"","title":"224. \u57fa\u672c\u8ba1\u7b97\u5668"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#227-ii","text":"","title":"227. \u57fa\u672c\u8ba1\u7b97\u5668 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#hash","text":"","title":"\u7ecf\u5178Hash\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#3","text":"","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#438","text":"","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_25","text":"","title":"\u7ecf\u5178\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#687","text":"","title":"687. \u6700\u957f\u540c\u503c\u8def\u5f84 \uff08\u8fd8\u6ca1\u505a\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_26","text":"","title":"\u7ecf\u5178\u56de\u6eaf"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_27","text":"","title":"\u7ec4\u5408\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#131-hot100","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 vector < vector < string >> partition ( string s ) { vector < vector < string > > ans ; vector < string > path ; dfs ( s , ans , path , 0 ); return ans ; } void dfs ( string s , vector < vector < string > >& ans , vector < string >& path , int depth ){ if ( depth == s . size ()){ ans . push_back ( path ); return ; } for ( int i = depth ; i < s . size (); ++ i ){ if ( isPalindrome ( s , depth , i )){ path . push_back ( s . substr ( depth , i - depth + 1 )); } else continue ; dfs ( s , ans , path , i + 1 ); path . pop_back (); } } bool isPalindrome ( const string & s , int lo , int hi ){ for ( int i = lo , j = hi ; i < j ; ++ i , -- j ){ if ( s [ i ] != s [ j ]) return false ; } return true ; }","title":"131. \u5206\u5272\u56de\u6587\u4e32 \uff08\u4e0d\u662fhot100\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#51-n","text":"","title":"51. N \u7687\u540e"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_28","text":"\u5fc5\u987b\u638c\u63e1\uff1a","title":"\u7ecf\u5178\u5b57\u7b26\u4e32\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_29","text":"","title":"\u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#5","text":"\u7ecf\u5178\u6a21\u677f if ( s . size () < 2 ) return s ; int lo = 0 ; int len = 1 ; //\u8fd9\u4e2a\u53cc\u91cdfor\u5faa\u73af\u5c31\u80fd\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5339\u914d\u60c5\u51b5\u5b8c\u5168\u5199\u5230isPalindromic\u8fd9\u4e2a\u4e8c\u7ef4dp table\u4e2d vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); for ( int i = s . size (); i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])){ isPalindromic [ i ][ j ] = true ; if ( len < j - i + 1 ){ lo = i ; len = j - i + 1 ; } } } } return s . substr ( lo , len );","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#131","text":"","title":"131. \u5206\u5272\u56de\u6587\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#647","text":"","title":"647. \u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#132-ii","text":"//\u7528131\u7684\u65b9\u6cd5\u7684\u8bdd\u4f1a\u8d85\u65f6 int minCut ( string s ) { if ( s . size () == 0 ) return 0 ; vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); //---------\u8fd9\u91cc\u5fc5\u987b\u5012\u5e8f\u6765(\u5f88\u5de7\u5999) for ( int i = s . size () -1 ; i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])) isPalindromic [ i ][ j ] = true ; } } //\u540e\u9762\u5c31\u662f\u7b80\u5355\u52a8\u6001\u89c4\u5212\u4e86 vector < int > dp ( s . size (), 0 ); for ( int i = 0 ; i < s . size (); ++ i ) dp [ i ] = i ; for ( int i = 1 ; i < s . size (); ++ i ){ if ( isPalindromic [ 0 ][ i ]){ dp [ i ] = 0 ; continue ; } for ( int j = 0 ; j < i ; ++ j ){ if ( isPalindromic [ j + 1 ][ i ]) dp [ i ] = min ( dp [ i ], dp [ j ] + 1 ); } } return dp [ s . size () -1 ]; }","title":"132. \u5206\u5272\u56de\u6587\u4e32 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_30","text":"","title":"\u5b57\u7b26\u4e32\u52a8\u6001\u89c4\u5212&lt;\u9ad8\u9891\uff01\uff01\uff01\uff01&gt;"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#10","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 bool isMatch ( string s , string p ) { int len1 = s . size (); int len2 = p . size (); //dp[i][j]\u8868\u793as\u7b2ci\u4e2a \u548cp\u7b2cj\u4e2a \u5b57\u7b26(\u5305\u62eci,j)\u4e4b\u524d\u662f\u5426\u5339\u914d vector < vector < bool > > dp ( len1 + 1 , vector < bool > ( len2 + 1 , false )); dp [ 0 ][ 0 ] = true ; //\u8fd9\u91cc\u5f88\u91cd\u8981 //\u9488\u5bf9\u5339\u914ds\u4e3a\u7a7a\u65f6\u7684\u7279\u6b8a\u60c5\u51b5\u7684\u521d\u59cb\u5316 for ( int i = 0 ; i < p . size (); ++ i ){ //\u6ce8\u610f\u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5\u8fd9\u91cci-1\u80af\u5b9a\u5408\u6cd5 if ( p [ i ] == '*' ) dp [ 0 ][ i + 1 ] = dp [ 0 ][ i -1 ]; } for ( int i = 0 ; i < len1 ; ++ i ){ for ( int j = 0 ; j < len2 ; ++ j ){ //\u5982\u679c\u76f8\u7b49\u6216p[j]\u4e07\u80fd\u5339\u914d \u76f4\u63a5\u90fd\u540e\u9000\u4e00\u683c if ( s [ i ] == p [ j ] || p [ j ] == '.' ) dp [ i + 1 ][ j + 1 ] = dp [ i ][ j ]; //\u5982\u679c\u4e3a'*'\u5219\u4e24\u79cd\u60c5\u51b5 else if ( p [ j ] == '*' ){ //\u4e4b\u524d\u8bf4\u4e86 \u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5j>=1 \u540e\u9762j-1\u90fd\u5408\u6cd5 //\u5982\u679c\u524d\u4e00\u683c\u5339\u914d if ( p [ j -1 ] == s [ i ] || p [ j -1 ] == '.' ){ //dp[i+1][j-1]\u5bf9\u5e94\u5339\u914d\u96f6\u4e2a //dp[i+1][j]\u5bf9\u5e94\u5339\u914d\u4e00\u4e2a //dp[i][j+1]\u5bf9\u5e94\u5339\u914d\u591a\u4e2a dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ] || dp [ i + 1 ][ j ] || dp [ i ][ j + 1 ]; } //\u5bf9\u4e8ep \u524d\u4e00\u4e2a\u5b57\u7b26\u548cs\u5f53\u524d\u5b57\u7b26\u4e0d\u5339\u914d \u5219p\u56de\u9000\u4e24\u683c else dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ]; } //\u5982\u679cp[j]\u4e0d\u4e3a\u7279\u6b8a\u5b57\u7b26\u4e14\u4e0es[i]\u4e0d\u7b49 \u5219\u7ee7\u7eed else continue ; } } return dp [ len1 ][ len2 ]; }","title":"10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#132-ii_1","text":"","title":"132. \u5206\u5272\u56de\u6587\u4e32 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_31","text":"\u5b57\u7b26\u4e32\u95ee\u9898\u5e38\u5e38\u548c\u6808\u7ed3\u5408","title":"\u5b57\u7b26\u4e32\u4e0e\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#394","text":"string decodeString ( string s ) { stack < int > num_st ; stack < string > s_st ; int multi = 0 ; string res ; for ( auto & c : s ){ if (( c - '0' ) >= 0 && ( c - '0' ) <= 9 ){ multi = multi * 10 + ( c - '0' ); } else if ( c == '[' ){ //\u6570\u5b57\u5165\u6808 \u5e76\u6e05\u96f6 num_st . push ( multi ); multi = 0 ; //\u5b57\u7b26\u5165\u6808\u5e76\u7f6e\u7a7a s_st . push ( res ); res = \"\" ; } //\u8981\u8fdb\u884c\u8ba1\u7b97\u5e76\u66f4\u65b0res\u4e86 else if ( c == ']' ){ multi = num_st . top (); //\u8fd9\u91cc\u5904\u7406\u5b57\u7b26\u4e32\u975e\u5e38\u5de7\u5999 //-----------------\u6838\u5fc3\u90e8\u5206----------- for ( int i = 0 ; i < multi ; ++ i ){ s_st . top () += res ; //\u8fd9\u4e2a\u5faa\u73af\u8ba1\u7b97 \u6570\u5b57*\u5b57\u7b26\u4e32 } res = s_st . top (); s_st . pop (); //\u66f4\u65b0\u6570\u5b57 num_st . pop (); multi = 0 ; } //\u4e3a\u5b57\u7b26\u5219\u5f80\u540e\u52a0 else res . push_back ( c ); } return res ; }","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_32","text":"","title":"\u5b57\u7b26\u4e32\u7ec4\u5408\u95ee\u9898\u53ca\u5207\u5206\u95ee\u9898\uff08\u56de\u6eaf\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#131_1","text":"","title":"131. \u5206\u5272\u56de\u6587\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_33","text":"","title":"\u5b57\u7b26\u4e32\u5206\u7c7b\u8ba8\u8bba"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#394_1","text":"","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_34","text":"","title":"\u7ecf\u5178\u6392\u5e8f\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#406","text":"\u53c2\u8003 \u91cd\u5199\u6392\u5e8fcmp \u8eab\u9ad8\u964d\u5e8f \u4f4d\u7f6e\u5347\u5e8f \u6309\u7167\u8eab\u9ad8\u6392\u5e8f\u4e4b\u540e\uff0c\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\uff0c\u540e\u5e8f\u63d2\u5165\u8282\u70b9\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u5df2\u7ecf\u63d2\u5165\u7684\u8282\u70b9\uff0c\u6700\u7ec8\u6309\u7167k\u7684\u89c4\u5219\u5b8c\u6210\u4e86\u961f\u5217\u3002 \u6240\u4ee5\u5728\u6309\u7167\u8eab\u9ad8\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\uff1a **\u5c40\u90e8\u6700\u4f18\uff1a**\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\u3002\u63d2\u5165\u64cd\u4f5c\u8fc7\u540e\u7684people\u6ee1\u8db3\u961f\u5217\u5c5e\u6027 **\u5168\u5c40\u6700\u4f18\uff1a**\u6700\u540e\u90fd\u505a\u5b8c\u63d2\u5165\u64cd\u4f5c\uff0c\u6574\u4e2a\u961f\u5217\u6ee1\u8db3\u9898\u76ee\u961f\u5217\u5c5e\u6027 \u590d\u4e60\uff1a \u52a8\u6001\u6570\u7ec4vector\u592a\u6162 \u7528\u94fe\u8868\u66f4\u597d","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_35","text":"","title":"\u7ecf\u5178\u8d2a\u5fc3\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#135","text":"","title":"135. \u5206\u53d1\u7cd6\u679c"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_36","text":"","title":"\u7ecf\u5178\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#312","text":"","title":"312. \u6233\u6c14\u7403"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_37","text":"\u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a....","title":"\u7ecf\u5178\u56fe\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#207","text":"","title":"207. \u8bfe\u7a0b\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#399","text":"const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; }","title":"399. \u9664\u6cd5\u6c42\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_38","text":"","title":"\u529b\u6263\u6bcf\u65e5\u4e00\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#1128","text":"\u89e3\u9898\u601d\u8def \u66b4\u529b\u7684\u8bdd\u4f1a\u8d85\u65f6 \u7528map\u7edf\u8ba1\u6bcf\u4e00\u5f20\u9aa8\u724c\u7684\u6570\u91cf\uff08\u7edf\u8ba1\u65f6\u5148\u5c06\u6240\u6709\u9aa8\u724c\u7ffb\u8f6c\u4e3anums[0]\u5c0f\uff0cnums[1]\u5927\uff0c\u4fbf\u4e8e\u5efa\u8868\uff09\u3002 \u9700\u8981\u6ce8\u610f\uff1a unordered_map \u4e0d\u652f\u6301 unordered_map , int> \u6216\u8005 unordered_map , int> \u56e0\u4e3astd::unordered_map\u5e95\u5c42\u662fhash\uff0c\u800cunordered_map\u6ca1\u6709\u4e13\u95e8\u7684hash\u63d0\u4f9b\u7ed9std::pair\u3002 \u53c2\u8003 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int cnt = 0 ; map < vector < int > , int > nums2Cnts ; for ( vector < int >& nums : dominoes ) { //\u7ffb\u8f6c\u9aa8\u724c if ( nums [ 0 ] > nums [ 1 ]) { swap ( nums [ 0 ], nums [ 1 ]); } ++ nums2Cnts [ nums ]; } for ( auto & c : nums2Cnts ) { if ( c . second > 1 ) { //\u6392\u5217\u7ec4\u5408C(n,2)\uff0c\u5176\u4e2dn\u4e3a\u7b49\u4ef7\u9aa8\u724c\u7684\u603b\u6570\u91cf\u3002 cnt += ( c . second * ( c . second - 1 )) / 2 ; } } return cnt ; } \u63d0\u4ea4 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int ans = 0 ; if ( dominoes . size () == 0 || dominoes [ 0 ]. size () == 0 ) return ans ; map < vector < int > , int > dir ; for ( auto & nums : dominoes ){ if ( nums [ 0 ] > nums [ 1 ]) swap ( nums [ 0 ], nums [ 1 ]); ++ dir [ nums ]; } for ( auto & c : dir ){ if ( c . second > 1 ) { ans += c . second * ( c . second -1 ) / 2 ; } } return ans ; } \u601d\u8003\uff1a \u590d\u4e60\u638c\u63e1\u4e00\u4e0bmap\u7684\u7528\u6cd5 \u4ee5\u53caauto\u5173\u952e\u5b57\u548cc++\u57fa\u7840","title":"1128. \u7b49\u4ef7\u591a\u7c73\u8bfa\u9aa8\u724c\u5bf9\u7684\u6570\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#331","text":"\u53c2\u8003","title":"331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#705","text":"","title":"705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#706","text":"","title":"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#54","text":"","title":"54. \u87ba\u65cb\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#59-ii","text":"","title":"59. \u87ba\u65cb\u77e9\u9635 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#115","text":"","title":"115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#92-ii","text":"","title":"92. \u53cd\u8f6c\u94fe\u8868 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#73","text":"","title":"73. \u77e9\u9635\u7f6e\u96f6"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#341","text":"","title":"341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u2b50"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#456-132","text":"","title":"456. 132 \u6a21\u5f0f \u2b50"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#173","text":"","title":"173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#190","text":"","title":"190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#74","text":"","title":"74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#664","text":"cv\u5927\u6cd5","title":"664. \u5947\u602a\u7684\u6253\u5370\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#_39","text":"","title":"\u91cd\u8981\u7684\u6bcf\u65e5\u4e00\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%9B%E6%89%A3HOT100/#421","text":"c\u57fa\u7840\uff0c\u90a3\u4e9b\u4ec0\u4e48\u7ed3\u6784\u4f53\u3001\u6307\u9488\u5565\u7684\u4e00\u584c\u7cca\u6d82\u3002 \u5b57\u5178\u6811\uff0c\u6709\u8003\u5bdf\uff0c\u7ecf\u5178\u3002","title":"421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"DP\u601d\u8003\u6a21\u677f \u00b6 \u5173\u6ce8\u53d8\u91cf 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[i] dp[i][j]\u6240\u4ee3\u8868\u5b9a\u4e49\uff08\u4e00\u7ef4\u3001\u4e8c\u7ef4\u7b49\uff09 2.\u72b6\u6001\u8f6c\u79fb\uff1a\u5173\u6ce8\u72b6\u6001\u600e\u4e48\u904d\u5386\uff0c\u600e\u4e48\u8f6c\u79fb 3.\u521d\u59cb\u5316\uff1adp\u6570\u7ec4\u5927\u5c0f\uff0c\u6eda\u52a8\u521d\u503c 4.\u904d\u5386\u987a\u5e8f\uff1a\u5c24\u5176\u4e8c\u7ef4 5.\u8fd4\u56de\u6761\u4ef6 */ 403. \u9752\u86d9\u8fc7\u6cb3 \u00b6 class Solution { public boolean canCross ( int [] stones ) { /* \u5173\u6ce8\u53d8\u91cf\uff1a\u5f53\u524dstone\u6570\u7ec4\u7684\u7d22\u5f15index\uff0c\u8df3\u7684\u6b65\u6570k 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[idx][k] \u4ee3\u8868\u8df3\u4e86k\u6b65\u4e4b\u540e\u6765\u5230\u7d22\u5f15\u4e3aidx\u7684\u77f3\u5934\u4e0a 2.\u72b6\u6001\u8f6c\u79fb\uff1aidx\u53ef\u4ee5\u4ecej\u2208[1, idx-1]\u4f4d\u7f6e\u7684\u77f3\u5934\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u9700\u8981\u904d\u5386\u3002\u7531\u4e8e\u662f\u8df3\u4e86k\u6b65(k = diff = stone[idx]-stone[j])\u6765\u5230idx\u4e0a\uff0c\u6240\u4ee5\u8df3\u5230\u524d\u4e00\u5757\u77f3\u5934j\u7684\u6b65\u6570\u5fc5\u987b\u662f k-1 || k || k+1 \u4ece\u800c\u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[idx][diff] = dp[j][diff-1] || dp[j][diff] || dp[j][diff+1] 3.\u521d\u59cb\u5316\uff1adp[1][1]=true; 4.\u904d\u5386\u987a\u5e8f\uff1a\u5916\u5c42\u904d\u5386i\uff0ci\u2208[2, len-1]\uff0c\u4ee3\u8868stone\u7d22\u5f15idx\u3002 \u5185\u5c42\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0c\u4ee3\u8868\u4ece\u524d\u9762\u7684[1, i-1]\u77f3\u5934\u5f97\u5230\u7684\u72b6\u6001\u8f6c\u79fb 5.\u8fd4\u56de\u6761\u4ef6\uff1adp[n-1][k] k\u2208[1, n-1] (\u8df3\u5230stone[n-1]\u7684\u6b65\u6570\u53ef\u4ee5\u4e3a[1, n-1]) */ int len = stones . length ; if ( stones [ 1 ] != 1 ) return false ; //dp[n][k]\u4e3a\u8df3\u8dc3\u4e86k\u6b65\u6765\u5230\u4e86stone[n]\u7684\u4f4d\u7f6e //n\u5bf9\u5e94stone\u7684\u7d22\u5f15\uff0c\u4ed6\u7684\u72b6\u6001\u5e94\u8be5\u7531i\u2208[0,n-1]\u8f6c\u79fb\u800c\u6765 \u7531\u4e8e0\u30011\u7279\u6b8a\u6027\u53ef\u4ee5\u4ece[2, n-1]\u904d\u5386i //\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0cdiff\u5bf9\u5e94\u8df3\u8dc3\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6b65\u6570 //\u5219\u8f6c\u79fb\u60c5\u51b5\u7b49\u4ef7\u4e8edp[i][diff] = dp[j][diff] || dp[j][diff-1] || dp[j][diff+1] boolean [][] dp = new boolean [ len ][ len + 1 ] ; dp [ 1 ][ 1 ] = true ; //i\u4e3astones\u5bf9\u5e94\u7d22\u5f15\uff0c\u4e3a\u6574\u4f53\u5916\u90e8\u904d\u5386 for ( int i = 2 ; i < len ; i ++ ){ //\u72b6\u6001\u8f6c\u79fb\u90e8\u5206\uff0cj\u2208[1, i-1]\u4e3a\u4e4b\u524d\u7684\u72b6\u6001\u904d\u5386 for ( int j = 1 ; j < i ; j ++ ){ //\u8be5\u6b21\u6240\u8df3\u6b65\u6570 int diff = stones [ i ] - stones [ j ] ; if ( diff <= j + 1 ){ //j+1\u4e3a\u7406\u8bba\u6700\u5927\u6b65\u6570 //\u8be5\u6b21\u8df3diff\u6b65\uff0c\u90a3\u4e0a\u4e00\u6b21\u4e5f\u53ea\u80fd\u8df3diff-1 || diff || diff+1\u6b65\uff0c\u4ece\u800c\u5f97\u8f6c\u79fb\u65b9\u7a0b dp [ i ][ diff ] = dp [ j ][ diff - 1 ] || dp [ j ][ diff ] || dp [ j ][ diff + 1 ] ; } } } //len\u662f\u6b65\u6570k\u7684\u4e0a\u9650 for ( int k = 1 ; k < len ; k ++ ){ if ( dp [ len - 1 ][ k ] == true ) return true ; } return false ; } }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#dp","text":"\u5173\u6ce8\u53d8\u91cf 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[i] dp[i][j]\u6240\u4ee3\u8868\u5b9a\u4e49\uff08\u4e00\u7ef4\u3001\u4e8c\u7ef4\u7b49\uff09 2.\u72b6\u6001\u8f6c\u79fb\uff1a\u5173\u6ce8\u72b6\u6001\u600e\u4e48\u904d\u5386\uff0c\u600e\u4e48\u8f6c\u79fb 3.\u521d\u59cb\u5316\uff1adp\u6570\u7ec4\u5927\u5c0f\uff0c\u6eda\u52a8\u521d\u503c 4.\u904d\u5386\u987a\u5e8f\uff1a\u5c24\u5176\u4e8c\u7ef4 5.\u8fd4\u56de\u6761\u4ef6 */","title":"DP\u601d\u8003\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#403","text":"class Solution { public boolean canCross ( int [] stones ) { /* \u5173\u6ce8\u53d8\u91cf\uff1a\u5f53\u524dstone\u6570\u7ec4\u7684\u7d22\u5f15index\uff0c\u8df3\u7684\u6b65\u6570k 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[idx][k] \u4ee3\u8868\u8df3\u4e86k\u6b65\u4e4b\u540e\u6765\u5230\u7d22\u5f15\u4e3aidx\u7684\u77f3\u5934\u4e0a 2.\u72b6\u6001\u8f6c\u79fb\uff1aidx\u53ef\u4ee5\u4ecej\u2208[1, idx-1]\u4f4d\u7f6e\u7684\u77f3\u5934\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u9700\u8981\u904d\u5386\u3002\u7531\u4e8e\u662f\u8df3\u4e86k\u6b65(k = diff = stone[idx]-stone[j])\u6765\u5230idx\u4e0a\uff0c\u6240\u4ee5\u8df3\u5230\u524d\u4e00\u5757\u77f3\u5934j\u7684\u6b65\u6570\u5fc5\u987b\u662f k-1 || k || k+1 \u4ece\u800c\u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[idx][diff] = dp[j][diff-1] || dp[j][diff] || dp[j][diff+1] 3.\u521d\u59cb\u5316\uff1adp[1][1]=true; 4.\u904d\u5386\u987a\u5e8f\uff1a\u5916\u5c42\u904d\u5386i\uff0ci\u2208[2, len-1]\uff0c\u4ee3\u8868stone\u7d22\u5f15idx\u3002 \u5185\u5c42\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0c\u4ee3\u8868\u4ece\u524d\u9762\u7684[1, i-1]\u77f3\u5934\u5f97\u5230\u7684\u72b6\u6001\u8f6c\u79fb 5.\u8fd4\u56de\u6761\u4ef6\uff1adp[n-1][k] k\u2208[1, n-1] (\u8df3\u5230stone[n-1]\u7684\u6b65\u6570\u53ef\u4ee5\u4e3a[1, n-1]) */ int len = stones . length ; if ( stones [ 1 ] != 1 ) return false ; //dp[n][k]\u4e3a\u8df3\u8dc3\u4e86k\u6b65\u6765\u5230\u4e86stone[n]\u7684\u4f4d\u7f6e //n\u5bf9\u5e94stone\u7684\u7d22\u5f15\uff0c\u4ed6\u7684\u72b6\u6001\u5e94\u8be5\u7531i\u2208[0,n-1]\u8f6c\u79fb\u800c\u6765 \u7531\u4e8e0\u30011\u7279\u6b8a\u6027\u53ef\u4ee5\u4ece[2, n-1]\u904d\u5386i //\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0cdiff\u5bf9\u5e94\u8df3\u8dc3\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6b65\u6570 //\u5219\u8f6c\u79fb\u60c5\u51b5\u7b49\u4ef7\u4e8edp[i][diff] = dp[j][diff] || dp[j][diff-1] || dp[j][diff+1] boolean [][] dp = new boolean [ len ][ len + 1 ] ; dp [ 1 ][ 1 ] = true ; //i\u4e3astones\u5bf9\u5e94\u7d22\u5f15\uff0c\u4e3a\u6574\u4f53\u5916\u90e8\u904d\u5386 for ( int i = 2 ; i < len ; i ++ ){ //\u72b6\u6001\u8f6c\u79fb\u90e8\u5206\uff0cj\u2208[1, i-1]\u4e3a\u4e4b\u524d\u7684\u72b6\u6001\u904d\u5386 for ( int j = 1 ; j < i ; j ++ ){ //\u8be5\u6b21\u6240\u8df3\u6b65\u6570 int diff = stones [ i ] - stones [ j ] ; if ( diff <= j + 1 ){ //j+1\u4e3a\u7406\u8bba\u6700\u5927\u6b65\u6570 //\u8be5\u6b21\u8df3diff\u6b65\uff0c\u90a3\u4e0a\u4e00\u6b21\u4e5f\u53ea\u80fd\u8df3diff-1 || diff || diff+1\u6b65\uff0c\u4ece\u800c\u5f97\u8f6c\u79fb\u65b9\u7a0b dp [ i ][ diff ] = dp [ j ][ diff - 1 ] || dp [ j ][ diff ] || dp [ j ][ diff + 1 ] ; } } } //len\u662f\u6b65\u6570k\u7684\u4e0a\u9650 for ( int k = 1 ; k < len ; k ++ ){ if ( dp [ len - 1 ][ k ] == true ) return true ; } return false ; } }","title":"403. \u9752\u86d9\u8fc7\u6cb3"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/","text":"C++\u673a\u8bd5 \u00b6 vs2018 \u5feb\u6377\u952e \u00b6 CTRL + J \u5217\u51fa\u6210\u5458 Ctrl+E,D \u683c\u5f0f\u5316\u5168\u90e8\u4ee3\u7801 Ctrl+K,F \u683c\u5f0f\u5316\u9009\u4e2d\u7684\u4ee3\u7801 CTRL + SHIFT + E \u663e\u793a\u8d44\u6e90\u89c6\u56fe F12 \u8f6c\u5230\u5b9a\u4e49 CTRL + F12 \u8f6c\u5230\u58f0\u660e CTRL + ALT + J \u5bf9\u8c61\u6d4f\u89c8 CTRL + ALT + F1 \u5e2e\u52a9\u76ee\u5f55 CTRL + F1 \u52a8\u6001\u5e2e\u52a9 CTRL + K, CTRL + C \u6ce8\u91ca\u9009\u62e9\u7684\u4ee3\u7801 CTRL + K, CTRL + U \u53d6\u6d88\u5bf9\u9009\u62e9\u4ee3\u7801\u7684\u6ce8\u91ca CTRL + U \u8f6c\u5c0f\u5199 CTRL + SHIFT + U \u8f6c\u5927\u5199 F5 \u8fd0\u884c\u8c03\u8bd5 CTRL + F5 \u8fd0\u884c\u4e0d\u8c03\u8bd5 F10 \u8de8\u8fc7\u7a0b\u5e8f\u6267\u884c F11 \u5355\u6b65\u9010\u53e5\u6267\u884c \u5934\u6587\u4ef6 \u00b6 \u6807\u51c6c\u5e93 \u00b6 \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e assert.h \u65ad\u8a00\u76f8\u5173 ctype.h \u5b57\u7b26\u7c7b\u578b\u5224\u65ad errno.h \u6807\u51c6\u9519\u8bef\u673a\u5236 float.h \u6d6e\u70b9\u9650\u5236 limits.h \u6574\u5f62\u9650\u5236 locale.h \u672c\u5730\u5316\u63a5\u53e3 math.h \u6570\u5b66\u51fd\u6570 setjmp.h \u975e\u672c\u5730\u8df3\u8f6c signal.h \u4fe1\u53f7\u76f8\u5173 stdarg.h \u53ef\u53d8\u53c2\u6570\u5904\u7406 stddef.h \u5b8f\u548c\u7c7b\u578b\u5b9a\u4e49 stdio.h \u6807\u51c6I/O stdlib.h \u6807\u51c6\u5de5\u5177\u5e93 string.h \u5b57\u7b26\u4e32\u548c\u5185\u5b58\u5904\u7406 time.h \u65f6\u95f4\u76f8\u5173 c++ STL \u00b6 using namespace std; \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e algorithm \u901a\u7528\u7b97\u6cd5 deque \u53cc\u7aef\u961f\u5217 vector \u5411\u91cf iterator \u8fed\u4ee3\u5668 stack \u6808 map \u56fe\uff08\u952e\u503c\u5bf9\uff09 list \u5217\u8868 string \u5b57\u7b26\u4e32 set \u96c6\u5408 queue \u961f\u5217 bitset bit\u7c7b numeric \u6570\u503c\u7b97\u6cd5 \u5e38\u7528\u5934 \u00b6 #include<cstdio> #include<cstring> #include<algorithm> #include<iostream> #include<string> #include<vector> #include<stack> #include<bitset> #include<cstdlib> #include<cmath> #include<set> #include<list> #include<deque> #include<map> #include<queue> using namespace std; \u5e38\u7528\u5b8f\u5b9a\u4e49 \u00b6 //\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c #define MAX(x,y) (((x)>(y)) ? (x) : (y)) #define MIN(x,y) (((x) < (y)) ? (x) : (y)) //\u53d6\u4f59 #define mod(x) ((x)%MOD) //for\u5faa\u73af #define FOR(i,f_start,f_end) for(int i=f_start;i<=f_end;++i) //\u8fd4\u56de\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 #define ARR_SIZE(a) (sizeof((a))/sizeof((a[0]))) //\u521d\u59cb\u5316\u6570\u7ec4 #define MT(x,i) memset(x,i,sizeof(x)) #define MEM(a,b) memset((a),(b),sizeof(a)) //\u7b26\u53f7\u91cd\u5b9a\u4e49 #define LL long long #define ull unsigned long long #define pii pair<int,int> //\u5e38\u89c1\u5e38\u6570 #define PI acos(-1.0) #define eps 1e-12 #define INF 0x3f3f3f3f //int\u6700\u5927\u503c const int INF_INT = 2147483647; const ll INF_LL = 9223372036854775807LL; const ull INF_ULL = 18446744073709551615Ull; const ll P = 92540646808111039LL; const ll maxn = 1e5 + 10, MOD = 1e9 + 7; const int Move[4][2] = {-1,0,1,0,0,1,0,-1}; const int Move_[8][2] = {-1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1}; \u7ed3\u6784\u4f53 \u00b6 \u5b9a\u4e49 \u00b6 struct InitMember { int first\uff1b double second\uff1b char* third\uff1b float four; }; \u521d\u59cb\u5316 \u00b6 \u65b9\u6cd5\u4e00\uff1a\u5b9a\u4e49\u65f6\u8d4b\u503c \u00b6 struct InitMember test = {-10,3.141590\uff0c\"method one\"\uff0c0.25}\uff1b \u65b9\u6cd5\u4e8c\uff1a\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c \u00b6 struct InitMember test\uff1b test.first = -10; test.second = 3.141590; test.third = \"method two\"; test.four = 0.25; \u65b9\u6cd5\u4e09\uff1a\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503c\uff08C++\u98ce\u683c\uff09 \u00b6 struct InitMember test = { second\uff1a3.141590, third\uff1a\"method three\", first\uff1a-10, four\uff1a0.25 }; \u65b9\u6cd5\u56db\uff1a\u6784\u9020\u51fd\u6570 \u00b6 //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { ... ... ... return true; } } Graph; Graph g(8, false); \u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 typedef struct{int id;int h;} node; bool operator <(const node& a,const node & b){return (a.h)<(b.h);} c++new\u7684\u4f7f\u7528 \u00b6 \u5e38\u89c4 \u00b6 int *x = new int; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740(\u5373\u6307\u9488) int *a = new int(100); //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u6574\u6570\u7684\u521d\u503c\u4e3a100\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740 char *b = new char[10]; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5b57\u7b26\u6570\u7ec4(\u5305\u62ec10\u4e2a\u5143\u7d20)\u7684\u7a7a\u95f4\uff0c\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5730\u5740 float *p=new float (3.14159);//\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5355\u7cbe\u5ea6\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u5b9e\u6570\u7684\u521d\u503c\u4e3a//3.14159\uff0c\u5c06\u8fd4\u56de\u7684\u8be5\u7a7a\u95f4\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u9488\u53d8\u91cfp \u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4 \u00b6 //\u5217\u503c\u56fa\u5b9a const int MAXCOL = 3; cin>>row; //\u7533\u8bf7\u4e00\u7ef4\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6210\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488 int *pp_arr = new int[nRow * MAXCOL]; int (*p)[MAXCOL] = (int(*)[MAXCOL])pp_arr; //\u6b64\u65f6p[i][j]\u5c31\u53ef\u6b63\u5e38\u4f7f\u7528 \u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4 \u00b6 cin>>row>>col; int **p = new int*[row]; for (int i = 0; i < row; i ++) { p[i] = new int[col]; } \u5e38\u7528STL \u00b6 \u53c2\u8003\uff1a https://blog.csdn.net/f_zyj/article/details/51594851 https://download.csdn.net/download/f_zyj/9988653 \u7b80\u8ff0 \u00b6 STL\u5e95\u5c42\u8bf4\u660e \u00b6 C++ STL \u7684\u5b9e\u73b0\uff1a \u5bb9\u5668 \u5b9e\u73b0 vector \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u6570\u7ec4 \uff0c\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee list \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u652f\u6301\u5feb\u901f\u589e\u5220 deque \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u4e00\u4e2a\u4e2d\u592e\u63a7\u5236\u5668\u548c\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u8be6\u7ec6\u89c1STL\u6e90\u7801\u5256\u6790P146\uff0c\u652f\u6301\u9996\u5c3e\uff08\u4e2d\u95f4\u4e0d\u80fd\uff09\u5feb\u901f\u589e\u5220\uff0c\u4e5f\u652f\u6301\u968f\u673a\u8bbf\u95ee deque \u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217(double-ended queue)\uff0c\u4e5f\u662f\u5728\u5806\u4e2d\u4fdd\u5b58\u5185\u5bb9\u7684.\u5b83\u7684\u4fdd\u5b58\u5f62\u5f0f\u5982\u4e0b:[\u58061] \u2013> [\u58062] \u2013>[\u58063] \u2013> \u2026\u6bcf\u4e2a\u5806\u4fdd\u5b58\u597d\u51e0\u4e2a\u5143\u7d20,\u7136\u540e\u5806\u548c\u5806\u4e4b\u95f4\u6709\u6307\u9488\u6307\u5411,\u770b\u8d77\u6765\u50cf\u662flist\u548cvector\u7684\u7ed3\u5408\u54c1 stack \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6 queue \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6\uff08stack\u548cqueue\u5176\u5b9e\u662f\u9002\u914d\u5668,\u800c\u4e0d\u53eb\u5bb9\u5668\uff0c\u56e0\u4e3a\u662f\u5bf9\u5bb9\u5668\u7684\u518d\u5c01\u88c5\uff09 priority_queue \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e3avector\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u5806heap\u4e3a\u5904\u7406\u89c4\u5219\u6765\u7ba1\u7406\u5e95\u5c42\u5bb9\u5668\u5b9e\u73b0 set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d hash_set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d hash_map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d CCF \u7f16\u8bd1\u51fa\u9519\u539f\u56e0\uff1a \u4e0d\u5141\u8bb8C++STL\u5bb9\u5668\u5d4c\u5957\uff08\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f\uff09 \u00b6 \u5c31\u662f\u8981\u5728\u540e\u9762\u7684\u201c>\u201d\u4e4b\u95f4\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5982\u679c\u6709\u591a\u5c42\uff0c\u90a3\u6bcf\u5c42\u90fd\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 map<string,list<string> > user; algorithm \u00b6 \u5934\u6587\u4ef6\uff1aalgorithm \u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4ee5\u53ca\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u8bf7\u81ea\u884c\u53bb\u5934\u6587\u4ef6\u627e\u5b9a\u4e49\uff01\uff01\uff01 \u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e adjacent_find \u67e5\u627e\u4e24\u4e2a\u76f8\u90bb\uff08Adjacent\uff09\u7684\u7b49\u4ef7\uff08Identical\uff09\u5143\u7d20 all_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 any_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6 count \u8fd4\u56de\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u4e2a\u6570 count_if \u8fd4\u56de\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570 equal \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u662f\u5426\u76f8\u7b49 find \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 find_end \u67e5\u627e\u8303\u56f4*A*\u4e2d\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e find_first_of \u67e5\u627e\u8303\u56f4*A*\u4e2d\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u4e2d\u4efb\u4e00\u5143\u7d20\u7b49\u4ef7\u7684\u5143\u7d20\u7684\u4f4d\u7f6e find_if \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 find_if_notC++11 \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 for_each \u5bf9\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u6307\u5b9a\u51fd\u6570 mismatch \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u7b49\u4ef7\u7684\u4f4d\u7f6e none_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 search \u5728\u8303\u56f4*A*\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e search_n \u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8fde\u7eed*n*\u4e2a\u5143\u7d20\u90fd\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e \u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e copy \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_backward \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_ifC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_nC++11 \u62f7\u8d1d n \u4e2a\u5143\u7d20\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 fill \u5c06\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c fill_n \u5c06\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c generate \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u8303\u56f4\u7684\u5143\u7d20\u4e2d\uff0c\u7528\u4e8e\u6279\u91cf\u8d4b\u503c\u8303\u56f4\u4e2d\u7684\u5143\u7d20 generate_n \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u4e2d iter_swap \u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668\uff08Iterator\uff09\u6307\u5411\u7684\u5143\u7d20 moveC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 move_backwardC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 random_shuffle \u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e remove \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 remove_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 replace \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c reverse \u53cd\u8f6c\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 reverse_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u53cd\u8f6c\u6392\u5e8f\u7ed3\u679c rotate \u5faa\u73af\u79fb\u52a8\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 rotate_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5faa\u73af\u79fb\u52a8\u7ed3\u679c shuffleC++11 \u7528\u6307\u5b9a\u7684\u968f\u673a\u6570\u5f15\u64ce\u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e swap \u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c swap_ranges \u4ea4\u6362\u4e24\u4e2a\u8303\u56f4\u7684\u5143\u7d20 transform \u5bf9\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u4ee5\u6539\u53d8\u5143\u7d20\u7684\u503c unique \u5220\u9664\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6240\u6709\u8fde\u7eed\u91cd\u590d\u5143\u7d20\uff0c\u4ec5\u4ec5\u7559\u4e0b\u6bcf\u7ec4\u7b49\u503c\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 unique_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u552f\u4e00\u5316\uff08\u53c2\u8003\u4e0a\u8ff0\u7684 unique\uff09\u7ed3\u679c \u5212\u5206\u64cd\u4f5c \u00b6 |\u51fd\u6570|\u8bf4\u660e| | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | |is_partitionedC++11| \u68c0\u6d4b\u67d0\u4e2a\u8303\u56f4\u662f\u5426\u6309\u6307\u5b9a\u8c13\u8bcd\uff08Predicate\uff09\u5212\u5206\u8fc7| |partition | \u5c06\u67d0\u4e2a\u8303\u56f4\u5212\u5206\u4e3a\u4e24\u7ec4| |partition_copyC++11 | \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5212\u5206\u7ed3\u679c| |partition_pointC++11 | \u8fd4\u56de\u88ab\u5212\u5206\u8303\u56f4\u7684\u5212\u5206\u70b9| |stable_partition | \u7a33\u5b9a\u5212\u5206\uff0c\u4e24\u7ec4\u5143\u7d20\u5404\u7ef4\u6301\u76f8\u5bf9\u987a\u5e8f| \u6392\u5e8f\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e is_sortedC++11 \u68c0\u6d4b\u6307\u5b9a\u8303\u56f4\u662f\u5426\u5df2\u6392\u5e8f is_sorted_untilC++11 \u8fd4\u56de\u6700\u5927\u5df2\u6392\u5e8f\u5b50\u8303\u56f4 nth_element \u90e8\u4efd\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8303\u56f4\u6309\u7ed9\u5b9a\u4f4d\u7f6e\u5904\u7684\u5143\u7d20\u5212\u5206 partial_sort \u90e8\u4efd\u6392\u5e8f partial_sort_copy \u62f7\u8d1d\u90e8\u5206\u6392\u5e8f\u7684\u7ed3\u679c sort \u6392\u5e8f stable_sort \u7a33\u5b9a\u6392\u5e8f \u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e binary_search \u5224\u65ad\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 equal_range \u8fd4\u56de\u8303\u56f4\u4e2d\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u8303\u56f4 lower_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 upper_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u96c6\u5408\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e includes \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 inplace_merge \u5c31\u7eea\u5408\u5e76 merge \u5408\u5e76 set_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6 set_intersection \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 set_symmetric_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5bf9\u79f0\u5dee set_union \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 \u5806\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e is_heap \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u662f\u5426\u6ee1\u8db3\u5806\u7ed3\u6784 is_heap_untilC++11 \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u4e2d\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u6700\u5927\u5b50\u8303\u56f4 make_heap \u7528\u7ed9\u5b9a\u8303\u56f4\u6784\u9020\u51fa\u4e00\u4e2a\u5806 pop_heap \u4ece\u4e00\u4e2a\u5806\u4e2d\u5220\u9664\u6700\u5927\u7684\u5143\u7d20 push_heap \u5411\u5806\u4e2d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 sort_heap \u5c06\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u8303\u56f4\u6392\u5e8f \u6700\u5927/\u6700\u5c0f\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e is_permutationC++11 \u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684\u4e00\u79cd\u6392\u5e8f lexicographical_compare \u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u7684\u5b57\u5178\u5e8f max \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 max_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 min \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 min_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 minmaxC++11 \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 minmax_elementC++11 \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 next_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0b\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217 prev_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0a\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217 vector \u00b6 \u5934\u6587\u4ef6\uff1avector \u5728STL\u7684vector\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86vector\uff08\u5411\u91cf\u5bb9\u5668\u6a21\u7248\u7c7b\uff09\uff0cvector\u5bb9\u5668\u4ee5\u8fde\u7eed\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u5c06vector\u770b\u4f5c\u662f\u4ee5\u987a\u5e8f\u7ed3\u6784\u5b9e\u73b0\u7684\u7ebf\u6027\u8868\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u9700\u8981\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u65f6\uff0cvector\u5c06\u4f1a\u662f\u7406\u60f3\u7684\u9009\u62e9\uff0cvector\u53ef\u4ee5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u589e\u957f\u5b58\u50a8\u7a7a\u95f4\u3002 vector\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5206\u914d\u5668\u7684\u7c7b\u578b\uff0c\u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u914d\u5668 \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49vector\u5411\u91cf\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a vector<int> s; // \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684vector\u5bf9\u8c61\uff0c\u5b58\u50a8\u7684\u662fint\u7c7b\u578b\u7684\u5143\u7d20 vector<int> s(n); // \u5b9a\u4e49\u4e00\u4e2a\u542b\u6709n\u4e2aint\u5143\u7d20\u7684vector\u5bf9\u8c61 vector<int> s(first, last); // \u5b9a\u4e49\u4e00\u4e2avector\u5bf9\u8c61\uff0c\u5e76\u4ece\u7531\u8fed\u4ee3\u5668first\u548clast\u5b9a\u4e49\u7684\u5e8f\u5217[first, last)\u4e2d\u590d\u5236\u521d\u503c vector\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s[i] // \u76f4\u63a5\u4ee5\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20 s.front() // \u8fd4\u56de\u9996\u5143\u7d20 s.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 s.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x s.size() // \u8fd4\u56de\u8868\u957f s.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 s.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 s.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val s.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val s.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 s.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 s.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) s.reserve(n) // \u9884\u5206\u914d\u7f13\u51b2\u7a7a\u95f4\uff0c\u4f7f\u5b58\u50a8\u7a7a\u95f4\u81f3\u5c11\u53ef\u5bb9\u7eb3n\u4e2a\u5143\u7d20 s.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 s.swap(v) // \u5c06s\u4e0e\u53e6\u4e00\u4e2avector\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 s.assign(first, last) // \u5c06\u5e8f\u5217\u66ff\u6362\u6210\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\uff0c[first, last)\u4e0d\u80fd\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u90e8\u5206 // \u8981\u6ce8\u610f\u7684\u662f\uff0cresize\u64cd\u4f5c\u548cclear\u64cd\u4f5c\u90fd\u662f\u5bf9\u8868\u7684\u6709\u6548\u5143\u7d20\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8\u7f13\u51b2\u7a7a\u95f4\u7684\u5927\u5c0f // \u53e6\u5916\uff0cvector\u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5982\u53cd\u8f6c\u3001\u53d6\u53cd\u7b49\uff0c\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e // vector\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u5e8f\u5217\u4e4b\u95f4\u7684\u6bd4\u8f83\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff08>\u3001<\u3001>=\u3001<=\u3001==\u3001!=\uff09\uff0c\u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u3002 // \u8fd8\u662f\u6765\u770b\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u5427\u2026\u2026 /* * \u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u4e00\u7ec4\u6574\u6570\uff0c\u518d\u5c06\u8fd9\u7ec4\u6574\u6570\u6309\u5012\u5e8f\u8f93\u51fa */ #include <iostream> #include <vector> using namespace std; int main() { vector<int> L; int x; while(cin >> x) { L.push_back(x); } for (int i = L.size() - 1; i >= 0; i--) { cout << L[i] << \" \"; } cout << endl; return 0; } list \u00b6 \u5934\u6587\u4ef6\uff1alist \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49list\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a list<int>a{1,2,3} list<int>a(n) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f0 list<int>a(n, m) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fm list<int>a(first, last) //\u58f0\u660e\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u5143\u7d20\u7684\u521d\u59cb\u503c\u6765\u6e90\u4e8e\u7531\u533a\u95f4\u6240\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff0cfirst\u548clast\u662f\u8fed\u4ee3\u5668 list\u7684\u57fa\u672c\u64cd\u4f5c\uff1a a.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.push_front(x) // \u5411\u8868\u5934\u63d2\u5165\u5143\u7d20x a.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x a.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 a.pop_front() // \u5220\u9664\u8868\u5934\u5143\u7d20 a.size() // \u8fd4\u56de\u8868\u957f a.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 a.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 a.front() // \u8fd4\u56de\u9996\u5143\u7d20 a.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 a.swap(v) // \u5c06a\u4e0e\u53e6\u4e00\u4e2alist\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 a.merge(b) // \u8c03\u7528\u7ed3\u675f\u540eb\u53d8\u4e3a\u7a7a\uff0ca\u4e2d\u5143\u7d20\u5305\u542b\u539f\u6765a\u548cb\u7684\u5143\u7d20 a.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val a.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val a.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 a.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 a.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) a.remove(x) // \u5220\u9664\u4e86a\u4e2d\u6240\u6709\u503c\u4e3ax\u7684\u5143\u7d20 a.assign(n, val) // \u5c06a\u4e2d\u7684\u6240\u6709\u5143\u7d20\u66ff\u6362\u6210n\u4e2aval\u5143\u7d20 a.assign(b.begin(), b.end()) //\u5c06a\u53d8\u6210b string \u00b6 \u5934\u6587\u4ef6\uff1astring string\u662fSTL\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5b57\u7b26\u4e32\u3002\u800c\u5728\u4f7f\u7528string\u4e4b\u524d\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u7528 char* \u8868\u793a\u7684\u3002 string\u548c char* \u7684\u533a\u522b string\u662f\u4e00\u4e2a\u7c7b, char* \u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u3002 string\u5c01\u88c5\u4e86 char* \uff0c\u7ba1\u7406\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a char* \u578b\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4string\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u91cc\u9762\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f char* \u3002 string\u4e0d\u7528\u8003\u8651\u5185\u5b58\u91ca\u653e\u548c\u8d8a\u754c\u3002 string\u7ba1\u7406 char* \u6240\u5206\u914d\u7684\u5185\u5b58\u3002\u6bcf\u4e00\u6b21string\u7684\u590d\u5236\uff0c\u53d6\u503c\u90fd\u7531string\u7c7b\u8d1f\u8d23\u7ef4\u62a4\uff0c\u4e0d\u7528\u62c5\u5fc3\u590d\u5236\u8d8a\u754c\u548c\u53d6\u503c\u8d8a\u754c\u7b49\u3002 string\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570 \u67e5\u627efind\uff0c\u62f7\u8d1dcopy\uff0c\u5220\u9664erase\uff0c\u66ff\u6362replace\uff0c\u63d2\u5165insert. \u6784\u9020\u548c\u6790\u6784\u51fd\u6570: \u8868\u8fbe\u5f0f \u6548\u679c string s \u751f\u6210\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 string s(str) copy\u6784\u9020\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2astr\u7684\u590d\u5236\u54c1 string s(str,idx) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(str,idx,len) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u4e14\u957f\u5ea6\u6700\u591a\u4e3alen\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr\uff0clen) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u7684\u524dlen\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(num\uff0cc) \u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542bnum\u4e2a\u5b57\u7b26c string s(beg\uff0cend) \u4ee5\u533a\u95f4[beg,end]\u5185\u6240\u6709\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c \u64cd\u4f5c\u51fd\u6570: \u64cd\u4f5c\u51fd\u6570 \u6548\u679c =\uff0cassign() \u8d4b\u4ee5\u65b0\u503c swap() \u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9 +=, append(),push_back() \u6dfb\u52a0\u5b57\u7b26 insert() \u63d2\u5165\u5b57\u7b26 erase() \u5220\u9664\u5b57\u7b26 clear() \u79fb\u9664\u5168\u90e8\u5b57\u7b26 resize() \u6539\u53d8\u5b57\u7b26\u6570\u91cf replace() \u66ff\u6362\u5b57\u7b26 + \u4e32\u8054\u5b57\u7b26\u4e32 ==\uff0c!=\uff0c<\uff0c<=\uff0c>\uff0c>=\uff0ccompare() \u6bd4\u8f83\u5b57\u7b26\u4e32\u5185\u5bb9 size(),length() \u8fd4\u56de\u5b57\u7b26\u6570\u91cf,\u7b49\u6548\u51fd\u6570 max_size() \u8fd4\u56de\u5b57\u7b26\u7684\u6700\u5927\u53ef\u80fd\u4e2a\u6570 empty() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a capacity() \u8fd4\u56de\u91cd\u65b0\u5206\u914d\u4e4b\u524d\u7684\u5b57\u7b26\u5bb9\u91cf reserve() \u4fdd\u7559\u4e00\u5b9a\u91cf\u5185\u5b58\u4ee5\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26 [ ]\uff0cat() \u5b58\u53d6\u5355\u4e00\u5b57\u7b26 \u00bb\uff0cgetline() \u4ecestream\u4e2d\u8bfb\u53d6\u67d0\u503c \u00ab \u5c06\u67d0\u503c\u5199\u5165stream copy() \u5c06\u5185\u5bb9\u590d\u5236\u4e3a\u4e00\u4e2aC-string c_str() \u5c06\u5185\u5bb9\u4ee5C-string\u5f62\u5f0f\u8fd4\u56de data() \u5c06\u5185\u5bb9\u4ee5\u5b57\u7b26\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de substr() \u8fd4\u56de\u67d0\u4e2a\u5b50\u5b57\u7b26\u4e32 begin()\uff0cend() \u63d0\u4f9b\u6b63\u5e38\u7684\u8fed\u4ee3\u5668\u652f\u6301 rbegin()\uff0crend() \u63d0\u4f9b\u9006\u5411\u8fed\u4ee3\u5668\u652f\u6301 pair \u00b6 \u5934\u6587\u4ef6\uff1autility STL\u7684utility\u5934\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u5355\u7684\u6a21\u7248\u7c7bpair\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u6216\u5143\u7d20\u5bf9\uff0c\u5e76\u63d0\u4f9b\u4e86\u6309\u7167\u5b57\u5178\u5e8f\u5bf9\u5143\u7d20\u5bf9\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6a21\u7248\u51fd\u6570\u3002 Example\uff0c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5750\u6807\u70b9\uff0c\u5219\u53ef\u4ee5\uff1a pair<double, double> p; cin >> p.first >> p.second; pair\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u9996\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u548c\u5c3e\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002pair\u6a21\u7248\u7c7b\u5bf9\u8c61\u6709\u4e24\u4e2a\u6210\u5458\uff1afirst\u548csecond\uff0c\u5206\u522b\u8868\u793a\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002 \u5728\u5176\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86pair\u4e0a\u7684\u516d\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a<\u3001>\u3001<=\u3001>=\u3001==\u3001!=\uff0c\u5176\u89c4\u5219\u662f\u5148\u6bd4\u8f83first\uff0cfirst\u76f8\u7b49\u65f6\u518d\u6bd4\u8f83second\uff0c\u8fd9\u7b26\u5408\u5927\u591a\u6570\u5e94\u7528\u7684\u903b\u8f91\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u91cd\u8f7d\u8fd9\u51e0\u4e2a\u8fd0\u7b97\u7b26\u6765\u91cd\u65b0\u6307\u5b9a\u81ea\u5df1\u7684\u6bd4\u8f83\u903b\u8f91\u3002 \u9664\u4e86\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2apair\u5bf9\u8c61\u5916\uff0c\u5982\u679c\u9700\u8981\u5373\u65f6\u751f\u6210\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u7248\u51fd\u6570\uff1amake_pair\u3002make_pair\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u5143\u7d20\u5bf9\u7684\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002 map \u00b6 \u5934\u6587\u4ef6\uff1amap \u5728STL\u7684\u5934\u6587\u4ef6\u4e2dmap\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7bmap\u548cmultimap\uff0c\u7528\u6709\u5e8f\u4e8c\u53c9\u6811\u8868\u5b58\u50a8\u7c7b\u578b\u4e3a pair<const Key, T> \u7684\u5143\u7d20\u5bf9\u5e8f\u5217\u3002\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u4ee5const Key\u90e8\u5206\u4f5c\u4e3a\u6807\u8bc6\uff0cmap\u4e2d\u6240\u6709\u5143\u7d20\u7684Key\u503c\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0cmultimap\u5219\u5141\u8bb8\u6709\u91cd\u590d\u7684Key\u503c\u3002 \u53ef\u4ee5\u5c06map\u770b\u4f5c\u662f\u7531Key\u6807\u8bc6\u5143\u7d20\u7684\u5143\u7d20\u96c6\u5408\uff0c\u8fd9\u7c7b\u5bb9\u5668\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u8054\u5bb9\u5668\u201d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aKey\u503c\u6765\u5feb\u901f\u51b3\u5b9a\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u4e8e\u9700\u8981\u6309\u7167Key\u503c\u67e5\u627e\u5143\u7d20\u7684\u5bb9\u5668\u3002 map\u6a21\u7248\u7c7b\u9700\u8981\u56db\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u7b2c\u4e09\u4e2a\u662f\u6bd4\u8f83\u7b97\u5b50\uff0c\u7b2c\u56db\u4e2a\u662f\u5206\u914d\u5668\u7c7b\u578b\u3002\u5176\u4e2d\u952e\u503c\u7c7b\u578b\u548c\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\u3002 \u5b9a\u4e49map\u5bf9\u8c61\u7684\u4ee3\u7801\u793a\u4f8b\uff1a map<string, int> m; map\u7684\u57fa\u672c\u64cd\u4f5c\uff1a /* \u5411map\u4e2d\u63d2\u5165\u5143\u7d20 */ m[key] = value; // [key]\u64cd\u4f5c\u662fmap\u5f88\u6709\u7279\u8272\u7684\u64cd\u4f5c,\u5982\u679c\u5728map\u4e2d\u5b58\u5728\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9, \u5219\u8fd4\u56de\u8be5\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206,\u5426\u5219\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9,\u503c\u57df\u4e3a\u9ed8\u8ba4\u503c\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u8be5\u64cd\u4f5c\u5411map\u4e2d\u63d2\u5165\u5143\u7d20\u5bf9\u6216\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206\u3002 m.insert(make_pair(key, value)); // \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528insert\u65b9\u6cd5\u63d2\u5165\u5143\u7d20\u5bf9,insert\u64cd\u4f5c\u4f1a\u8fd4\u56de\u4e00\u4e2apair,\u5f53map\u4e2d\u6ca1\u6709\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u63d2\u5165\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5176second\u4e3atrue;\u82e5map\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e0ekey\u76f8\u7b49\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,second\u4e3afalse\u3002 /* \u67e5\u627e\u5143\u7d20 */ int i = m[key]; // \u8981\u6ce8\u610f\u7684\u662f,\u5f53\u4e0e\u8be5\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9\u4e0d\u5b58\u5728\u65f6,\u4f1a\u521b\u5efa\u952e\u503c\u4e3akey\uff08\u5f53\u53e6\u4e00\u4e2a\u5143\u7d20\u662f\u6574\u5f62\u65f6\uff0cm[key]=0\uff09\u7684\u5143\u7d20\u5bf9\u3002 map<string, int>::iterator it = m.find(key); // \u5982\u679cmap\u4e2d\u5b58\u5728\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,find\u64cd\u4f5c\u5c06\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5426\u5219,\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8emap\u7684end()(\u53c2\u89c1vector\u4e2d\u63d0\u5230\u7684begin()\u548cend()\u64cd\u4f5c)\u3002 /* \u5220\u9664\u5143\u7d20 */ m.erase(key); // \u5220\u9664\u4e0e\u6307\u5b9akey\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 m.erase(it); // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5b9a\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668\u3002 /* \u5176\u4ed6\u64cd\u4f5c */ m.size(); // \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 m.empty(); // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a m.clear(); // \u6e05\u7a7a\u6240\u6709\u5143\u7d20 stack \u00b6 \u5934\u6587\u4ef6\uff1astack stack\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728stack\u5934\u6587\u4ef6\u4e2d\u3002 stack\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u4f46\u662f\u53ea\u6709\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\uff0c\u5728\u4e0d\u6307\u5b9a\u5bb9\u5668\u7c7b\u578b\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u7684\u7c7b\u578b\u4e3adeque\u3002 \u5b9a\u4e49stack\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: stack<int> s; stack<string> ss; stack\u7684\u57fa\u672c\u64cd\u4f5c\u6709\uff1a s.push(x); // \u5165\u6808 s.pop(); // \u51fa\u6808 s.top(); // \u8bbf\u95ee\u6808\u9876 s.empty(); // \u5f53\u6808\u7a7a\u65f6\uff0c\u8fd4\u56detrue s.size(); // \u8bbf\u95ee\u6808\u4e2d\u5143\u7d20\u4e2a\u6570 queue \u00b6 \u5934\u6587\u4ef6\uff1aqueue queue\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728queue\u5934\u6587\u4ef6\u4e2d\u3002 queue\u4e0estack\u76f8\u4f3c\uff0cqueue\u6a21\u7248\u7c7b\u4e5f\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7d20\u7c7b\u578b\u65f6\u5fc5\u987b\u7684\uff0c\u5bb9\u5668\u7c7b\u578b\u65f6\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3adeque\u7c7b\u578b\u3002 \u5b9a\u4e49queue\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5fc5\u987b\u5982\u4e0b\uff1a queue<int> q; queue<double> qq; queue\u7684\u57fa\u672c\u64cd\u4f5c\uff1a q.push(x); // \u5165\u961f\u5217 q.pop(); // \u51fa\u961f\u5217 q.front(); // \u8bbf\u95ee\u961f\u9996\u5143\u7d20 q.back(); // \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 q.empty(); // \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a q.size(); // \u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 set \u00b6 \u5934\u6587\u4ef6\uff1aset set\u662f\u4e0e\u96c6\u5408\u76f8\u5173\u7684\u5bb9\u5668\uff0cSTL\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86set\u7684\u5b9e\u73b0\uff0c\u5728\u7f16\u7a0b\u9898\u4e2d\u9047\u89c1\u96c6\u5408\u95ee\u9898\u76f4\u63a5\u8c03\u7528\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002 \u5b9a\u4e49set\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a set<int> s; set<double> ss; set\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s.begin() // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() // \u6e05\u9664\u6240\u6709\u5143\u7d20 s.count() // \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570 s.empty() // \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue(\u771f\uff09 s.end() // \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20 s.equal_range() // \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0e\u7ed9\u5b9a\u503c\u76f8\u7b49\u7684\u4e0a\u4e0b\u9650\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668 s.erase() // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 s.find() // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.get_allocator() // \u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668 s.insert() // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 s.lower_bound() // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.key_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570 s.max_size() // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap() // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound() // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.value_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570 multiset \u00b6 \u5934\u6587\u4ef6\uff1aset \u5728set\u5934\u6587\u4ef6\u4e2d\uff0c\u8fd8\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u6a21\u7248\u7c7bmultiset\uff08\u591a\u91cd\u96c6\u5408\uff09\u3002\u591a\u91cd\u96c6\u5408\u4e0e\u96c6\u5408\u7684\u533a\u522b\u5728\u4e8e\u96c6\u5408\u4e2d\u4e0d\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u800c\u591a\u91cd\u96c6\u5408\u4e2d\u53ef\u4ee5\u5b58\u5728\u3002 \u5b9a\u4e49multiset\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a multiset<int> s; multiset<double> ss; multiset\u548cset\u7684\u57fa\u672c\u64cd\u4f5c\u76f8\u4f3c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u96c6\u5408\u7684count()\u80fd\u8fd4\u56de0\uff08\u65e0\uff09\u6216\u80051\uff08\u6709\uff09\uff0c\u800c\u591a\u91cd\u96c6\u5408\u662f\u6709\u591a\u5c11\u4e2a\u8fd4\u56de\u591a\u5c11\u4e2a\u3002 bitset \u00b6 \u5934\u6587\u4ef6\uff1abitset \u5728 STLSTL \u7684\u5934\u6587\u4ef6\u4e2d bitset\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7b bitsetbitset\uff0c\u7528\u6765\u65b9\u4fbf\u5730\u7ba1\u7406\u4e00\u7cfb\u5217\u7684 bitbit \u4f4d\u7684\u7c7b\u3002bitsetbitset \u9664\u4e86\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u4e0b\u6807\u7684 bitbit \u4f4d\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u628a\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570\u6765\u8fdb\u884c\u67d0\u4e9b\u7edf\u8ba1\u3002 bitsetbitset \u6a21\u677f\u7c7b\u9700\u8981\u4e00\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7528\u6765\u660e\u786e\u6307\u5b9a\u542b\u6709\u591a\u5c11\u4f4d\u3002 \u5b9a\u4e49 bitsetbitset \u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\uff1a const int MAXN = 32; bitset<MAXN> bt; // bt \u5305\u62ec MAXN \u4f4d\uff0c\u4e0b\u6807 0 ~ MAXN - 1\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a 0 bitset<MAXN> bt1(0xf); // 0xf \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570 f\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1111\uff0c\u5c06 bt1 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1 bitset<MAXN> bt2(012); // 012 \u8868\u793a\u516b\u8fdb\u5236\u6570 12\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1010\uff0c\u5373\u5c06 bt2 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt3(\"1010\"); // \u5c06 bt3 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt4(s, pos, n);// \u5c06 01 \u5b57\u7b26\u4e32 s \u7684 pos \u4f4d\u5f00\u59cb\u7684 n \u4f4d\u521d\u59cb\u5316 bt4 bitsetbitset \u57fa\u672c\u64cd\u4f5c\uff1a bt.any() // bt \u4e2d\u662f\u5426\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\uff1f bt.none() // bt \u4e2d\u4e0d\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u5417\uff1f bt.count() // bt \u4e2d\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt.size() // bt \u4e2d\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt[pos] // \u8bbf\u95ee bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d bt.test(pos) // bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u662f\u5426\u4e3a 1 bt.set() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 1 bt.set(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a 1 bt.reset() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 0 bt.reset(pos) // \u628a bt \u4e2d\u5728pos\u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a0 bt.flip() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u9010\u4f4d\u53d6\u53cd bt.flip(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd bt[pos].flip() // \u540c\u4e0a bt.to_ulong() // \u7528 bt \u4e2d\u540c\u6837\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fd4\u56de\u4e00\u4e2a unsigned long \u503c os << bt // \u628a bt \u4e2d\u7684\u4f4d\u96c6\u8f93\u51fa\u5230 os \u6d41 \u56fe\u6a21\u677f \u00b6 \u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f \u00b6 #include <iostream> #include <vector> #include <set> using namespace std; #define MAX(a, b) ((a) > (b) ? (a) : (b) ) //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1) {} Vertex(int nid) : id(nid) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); } return true; } //\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> BFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); visited.insert(start); while(g.size() > 0) { int id = g[0]; g.erase(g.begin()); rst.push_back(id); for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); visited.insert(id1); } } } return rst; } //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> DFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); //cout << \"push \" << start << \" \"; visited.insert(start); rst.push_back(start); bool found; while(g.size() > 0) { int id = g[g.size()-1]; found = false; for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); rst.push_back(id1); visited.insert(id1); //cout << \"push \" << id1 << \" \"; found = true; break; } } if (!found) { int id2 = g[g.size()-1]; rst.push_back(-1 * id2); //cout << \"pop \" << id2 << \" \"; g.pop_back(); } } //cout << endl; return rst; } } Graph; int main() { Graph g(8, false); g.addEdge(0, 1); g.addEdge(0, 3); g.addEdge(1, 2); g.addEdge(3, 4); g.addEdge(3, 5); g.addEdge(4, 5); g.addEdge(4, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(6, 7); vector<int> bv = g.BFS(0); cout << \"\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; for(int j = 0; j < bv.size(); j++) cout << bv[j] << \" \"; cout << endl; cout << \"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; Graph g1(6, false); g1.addEdge(0, 1); g1.addEdge(0, 4); g1.addEdge(0, 5); g1.addEdge(1, 5); g1.addEdge(4, 5); g1.addEdge(5, 2); g1.addEdge(5, 3); g1.addEdge(2, 3); vector<int> route = g1.DFS(0); for(int i = 0; i < route.size(); i++) cout << route[i] << \" \"; cout << endl; char ch; cin >> ch; return 0; } \u5e26\u51fa\u5165\u5ea6\u7684 (2019\u63a8\u514d\u8bd5\u9898) \u00b6 #include <algorithm> #include <iostream> #include <vector> #include <queue> #define MAX(a, b) ((a) > (b) ? (a) : (b) ) using namespace std; int n,m; vector<int> inDegreelist,outDegreelist; //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); vertexs[id1].outDegree++; vertexs[id2].inDegree++; } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); vertexs[id1].outDegree++; vertexs[id1].inDegree++; vertexs[id2].outDegree++; vertexs[id2].inDegree++; } return true; } } Graph; Graph g; void init(){ cin>>n>>m; g=Graph(n, true); int src,dst; while(m--){ cin>>src>>dst; g.addEdge(src,dst); } vector<Vertex>::iterator it = g.vertexs.begin(); while(it!=g.vertexs.end()){ inDegreelist.push_back(it->inDegree); outDegreelist.push_back(it->outDegree); it++; } } int countin(int n){ return count(inDegreelist.begin(),inDegreelist.end(),n); } int countout(int n){ return count(outDegreelist.begin(),outDegreelist.end(),n); } bool Is_List(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u548c\u4e00\u4e2aoutDegree\u4e3a0\u7684\u5c3e\uff0c\u4e14\u5176\u4f59\u8282\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e3a1; return (countin(0)==1)&&(countout(0)==1)&&(countin(1)==n-1)&&(countout(1)==n-1); } bool Is_Tree(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u4e14\u5176\u4f59\u8282\u70b9inDegree\u5747\u4e3a1\uff0c\u4e14\u4e0d\u662f\u94fe\u8868; return (countin(0)==1)&&(countin(1)==n-1); } bool topologicalSort(){//\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6709\u73af\u65e0\u73af int num=0;//\u8bb0\u5f55\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570 queue<int> q; for(int i=0;i<n;i++){ if(inDegreelist[i]==0){ q.push(i);//\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u961f } } while(!q.empty()){ int u=q.front();//\u53d6\u961f\u9996\u9876\u70b9u q.pop(); for(int i=0;i<g.vertexs[u].connectors.size();i++){ int v=g.vertexs[u].connectors[i];//u\u7684\u540e\u7ee7\u8282\u70b9v inDegreelist[v]--;//v\u7684\u5165\u5ea6\u51cf1 if(inDegreelist[v]==0){//\u9876\u70b9v\u7684\u5165\u5ea6\u51cf\u4e3a0\u5219\u5165\u961f q.push(v); } } g.vertexs[u].connectors.clear();//\u6e05\u7a7au\u7684\u6240\u6709\u51fa\u8fb9 num++;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570\u52a01 } if(num==n) return true;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u4e3an\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u6210\u529f\uff0c\u56fe\u65e0\u73af else return false;//\u5426\u5219\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u56fe\u6709\u73af } int main(){ init(); if(n==0||m==0){ cout<<\"error\"<<endl; } if(Is_List()){ cout<<\"list\"<<endl; } else if(Is_Tree()){ cout<<\"tree\"<<endl; } else if(topologicalSort()){ cout<<\"no ring\"<<endl; } else{ cout<<\"have ring\"<<endl; } return 0; } \u56fe\u7b97\u6cd5\uff1a\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868 \u00b6 #include<stdio.h> #include<stdlib.h> #ifndef BASE #define BASE #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2 typedef int Status; typedef int bool; #endif #define VertexType char //\u70b9\u7c7b\u578b #define VRType int //\u8fb9\u7c7b\u578b #define maxSize 100 void Visit(VertexType e) { printf(\"%c\", e); } #define MAX_VERTEX_NUM 20 typedef enum{DG, UDG} GraphKind; typedef struct ArcNode{ int adjV; //\u8fb9\u6307\u5411\u7684\u9876\u70b9 VRType weight; //\u6743\u91cd struct ArcNode *next; }ArcNode; //\u8fb9 typedef struct VNode{ VertexType data; ArcNode *firstarc; }VNode, AdjList[MAX_VERTEX_NUM]; //\u9876\u70b9 typedef struct{ GraphKind kind; int vernum,arcnum; AdjList vers; }ALGraph; /*------------------------ |7.14 \u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868| ------------------------*/ Status InitGraph_AL(ALGraph *pG) { //\u521d\u59cb\u5316 int i; pG->arcnum = 0; pG->vernum = 0; for (i=0; i<MAX_VERTEX_NUM; ++i) pG->vers[i].firstarc = NULL; //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc return OK; } int LocateVex_AL(ALGraph G, VertexType e) { //\u5b9a\u4f4d\u503c\u4e3ae\u7684\u5143\u7d20\u4e0b\u6807 int i; for (i=0; i<G.vernum; ++i) { if (G.vers[i].data == e) { return i; } } return -1; } Status CreateDG_AL(ALGraph *pG) { //\u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868 //\u8f93\u5165\u89c4\u5219\uff1a\u9876\u70b9\u6570\u76ee->\u5f27\u7684\u6570\u76ee->\u5404\u9876\u70b9\u7684\u4fe1\u606f->\u5404\u6761\u5f27\u7684\u4fe1\u606f int i,a,b; char tmp[MAX_VERTEX_NUM]; char h,t; ArcNode *p, *q; InitGraph_AL(pG); //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc\uff0c\u5982\u679c\u4e0d\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3aNULL\uff0c\u4f1a\u51fa\u9519 //\u56fe\u7684\u7c7b\u578b pG->kind = DG; //\u9876\u70b9\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->vernum = i; //\u5f27\u7684\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->arcnum = i; //\u5404\u9876\u70b9\u4fe1\u606f scanf(\"%s\", tmp); for (i=0; i<pG->vernum; ++i) pG->vers[i].data=tmp[i]; //\u5f27\u7684\u4fe1\u606f for (i=0; i<pG->arcnum; ++i) { scanf(\"%s\", tmp); h = tmp[0]; t = tmp[2]; a = LocateVex_AL(*pG, h); b = LocateVex_AL(*pG, t); if (a<0 || b<0) return ERROR; p = (ArcNode *)malloc(sizeof(ArcNode)); if (!p) exit(OVERFLOW); p->adjV=b;p->next=NULL; if (pG->vers[a].firstarc) { //\u5df2\u7ecf\u6709\u8fb9\u4e86 for (q = pG->vers[a].firstarc; q->next; q=q->next) ; //\u627e\u5230\u6700\u540e\u4e00\u6761 q->next = p; } else { //\u7b2c\u4e00\u6761\u8fb9 pG->vers[a].firstarc = p; } } return OK; } /*---------------------------------------------------------------- |7.28 \u6709\u5411\u56fe-\u4eceu-v\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84 | ----------------------------------------------------------------*/ int visit[MAX_VERTEX_NUM]; //\u524d\u9762\u5b9a\u4e49\u4e86 VertexType paths[maxSize][MAX_VERTEX_NUM]; //\u5b58\u653e\u8def\u5f84 int path[MAX_VERTEX_NUM]; //\u8def\u5f84 int pathnum=0; //\u5f53\u524d\u662f\u7b2c\u51e0\u6761\u8def\u5f84 void FindAllPath(ALGraph G, int u,int v,int k) { //u->v\u5f53\u524d\u662f\u7b2ck\u4e2a\u4f4d\u7f6e int i; ArcNode *p; visit[u]=1; //\u8d70\u5230\u4e86u path[k]=u; //\u6dfb\u52a0\u5230\u8def\u5f84->\u4e0b\u6807\u4f4d\u7f6e\u4e3ak\u7684\u7ed3\u70b9\u662fu\uff08\u7b2ck+1\u4e2a\u662fu\uff09 if (u==v) { //\u627e\u5230\u4e86 for (i=0; i<=k; i++) {//\u590d\u5236\u5230paths paths[pathnum][i] = G.vers[path[i]].data; } paths[pathnum][i]='\\0'; //\u7ed3\u675f\u7b26 pathnum++; //\u627e\u4e0b\u4e00\u6761\u8def\u5f84 } else { //u\u7684\u90bb\u8fb9\u5f00\u59cb\u627e for (p=G.vers[u].firstarc; p; p=p->next) { if (visit[p->adjV]==0) FindAllPath(G, p->adjV, v, k+1); //\u53bb\u8fd9\u4e2a\u90bb\u63a5\u70b9\u627e } } // \u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u7ed3\u70b9 // \u6ce8\u610f\uff1a\u56de\u6eaf\u5e94\u8be5\u5199\u5728\u5916\u9762-->\u4e5f\u5c31\u662f\u4e0d\u7ba1\u6709\u6ca1\u6709\u627e\u5230\u90fd\u8981\u56de\u6eaf visit[u]=0; path[k]=0; } int main() { /*7.28 6 11 ABCDEF B,A B,D C,B C,F D,C D,E D,F E,A F,A F,B F,E B->A A->B D->A */ int i,j; int cnt; ALGraph G; char tmp[20]; CreateDG_AL(&G); while (1) { scanf(\"%s\", tmp); //A->B i = LocateVex_AL(G, tmp[0]); j = LocateVex_AL(G, tmp[3]); for (cnt=0; cnt<MAX_VERTEX_NUM; cnt++) visit[cnt]=0; pathnum=0; printf(\"7.28 \u8f93\u51fa\u6240\u6709 %c \u5230 %c \u7684\u8def\u5f84\\n\", tmp[0], tmp[3]); FindAllPath(G, i, j, 0); if (pathnum==0) { printf(\"\\t- \u8d70\u4e0d\u901a\\n\"); } for (i=0; i<pathnum; i++) { printf(\"\\t%d %s\\n\", i+1, paths[i]); } } return 0; } \u6811\u6a21\u677f \u00b6 \u6ce8\u91ca\u7248 \u00b6 #include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; // \u4e2d\u5e8f+\u5148\u5e8f=>\u4e8c\u53c9\u6811 int mid_pr_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u5148\u5e8f\u904d\u5386 { // \u8fd9\u91cc\u4e0d\u80fd\u7b49\u4e8e\uff0c\u56e0\u4e3a\u5047\u8bbe\uff1alen==1\uff0c\u5219la==ra\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u6709\u4e00\u4e2a rt \u7684\uff0c\u5374\u6ca1\u88ab\u5efa\u7acb if(la>ra) return 0; int rt=pr[lb]; // \u56e0\u4e3a\u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u4e2d\u5e8f+\u540e\u5e8f=>\u4e8c\u53c9\u6811 int mid_po_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u540e\u5e8f\u904d\u5386 { if(la>ra) return 0; int rt=po[rb]; // \u56e0\u4e3a\u540e\u5e8f\u904d\u5386\u6700\u540e\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u6c42\u6811\u9ad8 int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } // \u5c42\u5e8f\u904d\u5386 void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); // \u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01 } // \u5148\u5e8f\u904d\u5386 void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } // \u4e2d\u5e8f\u904d\u5386 void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } // \u540e\u5e8f\u904d\u5386 void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // \u540e\u5e8f\u7ed3\u70b9 // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); // \u5148\u5e8f\u7ed3\u70b9 for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); // \u4e2d\u5e8f\u7ed3\u70b9 int rt=mid_po_build(0,n-1,0,n-1); // \u4e2d+\u540e\uff0c\u8fd4\u56de\u6839\u8282\u70b9 // int rt=mid_pr_build(0,n-1,0,n-1); // \u4e2d+\u5148\uff0c\u8fd4\u56de\u6839\u8282\u70b9 bfs(rt); // \u5c42\u5e8f\u904d\u5386 // preT(rt); // \u5148\u5e8f\u904d\u5386 // puts(\"\"); // postT(rt); // \u540e\u5e8f\u904d\u5386 // puts(\"\"); // midT(rt); // \u4e2d\u5e8f\u904d\u5386 // puts(\"\"); } return 0; } \u7b80\u5316\u7248\uff08Val As Index\uff0c\u82e5\u6570\u636e\u4e0d\u57281-N\u5185\uff0c\u5219\u53ef\u80fd\u8d8a\u754c\uff09 \u00b6 #include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; int mid_pr_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=pr[lb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); return rt; } int mid_po_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=po[rb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); return rt; } int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); } void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); int rt=mid_po_build(0,n-1,0,n-1); // int rt=mid_pr_build(0,n-1,0,n-1); bfs(rt); // preT(rt); // postT(rt); // midT(rt); } return 0; } \u7b80\u5316\u7248\uff08Val Not As Index\uff0c\u53ef\u4ee5\u5b58\u4efb\u610f\u7684 Val\uff09 \u00b6 #include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a) #define ssclr(ss) ss.clear(), ss.str(\"\") #define INF 0x3f3f3f3f #define MOD 1000000007 using namespace std; typedef long long ll; const int maxn=5e4+1000; int f; int pre[maxn], in[maxn]; struct node { int l,r,d; }T[maxn]; int create(int l1,int r1,int l2,int r2) // in pre { if(l2>r2) return -1; int rt=l2; int p1=l1,p2; while(in[p1]!=pre[rt]) p1++; p2=p1-l1; T[rt].d=pre[rt]; T[rt].l=create(l1,p1-1,l2+1,l2+p2); T[rt].r=create(p1+1,r1,l2+p2+1,r2); return rt; } void postT(int rt) { if(rt==-1 || !f) return; postT(T[rt].l); postT(T[rt].r); if(f) f=0, printf(\"%d\\n\",T[rt].d); } int main() { int n; scanf(\"%d\",&n); for(int i=0;i<n;i++) scanf(\"%d\",&pre[i]); for(int i=0;i<n;i++) scanf(\"%d\",&in[i]); int rt=create(0,n-1,0,n-1); f=1, postT(rt); return 0; }","title":"\u5e38\u7528STL"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#c","text":"","title":"C++\u673a\u8bd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#vs2018","text":"CTRL + J \u5217\u51fa\u6210\u5458 Ctrl+E,D \u683c\u5f0f\u5316\u5168\u90e8\u4ee3\u7801 Ctrl+K,F \u683c\u5f0f\u5316\u9009\u4e2d\u7684\u4ee3\u7801 CTRL + SHIFT + E \u663e\u793a\u8d44\u6e90\u89c6\u56fe F12 \u8f6c\u5230\u5b9a\u4e49 CTRL + F12 \u8f6c\u5230\u58f0\u660e CTRL + ALT + J \u5bf9\u8c61\u6d4f\u89c8 CTRL + ALT + F1 \u5e2e\u52a9\u76ee\u5f55 CTRL + F1 \u52a8\u6001\u5e2e\u52a9 CTRL + K, CTRL + C \u6ce8\u91ca\u9009\u62e9\u7684\u4ee3\u7801 CTRL + K, CTRL + U \u53d6\u6d88\u5bf9\u9009\u62e9\u4ee3\u7801\u7684\u6ce8\u91ca CTRL + U \u8f6c\u5c0f\u5199 CTRL + SHIFT + U \u8f6c\u5927\u5199 F5 \u8fd0\u884c\u8c03\u8bd5 CTRL + F5 \u8fd0\u884c\u4e0d\u8c03\u8bd5 F10 \u8de8\u8fc7\u7a0b\u5e8f\u6267\u884c F11 \u5355\u6b65\u9010\u53e5\u6267\u884c","title":"vs2018 \u5feb\u6377\u952e"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_1","text":"","title":"\u5934\u6587\u4ef6"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#c_1","text":"\u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e assert.h \u65ad\u8a00\u76f8\u5173 ctype.h \u5b57\u7b26\u7c7b\u578b\u5224\u65ad errno.h \u6807\u51c6\u9519\u8bef\u673a\u5236 float.h \u6d6e\u70b9\u9650\u5236 limits.h \u6574\u5f62\u9650\u5236 locale.h \u672c\u5730\u5316\u63a5\u53e3 math.h \u6570\u5b66\u51fd\u6570 setjmp.h \u975e\u672c\u5730\u8df3\u8f6c signal.h \u4fe1\u53f7\u76f8\u5173 stdarg.h \u53ef\u53d8\u53c2\u6570\u5904\u7406 stddef.h \u5b8f\u548c\u7c7b\u578b\u5b9a\u4e49 stdio.h \u6807\u51c6I/O stdlib.h \u6807\u51c6\u5de5\u5177\u5e93 string.h \u5b57\u7b26\u4e32\u548c\u5185\u5b58\u5904\u7406 time.h \u65f6\u95f4\u76f8\u5173","title":"\u6807\u51c6c\u5e93"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#c-stl","text":"using namespace std; \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e algorithm \u901a\u7528\u7b97\u6cd5 deque \u53cc\u7aef\u961f\u5217 vector \u5411\u91cf iterator \u8fed\u4ee3\u5668 stack \u6808 map \u56fe\uff08\u952e\u503c\u5bf9\uff09 list \u5217\u8868 string \u5b57\u7b26\u4e32 set \u96c6\u5408 queue \u961f\u5217 bitset bit\u7c7b numeric \u6570\u503c\u7b97\u6cd5","title":"c++ STL"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_2","text":"#include<cstdio> #include<cstring> #include<algorithm> #include<iostream> #include<string> #include<vector> #include<stack> #include<bitset> #include<cstdlib> #include<cmath> #include<set> #include<list> #include<deque> #include<map> #include<queue> using namespace std;","title":"\u5e38\u7528\u5934"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_3","text":"//\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c #define MAX(x,y) (((x)>(y)) ? (x) : (y)) #define MIN(x,y) (((x) < (y)) ? (x) : (y)) //\u53d6\u4f59 #define mod(x) ((x)%MOD) //for\u5faa\u73af #define FOR(i,f_start,f_end) for(int i=f_start;i<=f_end;++i) //\u8fd4\u56de\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 #define ARR_SIZE(a) (sizeof((a))/sizeof((a[0]))) //\u521d\u59cb\u5316\u6570\u7ec4 #define MT(x,i) memset(x,i,sizeof(x)) #define MEM(a,b) memset((a),(b),sizeof(a)) //\u7b26\u53f7\u91cd\u5b9a\u4e49 #define LL long long #define ull unsigned long long #define pii pair<int,int> //\u5e38\u89c1\u5e38\u6570 #define PI acos(-1.0) #define eps 1e-12 #define INF 0x3f3f3f3f //int\u6700\u5927\u503c const int INF_INT = 2147483647; const ll INF_LL = 9223372036854775807LL; const ull INF_ULL = 18446744073709551615Ull; const ll P = 92540646808111039LL; const ll maxn = 1e5 + 10, MOD = 1e9 + 7; const int Move[4][2] = {-1,0,1,0,0,1,0,-1}; const int Move_[8][2] = {-1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1};","title":"\u5e38\u7528\u5b8f\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_4","text":"","title":"\u7ed3\u6784\u4f53"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_5","text":"struct InitMember { int first\uff1b double second\uff1b char* third\uff1b float four; };","title":"\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_6","text":"","title":"\u521d\u59cb\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_7","text":"struct InitMember test = {-10,3.141590\uff0c\"method one\"\uff0c0.25}\uff1b","title":"\u65b9\u6cd5\u4e00\uff1a\u5b9a\u4e49\u65f6\u8d4b\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_8","text":"struct InitMember test\uff1b test.first = -10; test.second = 3.141590; test.third = \"method two\"; test.four = 0.25;","title":"\u65b9\u6cd5\u4e8c\uff1a\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#c_2","text":"struct InitMember test = { second\uff1a3.141590, third\uff1a\"method three\", first\uff1a-10, four\uff1a0.25 };","title":"\u65b9\u6cd5\u4e09\uff1a\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503c\uff08C++\u98ce\u683c\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_9","text":"//\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { ... ... ... return true; } } Graph; Graph g(8, false);","title":"\u65b9\u6cd5\u56db\uff1a\u6784\u9020\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_10","text":"typedef struct{int id;int h;} node; bool operator <(const node& a,const node & b){return (a.h)<(b.h);}","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#cnew","text":"","title":"c++new\u7684\u4f7f\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_11","text":"int *x = new int; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740(\u5373\u6307\u9488) int *a = new int(100); //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u6574\u6570\u7684\u521d\u503c\u4e3a100\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740 char *b = new char[10]; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5b57\u7b26\u6570\u7ec4(\u5305\u62ec10\u4e2a\u5143\u7d20)\u7684\u7a7a\u95f4\uff0c\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5730\u5740 float *p=new float (3.14159);//\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5355\u7cbe\u5ea6\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u5b9e\u6570\u7684\u521d\u503c\u4e3a//3.14159\uff0c\u5c06\u8fd4\u56de\u7684\u8be5\u7a7a\u95f4\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u9488\u53d8\u91cfp","title":"\u5e38\u89c4"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_12","text":"//\u5217\u503c\u56fa\u5b9a const int MAXCOL = 3; cin>>row; //\u7533\u8bf7\u4e00\u7ef4\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6210\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488 int *pp_arr = new int[nRow * MAXCOL]; int (*p)[MAXCOL] = (int(*)[MAXCOL])pp_arr; //\u6b64\u65f6p[i][j]\u5c31\u53ef\u6b63\u5e38\u4f7f\u7528","title":"\u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_13","text":"cin>>row>>col; int **p = new int*[row]; for (int i = 0; i < row; i ++) { p[i] = new int[col]; }","title":"\u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#stl","text":"\u53c2\u8003\uff1a https://blog.csdn.net/f_zyj/article/details/51594851 https://download.csdn.net/download/f_zyj/9988653","title":"\u5e38\u7528STL"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_14","text":"","title":"\u7b80\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#stl_1","text":"C++ STL \u7684\u5b9e\u73b0\uff1a \u5bb9\u5668 \u5b9e\u73b0 vector \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u6570\u7ec4 \uff0c\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee list \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u652f\u6301\u5feb\u901f\u589e\u5220 deque \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u4e00\u4e2a\u4e2d\u592e\u63a7\u5236\u5668\u548c\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u8be6\u7ec6\u89c1STL\u6e90\u7801\u5256\u6790P146\uff0c\u652f\u6301\u9996\u5c3e\uff08\u4e2d\u95f4\u4e0d\u80fd\uff09\u5feb\u901f\u589e\u5220\uff0c\u4e5f\u652f\u6301\u968f\u673a\u8bbf\u95ee deque \u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217(double-ended queue)\uff0c\u4e5f\u662f\u5728\u5806\u4e2d\u4fdd\u5b58\u5185\u5bb9\u7684.\u5b83\u7684\u4fdd\u5b58\u5f62\u5f0f\u5982\u4e0b:[\u58061] \u2013> [\u58062] \u2013>[\u58063] \u2013> \u2026\u6bcf\u4e2a\u5806\u4fdd\u5b58\u597d\u51e0\u4e2a\u5143\u7d20,\u7136\u540e\u5806\u548c\u5806\u4e4b\u95f4\u6709\u6307\u9488\u6307\u5411,\u770b\u8d77\u6765\u50cf\u662flist\u548cvector\u7684\u7ed3\u5408\u54c1 stack \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6 queue \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6\uff08stack\u548cqueue\u5176\u5b9e\u662f\u9002\u914d\u5668,\u800c\u4e0d\u53eb\u5bb9\u5668\uff0c\u56e0\u4e3a\u662f\u5bf9\u5bb9\u5668\u7684\u518d\u5c01\u88c5\uff09 priority_queue \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e3avector\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u5806heap\u4e3a\u5904\u7406\u89c4\u5219\u6765\u7ba1\u7406\u5e95\u5c42\u5bb9\u5668\u5b9e\u73b0 set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d hash_set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d hash_map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d","title":"STL\u5e95\u5c42\u8bf4\u660e"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#ccf-cstl","text":"\u5c31\u662f\u8981\u5728\u540e\u9762\u7684\u201c>\u201d\u4e4b\u95f4\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5982\u679c\u6709\u591a\u5c42\uff0c\u90a3\u6bcf\u5c42\u90fd\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 map<string,list<string> > user;","title":"CCF \u7f16\u8bd1\u51fa\u9519\u539f\u56e0\uff1a \u4e0d\u5141\u8bb8C++STL\u5bb9\u5668\u5d4c\u5957\uff08\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#algorithm","text":"\u5934\u6587\u4ef6\uff1aalgorithm \u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4ee5\u53ca\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u8bf7\u81ea\u884c\u53bb\u5934\u6587\u4ef6\u627e\u5b9a\u4e49\uff01\uff01\uff01","title":"algorithm"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_15","text":"\u51fd\u6570 \u8bf4\u660e adjacent_find \u67e5\u627e\u4e24\u4e2a\u76f8\u90bb\uff08Adjacent\uff09\u7684\u7b49\u4ef7\uff08Identical\uff09\u5143\u7d20 all_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 any_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6 count \u8fd4\u56de\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u4e2a\u6570 count_if \u8fd4\u56de\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570 equal \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u662f\u5426\u76f8\u7b49 find \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 find_end \u67e5\u627e\u8303\u56f4*A*\u4e2d\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e find_first_of \u67e5\u627e\u8303\u56f4*A*\u4e2d\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u4e2d\u4efb\u4e00\u5143\u7d20\u7b49\u4ef7\u7684\u5143\u7d20\u7684\u4f4d\u7f6e find_if \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 find_if_notC++11 \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 for_each \u5bf9\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u6307\u5b9a\u51fd\u6570 mismatch \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u7b49\u4ef7\u7684\u4f4d\u7f6e none_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 search \u5728\u8303\u56f4*A*\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e search_n \u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8fde\u7eed*n*\u4e2a\u5143\u7d20\u90fd\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e","title":"\u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_16","text":"\u51fd\u6570 \u8bf4\u660e copy \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_backward \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_ifC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_nC++11 \u62f7\u8d1d n \u4e2a\u5143\u7d20\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 fill \u5c06\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c fill_n \u5c06\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c generate \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u8303\u56f4\u7684\u5143\u7d20\u4e2d\uff0c\u7528\u4e8e\u6279\u91cf\u8d4b\u503c\u8303\u56f4\u4e2d\u7684\u5143\u7d20 generate_n \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u4e2d iter_swap \u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668\uff08Iterator\uff09\u6307\u5411\u7684\u5143\u7d20 moveC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 move_backwardC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 random_shuffle \u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e remove \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 remove_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 replace \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c reverse \u53cd\u8f6c\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 reverse_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u53cd\u8f6c\u6392\u5e8f\u7ed3\u679c rotate \u5faa\u73af\u79fb\u52a8\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 rotate_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5faa\u73af\u79fb\u52a8\u7ed3\u679c shuffleC++11 \u7528\u6307\u5b9a\u7684\u968f\u673a\u6570\u5f15\u64ce\u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e swap \u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c swap_ranges \u4ea4\u6362\u4e24\u4e2a\u8303\u56f4\u7684\u5143\u7d20 transform \u5bf9\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u4ee5\u6539\u53d8\u5143\u7d20\u7684\u503c unique \u5220\u9664\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6240\u6709\u8fde\u7eed\u91cd\u590d\u5143\u7d20\uff0c\u4ec5\u4ec5\u7559\u4e0b\u6bcf\u7ec4\u7b49\u503c\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 unique_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u552f\u4e00\u5316\uff08\u53c2\u8003\u4e0a\u8ff0\u7684 unique\uff09\u7ed3\u679c","title":"\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_17","text":"|\u51fd\u6570|\u8bf4\u660e| | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | |is_partitionedC++11| \u68c0\u6d4b\u67d0\u4e2a\u8303\u56f4\u662f\u5426\u6309\u6307\u5b9a\u8c13\u8bcd\uff08Predicate\uff09\u5212\u5206\u8fc7| |partition | \u5c06\u67d0\u4e2a\u8303\u56f4\u5212\u5206\u4e3a\u4e24\u7ec4| |partition_copyC++11 | \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5212\u5206\u7ed3\u679c| |partition_pointC++11 | \u8fd4\u56de\u88ab\u5212\u5206\u8303\u56f4\u7684\u5212\u5206\u70b9| |stable_partition | \u7a33\u5b9a\u5212\u5206\uff0c\u4e24\u7ec4\u5143\u7d20\u5404\u7ef4\u6301\u76f8\u5bf9\u987a\u5e8f|","title":"\u5212\u5206\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_18","text":"\u51fd\u6570 \u8bf4\u660e is_sortedC++11 \u68c0\u6d4b\u6307\u5b9a\u8303\u56f4\u662f\u5426\u5df2\u6392\u5e8f is_sorted_untilC++11 \u8fd4\u56de\u6700\u5927\u5df2\u6392\u5e8f\u5b50\u8303\u56f4 nth_element \u90e8\u4efd\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8303\u56f4\u6309\u7ed9\u5b9a\u4f4d\u7f6e\u5904\u7684\u5143\u7d20\u5212\u5206 partial_sort \u90e8\u4efd\u6392\u5e8f partial_sort_copy \u62f7\u8d1d\u90e8\u5206\u6392\u5e8f\u7684\u7ed3\u679c sort \u6392\u5e8f stable_sort \u7a33\u5b9a\u6392\u5e8f","title":"\u6392\u5e8f\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_19","text":"\u51fd\u6570 \u8bf4\u660e binary_search \u5224\u65ad\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 equal_range \u8fd4\u56de\u8303\u56f4\u4e2d\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u8303\u56f4 lower_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 upper_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668","title":"\u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_20","text":"\u51fd\u6570 \u8bf4\u660e includes \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 inplace_merge \u5c31\u7eea\u5408\u5e76 merge \u5408\u5e76 set_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6 set_intersection \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 set_symmetric_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5bf9\u79f0\u5dee set_union \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6","title":"\u96c6\u5408\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_21","text":"\u51fd\u6570 \u8bf4\u660e is_heap \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u662f\u5426\u6ee1\u8db3\u5806\u7ed3\u6784 is_heap_untilC++11 \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u4e2d\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u6700\u5927\u5b50\u8303\u56f4 make_heap \u7528\u7ed9\u5b9a\u8303\u56f4\u6784\u9020\u51fa\u4e00\u4e2a\u5806 pop_heap \u4ece\u4e00\u4e2a\u5806\u4e2d\u5220\u9664\u6700\u5927\u7684\u5143\u7d20 push_heap \u5411\u5806\u4e2d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 sort_heap \u5c06\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u8303\u56f4\u6392\u5e8f","title":"\u5806\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_22","text":"\u51fd\u6570 \u8bf4\u660e is_permutationC++11 \u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684\u4e00\u79cd\u6392\u5e8f lexicographical_compare \u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u7684\u5b57\u5178\u5e8f max \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 max_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 min \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 min_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 minmaxC++11 \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 minmax_elementC++11 \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 next_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0b\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217 prev_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0a\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217","title":"\u6700\u5927/\u6700\u5c0f\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#vector","text":"\u5934\u6587\u4ef6\uff1avector \u5728STL\u7684vector\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86vector\uff08\u5411\u91cf\u5bb9\u5668\u6a21\u7248\u7c7b\uff09\uff0cvector\u5bb9\u5668\u4ee5\u8fde\u7eed\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u5c06vector\u770b\u4f5c\u662f\u4ee5\u987a\u5e8f\u7ed3\u6784\u5b9e\u73b0\u7684\u7ebf\u6027\u8868\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u9700\u8981\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u65f6\uff0cvector\u5c06\u4f1a\u662f\u7406\u60f3\u7684\u9009\u62e9\uff0cvector\u53ef\u4ee5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u589e\u957f\u5b58\u50a8\u7a7a\u95f4\u3002 vector\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5206\u914d\u5668\u7684\u7c7b\u578b\uff0c\u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u914d\u5668 \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49vector\u5411\u91cf\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a vector<int> s; // \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684vector\u5bf9\u8c61\uff0c\u5b58\u50a8\u7684\u662fint\u7c7b\u578b\u7684\u5143\u7d20 vector<int> s(n); // \u5b9a\u4e49\u4e00\u4e2a\u542b\u6709n\u4e2aint\u5143\u7d20\u7684vector\u5bf9\u8c61 vector<int> s(first, last); // \u5b9a\u4e49\u4e00\u4e2avector\u5bf9\u8c61\uff0c\u5e76\u4ece\u7531\u8fed\u4ee3\u5668first\u548clast\u5b9a\u4e49\u7684\u5e8f\u5217[first, last)\u4e2d\u590d\u5236\u521d\u503c vector\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s[i] // \u76f4\u63a5\u4ee5\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20 s.front() // \u8fd4\u56de\u9996\u5143\u7d20 s.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 s.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x s.size() // \u8fd4\u56de\u8868\u957f s.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 s.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 s.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val s.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val s.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 s.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 s.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) s.reserve(n) // \u9884\u5206\u914d\u7f13\u51b2\u7a7a\u95f4\uff0c\u4f7f\u5b58\u50a8\u7a7a\u95f4\u81f3\u5c11\u53ef\u5bb9\u7eb3n\u4e2a\u5143\u7d20 s.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 s.swap(v) // \u5c06s\u4e0e\u53e6\u4e00\u4e2avector\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 s.assign(first, last) // \u5c06\u5e8f\u5217\u66ff\u6362\u6210\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\uff0c[first, last)\u4e0d\u80fd\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u90e8\u5206 // \u8981\u6ce8\u610f\u7684\u662f\uff0cresize\u64cd\u4f5c\u548cclear\u64cd\u4f5c\u90fd\u662f\u5bf9\u8868\u7684\u6709\u6548\u5143\u7d20\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8\u7f13\u51b2\u7a7a\u95f4\u7684\u5927\u5c0f // \u53e6\u5916\uff0cvector\u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5982\u53cd\u8f6c\u3001\u53d6\u53cd\u7b49\uff0c\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e // vector\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u5e8f\u5217\u4e4b\u95f4\u7684\u6bd4\u8f83\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff08>\u3001<\u3001>=\u3001<=\u3001==\u3001!=\uff09\uff0c\u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u3002 // \u8fd8\u662f\u6765\u770b\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u5427\u2026\u2026 /* * \u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u4e00\u7ec4\u6574\u6570\uff0c\u518d\u5c06\u8fd9\u7ec4\u6574\u6570\u6309\u5012\u5e8f\u8f93\u51fa */ #include <iostream> #include <vector> using namespace std; int main() { vector<int> L; int x; while(cin >> x) { L.push_back(x); } for (int i = L.size() - 1; i >= 0; i--) { cout << L[i] << \" \"; } cout << endl; return 0; }","title":"vector"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#list","text":"\u5934\u6587\u4ef6\uff1alist \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49list\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a list<int>a{1,2,3} list<int>a(n) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f0 list<int>a(n, m) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fm list<int>a(first, last) //\u58f0\u660e\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u5143\u7d20\u7684\u521d\u59cb\u503c\u6765\u6e90\u4e8e\u7531\u533a\u95f4\u6240\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff0cfirst\u548clast\u662f\u8fed\u4ee3\u5668 list\u7684\u57fa\u672c\u64cd\u4f5c\uff1a a.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.push_front(x) // \u5411\u8868\u5934\u63d2\u5165\u5143\u7d20x a.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x a.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 a.pop_front() // \u5220\u9664\u8868\u5934\u5143\u7d20 a.size() // \u8fd4\u56de\u8868\u957f a.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 a.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 a.front() // \u8fd4\u56de\u9996\u5143\u7d20 a.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 a.swap(v) // \u5c06a\u4e0e\u53e6\u4e00\u4e2alist\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 a.merge(b) // \u8c03\u7528\u7ed3\u675f\u540eb\u53d8\u4e3a\u7a7a\uff0ca\u4e2d\u5143\u7d20\u5305\u542b\u539f\u6765a\u548cb\u7684\u5143\u7d20 a.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val a.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val a.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 a.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 a.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) a.remove(x) // \u5220\u9664\u4e86a\u4e2d\u6240\u6709\u503c\u4e3ax\u7684\u5143\u7d20 a.assign(n, val) // \u5c06a\u4e2d\u7684\u6240\u6709\u5143\u7d20\u66ff\u6362\u6210n\u4e2aval\u5143\u7d20 a.assign(b.begin(), b.end()) //\u5c06a\u53d8\u6210b","title":"list"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#string","text":"\u5934\u6587\u4ef6\uff1astring string\u662fSTL\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5b57\u7b26\u4e32\u3002\u800c\u5728\u4f7f\u7528string\u4e4b\u524d\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u7528 char* \u8868\u793a\u7684\u3002 string\u548c char* \u7684\u533a\u522b string\u662f\u4e00\u4e2a\u7c7b, char* \u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u3002 string\u5c01\u88c5\u4e86 char* \uff0c\u7ba1\u7406\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a char* \u578b\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4string\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u91cc\u9762\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f char* \u3002 string\u4e0d\u7528\u8003\u8651\u5185\u5b58\u91ca\u653e\u548c\u8d8a\u754c\u3002 string\u7ba1\u7406 char* \u6240\u5206\u914d\u7684\u5185\u5b58\u3002\u6bcf\u4e00\u6b21string\u7684\u590d\u5236\uff0c\u53d6\u503c\u90fd\u7531string\u7c7b\u8d1f\u8d23\u7ef4\u62a4\uff0c\u4e0d\u7528\u62c5\u5fc3\u590d\u5236\u8d8a\u754c\u548c\u53d6\u503c\u8d8a\u754c\u7b49\u3002 string\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570 \u67e5\u627efind\uff0c\u62f7\u8d1dcopy\uff0c\u5220\u9664erase\uff0c\u66ff\u6362replace\uff0c\u63d2\u5165insert. \u6784\u9020\u548c\u6790\u6784\u51fd\u6570: \u8868\u8fbe\u5f0f \u6548\u679c string s \u751f\u6210\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 string s(str) copy\u6784\u9020\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2astr\u7684\u590d\u5236\u54c1 string s(str,idx) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(str,idx,len) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u4e14\u957f\u5ea6\u6700\u591a\u4e3alen\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr\uff0clen) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u7684\u524dlen\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(num\uff0cc) \u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542bnum\u4e2a\u5b57\u7b26c string s(beg\uff0cend) \u4ee5\u533a\u95f4[beg,end]\u5185\u6240\u6709\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c \u64cd\u4f5c\u51fd\u6570: \u64cd\u4f5c\u51fd\u6570 \u6548\u679c =\uff0cassign() \u8d4b\u4ee5\u65b0\u503c swap() \u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9 +=, append(),push_back() \u6dfb\u52a0\u5b57\u7b26 insert() \u63d2\u5165\u5b57\u7b26 erase() \u5220\u9664\u5b57\u7b26 clear() \u79fb\u9664\u5168\u90e8\u5b57\u7b26 resize() \u6539\u53d8\u5b57\u7b26\u6570\u91cf replace() \u66ff\u6362\u5b57\u7b26 + \u4e32\u8054\u5b57\u7b26\u4e32 ==\uff0c!=\uff0c<\uff0c<=\uff0c>\uff0c>=\uff0ccompare() \u6bd4\u8f83\u5b57\u7b26\u4e32\u5185\u5bb9 size(),length() \u8fd4\u56de\u5b57\u7b26\u6570\u91cf,\u7b49\u6548\u51fd\u6570 max_size() \u8fd4\u56de\u5b57\u7b26\u7684\u6700\u5927\u53ef\u80fd\u4e2a\u6570 empty() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a capacity() \u8fd4\u56de\u91cd\u65b0\u5206\u914d\u4e4b\u524d\u7684\u5b57\u7b26\u5bb9\u91cf reserve() \u4fdd\u7559\u4e00\u5b9a\u91cf\u5185\u5b58\u4ee5\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26 [ ]\uff0cat() \u5b58\u53d6\u5355\u4e00\u5b57\u7b26 \u00bb\uff0cgetline() \u4ecestream\u4e2d\u8bfb\u53d6\u67d0\u503c \u00ab \u5c06\u67d0\u503c\u5199\u5165stream copy() \u5c06\u5185\u5bb9\u590d\u5236\u4e3a\u4e00\u4e2aC-string c_str() \u5c06\u5185\u5bb9\u4ee5C-string\u5f62\u5f0f\u8fd4\u56de data() \u5c06\u5185\u5bb9\u4ee5\u5b57\u7b26\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de substr() \u8fd4\u56de\u67d0\u4e2a\u5b50\u5b57\u7b26\u4e32 begin()\uff0cend() \u63d0\u4f9b\u6b63\u5e38\u7684\u8fed\u4ee3\u5668\u652f\u6301 rbegin()\uff0crend() \u63d0\u4f9b\u9006\u5411\u8fed\u4ee3\u5668\u652f\u6301","title":"string"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#pair","text":"\u5934\u6587\u4ef6\uff1autility STL\u7684utility\u5934\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u5355\u7684\u6a21\u7248\u7c7bpair\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u6216\u5143\u7d20\u5bf9\uff0c\u5e76\u63d0\u4f9b\u4e86\u6309\u7167\u5b57\u5178\u5e8f\u5bf9\u5143\u7d20\u5bf9\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6a21\u7248\u51fd\u6570\u3002 Example\uff0c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5750\u6807\u70b9\uff0c\u5219\u53ef\u4ee5\uff1a pair<double, double> p; cin >> p.first >> p.second; pair\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u9996\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u548c\u5c3e\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002pair\u6a21\u7248\u7c7b\u5bf9\u8c61\u6709\u4e24\u4e2a\u6210\u5458\uff1afirst\u548csecond\uff0c\u5206\u522b\u8868\u793a\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002 \u5728\u5176\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86pair\u4e0a\u7684\u516d\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a<\u3001>\u3001<=\u3001>=\u3001==\u3001!=\uff0c\u5176\u89c4\u5219\u662f\u5148\u6bd4\u8f83first\uff0cfirst\u76f8\u7b49\u65f6\u518d\u6bd4\u8f83second\uff0c\u8fd9\u7b26\u5408\u5927\u591a\u6570\u5e94\u7528\u7684\u903b\u8f91\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u91cd\u8f7d\u8fd9\u51e0\u4e2a\u8fd0\u7b97\u7b26\u6765\u91cd\u65b0\u6307\u5b9a\u81ea\u5df1\u7684\u6bd4\u8f83\u903b\u8f91\u3002 \u9664\u4e86\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2apair\u5bf9\u8c61\u5916\uff0c\u5982\u679c\u9700\u8981\u5373\u65f6\u751f\u6210\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u7248\u51fd\u6570\uff1amake_pair\u3002make_pair\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u5143\u7d20\u5bf9\u7684\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002","title":"pair"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#map","text":"\u5934\u6587\u4ef6\uff1amap \u5728STL\u7684\u5934\u6587\u4ef6\u4e2dmap\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7bmap\u548cmultimap\uff0c\u7528\u6709\u5e8f\u4e8c\u53c9\u6811\u8868\u5b58\u50a8\u7c7b\u578b\u4e3a pair<const Key, T> \u7684\u5143\u7d20\u5bf9\u5e8f\u5217\u3002\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u4ee5const Key\u90e8\u5206\u4f5c\u4e3a\u6807\u8bc6\uff0cmap\u4e2d\u6240\u6709\u5143\u7d20\u7684Key\u503c\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0cmultimap\u5219\u5141\u8bb8\u6709\u91cd\u590d\u7684Key\u503c\u3002 \u53ef\u4ee5\u5c06map\u770b\u4f5c\u662f\u7531Key\u6807\u8bc6\u5143\u7d20\u7684\u5143\u7d20\u96c6\u5408\uff0c\u8fd9\u7c7b\u5bb9\u5668\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u8054\u5bb9\u5668\u201d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aKey\u503c\u6765\u5feb\u901f\u51b3\u5b9a\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u4e8e\u9700\u8981\u6309\u7167Key\u503c\u67e5\u627e\u5143\u7d20\u7684\u5bb9\u5668\u3002 map\u6a21\u7248\u7c7b\u9700\u8981\u56db\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u7b2c\u4e09\u4e2a\u662f\u6bd4\u8f83\u7b97\u5b50\uff0c\u7b2c\u56db\u4e2a\u662f\u5206\u914d\u5668\u7c7b\u578b\u3002\u5176\u4e2d\u952e\u503c\u7c7b\u578b\u548c\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\u3002 \u5b9a\u4e49map\u5bf9\u8c61\u7684\u4ee3\u7801\u793a\u4f8b\uff1a map<string, int> m; map\u7684\u57fa\u672c\u64cd\u4f5c\uff1a /* \u5411map\u4e2d\u63d2\u5165\u5143\u7d20 */ m[key] = value; // [key]\u64cd\u4f5c\u662fmap\u5f88\u6709\u7279\u8272\u7684\u64cd\u4f5c,\u5982\u679c\u5728map\u4e2d\u5b58\u5728\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9, \u5219\u8fd4\u56de\u8be5\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206,\u5426\u5219\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9,\u503c\u57df\u4e3a\u9ed8\u8ba4\u503c\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u8be5\u64cd\u4f5c\u5411map\u4e2d\u63d2\u5165\u5143\u7d20\u5bf9\u6216\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206\u3002 m.insert(make_pair(key, value)); // \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528insert\u65b9\u6cd5\u63d2\u5165\u5143\u7d20\u5bf9,insert\u64cd\u4f5c\u4f1a\u8fd4\u56de\u4e00\u4e2apair,\u5f53map\u4e2d\u6ca1\u6709\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u63d2\u5165\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5176second\u4e3atrue;\u82e5map\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e0ekey\u76f8\u7b49\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,second\u4e3afalse\u3002 /* \u67e5\u627e\u5143\u7d20 */ int i = m[key]; // \u8981\u6ce8\u610f\u7684\u662f,\u5f53\u4e0e\u8be5\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9\u4e0d\u5b58\u5728\u65f6,\u4f1a\u521b\u5efa\u952e\u503c\u4e3akey\uff08\u5f53\u53e6\u4e00\u4e2a\u5143\u7d20\u662f\u6574\u5f62\u65f6\uff0cm[key]=0\uff09\u7684\u5143\u7d20\u5bf9\u3002 map<string, int>::iterator it = m.find(key); // \u5982\u679cmap\u4e2d\u5b58\u5728\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,find\u64cd\u4f5c\u5c06\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5426\u5219,\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8emap\u7684end()(\u53c2\u89c1vector\u4e2d\u63d0\u5230\u7684begin()\u548cend()\u64cd\u4f5c)\u3002 /* \u5220\u9664\u5143\u7d20 */ m.erase(key); // \u5220\u9664\u4e0e\u6307\u5b9akey\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 m.erase(it); // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5b9a\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668\u3002 /* \u5176\u4ed6\u64cd\u4f5c */ m.size(); // \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 m.empty(); // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a m.clear(); // \u6e05\u7a7a\u6240\u6709\u5143\u7d20","title":"map"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#stack","text":"\u5934\u6587\u4ef6\uff1astack stack\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728stack\u5934\u6587\u4ef6\u4e2d\u3002 stack\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u4f46\u662f\u53ea\u6709\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\uff0c\u5728\u4e0d\u6307\u5b9a\u5bb9\u5668\u7c7b\u578b\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u7684\u7c7b\u578b\u4e3adeque\u3002 \u5b9a\u4e49stack\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: stack<int> s; stack<string> ss; stack\u7684\u57fa\u672c\u64cd\u4f5c\u6709\uff1a s.push(x); // \u5165\u6808 s.pop(); // \u51fa\u6808 s.top(); // \u8bbf\u95ee\u6808\u9876 s.empty(); // \u5f53\u6808\u7a7a\u65f6\uff0c\u8fd4\u56detrue s.size(); // \u8bbf\u95ee\u6808\u4e2d\u5143\u7d20\u4e2a\u6570","title":"stack"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#queue","text":"\u5934\u6587\u4ef6\uff1aqueue queue\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728queue\u5934\u6587\u4ef6\u4e2d\u3002 queue\u4e0estack\u76f8\u4f3c\uff0cqueue\u6a21\u7248\u7c7b\u4e5f\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7d20\u7c7b\u578b\u65f6\u5fc5\u987b\u7684\uff0c\u5bb9\u5668\u7c7b\u578b\u65f6\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3adeque\u7c7b\u578b\u3002 \u5b9a\u4e49queue\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5fc5\u987b\u5982\u4e0b\uff1a queue<int> q; queue<double> qq; queue\u7684\u57fa\u672c\u64cd\u4f5c\uff1a q.push(x); // \u5165\u961f\u5217 q.pop(); // \u51fa\u961f\u5217 q.front(); // \u8bbf\u95ee\u961f\u9996\u5143\u7d20 q.back(); // \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 q.empty(); // \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a q.size(); // \u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570","title":"queue"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#set","text":"\u5934\u6587\u4ef6\uff1aset set\u662f\u4e0e\u96c6\u5408\u76f8\u5173\u7684\u5bb9\u5668\uff0cSTL\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86set\u7684\u5b9e\u73b0\uff0c\u5728\u7f16\u7a0b\u9898\u4e2d\u9047\u89c1\u96c6\u5408\u95ee\u9898\u76f4\u63a5\u8c03\u7528\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002 \u5b9a\u4e49set\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a set<int> s; set<double> ss; set\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s.begin() // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() // \u6e05\u9664\u6240\u6709\u5143\u7d20 s.count() // \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570 s.empty() // \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue(\u771f\uff09 s.end() // \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20 s.equal_range() // \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0e\u7ed9\u5b9a\u503c\u76f8\u7b49\u7684\u4e0a\u4e0b\u9650\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668 s.erase() // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 s.find() // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.get_allocator() // \u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668 s.insert() // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 s.lower_bound() // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.key_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570 s.max_size() // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap() // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound() // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.value_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570","title":"set"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#multiset","text":"\u5934\u6587\u4ef6\uff1aset \u5728set\u5934\u6587\u4ef6\u4e2d\uff0c\u8fd8\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u6a21\u7248\u7c7bmultiset\uff08\u591a\u91cd\u96c6\u5408\uff09\u3002\u591a\u91cd\u96c6\u5408\u4e0e\u96c6\u5408\u7684\u533a\u522b\u5728\u4e8e\u96c6\u5408\u4e2d\u4e0d\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u800c\u591a\u91cd\u96c6\u5408\u4e2d\u53ef\u4ee5\u5b58\u5728\u3002 \u5b9a\u4e49multiset\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a multiset<int> s; multiset<double> ss; multiset\u548cset\u7684\u57fa\u672c\u64cd\u4f5c\u76f8\u4f3c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u96c6\u5408\u7684count()\u80fd\u8fd4\u56de0\uff08\u65e0\uff09\u6216\u80051\uff08\u6709\uff09\uff0c\u800c\u591a\u91cd\u96c6\u5408\u662f\u6709\u591a\u5c11\u4e2a\u8fd4\u56de\u591a\u5c11\u4e2a\u3002","title":"multiset"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#bitset","text":"\u5934\u6587\u4ef6\uff1abitset \u5728 STLSTL \u7684\u5934\u6587\u4ef6\u4e2d bitset\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7b bitsetbitset\uff0c\u7528\u6765\u65b9\u4fbf\u5730\u7ba1\u7406\u4e00\u7cfb\u5217\u7684 bitbit \u4f4d\u7684\u7c7b\u3002bitsetbitset \u9664\u4e86\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u4e0b\u6807\u7684 bitbit \u4f4d\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u628a\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570\u6765\u8fdb\u884c\u67d0\u4e9b\u7edf\u8ba1\u3002 bitsetbitset \u6a21\u677f\u7c7b\u9700\u8981\u4e00\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7528\u6765\u660e\u786e\u6307\u5b9a\u542b\u6709\u591a\u5c11\u4f4d\u3002 \u5b9a\u4e49 bitsetbitset \u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\uff1a const int MAXN = 32; bitset<MAXN> bt; // bt \u5305\u62ec MAXN \u4f4d\uff0c\u4e0b\u6807 0 ~ MAXN - 1\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a 0 bitset<MAXN> bt1(0xf); // 0xf \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570 f\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1111\uff0c\u5c06 bt1 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1 bitset<MAXN> bt2(012); // 012 \u8868\u793a\u516b\u8fdb\u5236\u6570 12\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1010\uff0c\u5373\u5c06 bt2 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt3(\"1010\"); // \u5c06 bt3 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt4(s, pos, n);// \u5c06 01 \u5b57\u7b26\u4e32 s \u7684 pos \u4f4d\u5f00\u59cb\u7684 n \u4f4d\u521d\u59cb\u5316 bt4 bitsetbitset \u57fa\u672c\u64cd\u4f5c\uff1a bt.any() // bt \u4e2d\u662f\u5426\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\uff1f bt.none() // bt \u4e2d\u4e0d\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u5417\uff1f bt.count() // bt \u4e2d\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt.size() // bt \u4e2d\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt[pos] // \u8bbf\u95ee bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d bt.test(pos) // bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u662f\u5426\u4e3a 1 bt.set() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 1 bt.set(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a 1 bt.reset() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 0 bt.reset(pos) // \u628a bt \u4e2d\u5728pos\u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a0 bt.flip() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u9010\u4f4d\u53d6\u53cd bt.flip(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd bt[pos].flip() // \u540c\u4e0a bt.to_ulong() // \u7528 bt \u4e2d\u540c\u6837\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fd4\u56de\u4e00\u4e2a unsigned long \u503c os << bt // \u628a bt \u4e2d\u7684\u4f4d\u96c6\u8f93\u51fa\u5230 os \u6d41","title":"bitset"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_23","text":"","title":"\u56fe\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_24","text":"#include <iostream> #include <vector> #include <set> using namespace std; #define MAX(a, b) ((a) > (b) ? (a) : (b) ) //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1) {} Vertex(int nid) : id(nid) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); } return true; } //\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> BFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); visited.insert(start); while(g.size() > 0) { int id = g[0]; g.erase(g.begin()); rst.push_back(id); for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); visited.insert(id1); } } } return rst; } //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> DFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); //cout << \"push \" << start << \" \"; visited.insert(start); rst.push_back(start); bool found; while(g.size() > 0) { int id = g[g.size()-1]; found = false; for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); rst.push_back(id1); visited.insert(id1); //cout << \"push \" << id1 << \" \"; found = true; break; } } if (!found) { int id2 = g[g.size()-1]; rst.push_back(-1 * id2); //cout << \"pop \" << id2 << \" \"; g.pop_back(); } } //cout << endl; return rst; } } Graph; int main() { Graph g(8, false); g.addEdge(0, 1); g.addEdge(0, 3); g.addEdge(1, 2); g.addEdge(3, 4); g.addEdge(3, 5); g.addEdge(4, 5); g.addEdge(4, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(6, 7); vector<int> bv = g.BFS(0); cout << \"\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; for(int j = 0; j < bv.size(); j++) cout << bv[j] << \" \"; cout << endl; cout << \"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; Graph g1(6, false); g1.addEdge(0, 1); g1.addEdge(0, 4); g1.addEdge(0, 5); g1.addEdge(1, 5); g1.addEdge(4, 5); g1.addEdge(5, 2); g1.addEdge(5, 3); g1.addEdge(2, 3); vector<int> route = g1.DFS(0); for(int i = 0; i < route.size(); i++) cout << route[i] << \" \"; cout << endl; char ch; cin >> ch; return 0; }","title":"\u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#2019","text":"#include <algorithm> #include <iostream> #include <vector> #include <queue> #define MAX(a, b) ((a) > (b) ? (a) : (b) ) using namespace std; int n,m; vector<int> inDegreelist,outDegreelist; //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); vertexs[id1].outDegree++; vertexs[id2].inDegree++; } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); vertexs[id1].outDegree++; vertexs[id1].inDegree++; vertexs[id2].outDegree++; vertexs[id2].inDegree++; } return true; } } Graph; Graph g; void init(){ cin>>n>>m; g=Graph(n, true); int src,dst; while(m--){ cin>>src>>dst; g.addEdge(src,dst); } vector<Vertex>::iterator it = g.vertexs.begin(); while(it!=g.vertexs.end()){ inDegreelist.push_back(it->inDegree); outDegreelist.push_back(it->outDegree); it++; } } int countin(int n){ return count(inDegreelist.begin(),inDegreelist.end(),n); } int countout(int n){ return count(outDegreelist.begin(),outDegreelist.end(),n); } bool Is_List(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u548c\u4e00\u4e2aoutDegree\u4e3a0\u7684\u5c3e\uff0c\u4e14\u5176\u4f59\u8282\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e3a1; return (countin(0)==1)&&(countout(0)==1)&&(countin(1)==n-1)&&(countout(1)==n-1); } bool Is_Tree(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u4e14\u5176\u4f59\u8282\u70b9inDegree\u5747\u4e3a1\uff0c\u4e14\u4e0d\u662f\u94fe\u8868; return (countin(0)==1)&&(countin(1)==n-1); } bool topologicalSort(){//\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6709\u73af\u65e0\u73af int num=0;//\u8bb0\u5f55\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570 queue<int> q; for(int i=0;i<n;i++){ if(inDegreelist[i]==0){ q.push(i);//\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u961f } } while(!q.empty()){ int u=q.front();//\u53d6\u961f\u9996\u9876\u70b9u q.pop(); for(int i=0;i<g.vertexs[u].connectors.size();i++){ int v=g.vertexs[u].connectors[i];//u\u7684\u540e\u7ee7\u8282\u70b9v inDegreelist[v]--;//v\u7684\u5165\u5ea6\u51cf1 if(inDegreelist[v]==0){//\u9876\u70b9v\u7684\u5165\u5ea6\u51cf\u4e3a0\u5219\u5165\u961f q.push(v); } } g.vertexs[u].connectors.clear();//\u6e05\u7a7au\u7684\u6240\u6709\u51fa\u8fb9 num++;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570\u52a01 } if(num==n) return true;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u4e3an\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u6210\u529f\uff0c\u56fe\u65e0\u73af else return false;//\u5426\u5219\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u56fe\u6709\u73af } int main(){ init(); if(n==0||m==0){ cout<<\"error\"<<endl; } if(Is_List()){ cout<<\"list\"<<endl; } else if(Is_Tree()){ cout<<\"tree\"<<endl; } else if(topologicalSort()){ cout<<\"no ring\"<<endl; } else{ cout<<\"have ring\"<<endl; } return 0; }","title":"\u5e26\u51fa\u5165\u5ea6\u7684 (2019\u63a8\u514d\u8bd5\u9898)"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#uv-","text":"#include<stdio.h> #include<stdlib.h> #ifndef BASE #define BASE #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2 typedef int Status; typedef int bool; #endif #define VertexType char //\u70b9\u7c7b\u578b #define VRType int //\u8fb9\u7c7b\u578b #define maxSize 100 void Visit(VertexType e) { printf(\"%c\", e); } #define MAX_VERTEX_NUM 20 typedef enum{DG, UDG} GraphKind; typedef struct ArcNode{ int adjV; //\u8fb9\u6307\u5411\u7684\u9876\u70b9 VRType weight; //\u6743\u91cd struct ArcNode *next; }ArcNode; //\u8fb9 typedef struct VNode{ VertexType data; ArcNode *firstarc; }VNode, AdjList[MAX_VERTEX_NUM]; //\u9876\u70b9 typedef struct{ GraphKind kind; int vernum,arcnum; AdjList vers; }ALGraph; /*------------------------ |7.14 \u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868| ------------------------*/ Status InitGraph_AL(ALGraph *pG) { //\u521d\u59cb\u5316 int i; pG->arcnum = 0; pG->vernum = 0; for (i=0; i<MAX_VERTEX_NUM; ++i) pG->vers[i].firstarc = NULL; //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc return OK; } int LocateVex_AL(ALGraph G, VertexType e) { //\u5b9a\u4f4d\u503c\u4e3ae\u7684\u5143\u7d20\u4e0b\u6807 int i; for (i=0; i<G.vernum; ++i) { if (G.vers[i].data == e) { return i; } } return -1; } Status CreateDG_AL(ALGraph *pG) { //\u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868 //\u8f93\u5165\u89c4\u5219\uff1a\u9876\u70b9\u6570\u76ee->\u5f27\u7684\u6570\u76ee->\u5404\u9876\u70b9\u7684\u4fe1\u606f->\u5404\u6761\u5f27\u7684\u4fe1\u606f int i,a,b; char tmp[MAX_VERTEX_NUM]; char h,t; ArcNode *p, *q; InitGraph_AL(pG); //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc\uff0c\u5982\u679c\u4e0d\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3aNULL\uff0c\u4f1a\u51fa\u9519 //\u56fe\u7684\u7c7b\u578b pG->kind = DG; //\u9876\u70b9\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->vernum = i; //\u5f27\u7684\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->arcnum = i; //\u5404\u9876\u70b9\u4fe1\u606f scanf(\"%s\", tmp); for (i=0; i<pG->vernum; ++i) pG->vers[i].data=tmp[i]; //\u5f27\u7684\u4fe1\u606f for (i=0; i<pG->arcnum; ++i) { scanf(\"%s\", tmp); h = tmp[0]; t = tmp[2]; a = LocateVex_AL(*pG, h); b = LocateVex_AL(*pG, t); if (a<0 || b<0) return ERROR; p = (ArcNode *)malloc(sizeof(ArcNode)); if (!p) exit(OVERFLOW); p->adjV=b;p->next=NULL; if (pG->vers[a].firstarc) { //\u5df2\u7ecf\u6709\u8fb9\u4e86 for (q = pG->vers[a].firstarc; q->next; q=q->next) ; //\u627e\u5230\u6700\u540e\u4e00\u6761 q->next = p; } else { //\u7b2c\u4e00\u6761\u8fb9 pG->vers[a].firstarc = p; } } return OK; } /*---------------------------------------------------------------- |7.28 \u6709\u5411\u56fe-\u4eceu-v\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84 | ----------------------------------------------------------------*/ int visit[MAX_VERTEX_NUM]; //\u524d\u9762\u5b9a\u4e49\u4e86 VertexType paths[maxSize][MAX_VERTEX_NUM]; //\u5b58\u653e\u8def\u5f84 int path[MAX_VERTEX_NUM]; //\u8def\u5f84 int pathnum=0; //\u5f53\u524d\u662f\u7b2c\u51e0\u6761\u8def\u5f84 void FindAllPath(ALGraph G, int u,int v,int k) { //u->v\u5f53\u524d\u662f\u7b2ck\u4e2a\u4f4d\u7f6e int i; ArcNode *p; visit[u]=1; //\u8d70\u5230\u4e86u path[k]=u; //\u6dfb\u52a0\u5230\u8def\u5f84->\u4e0b\u6807\u4f4d\u7f6e\u4e3ak\u7684\u7ed3\u70b9\u662fu\uff08\u7b2ck+1\u4e2a\u662fu\uff09 if (u==v) { //\u627e\u5230\u4e86 for (i=0; i<=k; i++) {//\u590d\u5236\u5230paths paths[pathnum][i] = G.vers[path[i]].data; } paths[pathnum][i]='\\0'; //\u7ed3\u675f\u7b26 pathnum++; //\u627e\u4e0b\u4e00\u6761\u8def\u5f84 } else { //u\u7684\u90bb\u8fb9\u5f00\u59cb\u627e for (p=G.vers[u].firstarc; p; p=p->next) { if (visit[p->adjV]==0) FindAllPath(G, p->adjV, v, k+1); //\u53bb\u8fd9\u4e2a\u90bb\u63a5\u70b9\u627e } } // \u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u7ed3\u70b9 // \u6ce8\u610f\uff1a\u56de\u6eaf\u5e94\u8be5\u5199\u5728\u5916\u9762-->\u4e5f\u5c31\u662f\u4e0d\u7ba1\u6709\u6ca1\u6709\u627e\u5230\u90fd\u8981\u56de\u6eaf visit[u]=0; path[k]=0; } int main() { /*7.28 6 11 ABCDEF B,A B,D C,B C,F D,C D,E D,F E,A F,A F,B F,E B->A A->B D->A */ int i,j; int cnt; ALGraph G; char tmp[20]; CreateDG_AL(&G); while (1) { scanf(\"%s\", tmp); //A->B i = LocateVex_AL(G, tmp[0]); j = LocateVex_AL(G, tmp[3]); for (cnt=0; cnt<MAX_VERTEX_NUM; cnt++) visit[cnt]=0; pathnum=0; printf(\"7.28 \u8f93\u51fa\u6240\u6709 %c \u5230 %c \u7684\u8def\u5f84\\n\", tmp[0], tmp[3]); FindAllPath(G, i, j, 0); if (pathnum==0) { printf(\"\\t- \u8d70\u4e0d\u901a\\n\"); } for (i=0; i<pathnum; i++) { printf(\"\\t%d %s\\n\", i+1, paths[i]); } } return 0; }","title":"\u56fe\u7b97\u6cd5\uff1a\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_25","text":"","title":"\u6811\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#_26","text":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; // \u4e2d\u5e8f+\u5148\u5e8f=>\u4e8c\u53c9\u6811 int mid_pr_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u5148\u5e8f\u904d\u5386 { // \u8fd9\u91cc\u4e0d\u80fd\u7b49\u4e8e\uff0c\u56e0\u4e3a\u5047\u8bbe\uff1alen==1\uff0c\u5219la==ra\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u6709\u4e00\u4e2a rt \u7684\uff0c\u5374\u6ca1\u88ab\u5efa\u7acb if(la>ra) return 0; int rt=pr[lb]; // \u56e0\u4e3a\u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u4e2d\u5e8f+\u540e\u5e8f=>\u4e8c\u53c9\u6811 int mid_po_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u540e\u5e8f\u904d\u5386 { if(la>ra) return 0; int rt=po[rb]; // \u56e0\u4e3a\u540e\u5e8f\u904d\u5386\u6700\u540e\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u6c42\u6811\u9ad8 int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } // \u5c42\u5e8f\u904d\u5386 void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); // \u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01 } // \u5148\u5e8f\u904d\u5386 void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } // \u4e2d\u5e8f\u904d\u5386 void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } // \u540e\u5e8f\u904d\u5386 void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // \u540e\u5e8f\u7ed3\u70b9 // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); // \u5148\u5e8f\u7ed3\u70b9 for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); // \u4e2d\u5e8f\u7ed3\u70b9 int rt=mid_po_build(0,n-1,0,n-1); // \u4e2d+\u540e\uff0c\u8fd4\u56de\u6839\u8282\u70b9 // int rt=mid_pr_build(0,n-1,0,n-1); // \u4e2d+\u5148\uff0c\u8fd4\u56de\u6839\u8282\u70b9 bfs(rt); // \u5c42\u5e8f\u904d\u5386 // preT(rt); // \u5148\u5e8f\u904d\u5386 // puts(\"\"); // postT(rt); // \u540e\u5e8f\u904d\u5386 // puts(\"\"); // midT(rt); // \u4e2d\u5e8f\u904d\u5386 // puts(\"\"); } return 0; }","title":"\u6ce8\u91ca\u7248"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#val-as-index1-n","text":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; int mid_pr_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=pr[lb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); return rt; } int mid_po_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=po[rb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); return rt; } int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); } void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); int rt=mid_po_build(0,n-1,0,n-1); // int rt=mid_pr_build(0,n-1,0,n-1); bfs(rt); // preT(rt); // postT(rt); // midT(rt); } return 0; }","title":"\u7b80\u5316\u7248\uff08Val As Index\uff0c\u82e5\u6570\u636e\u4e0d\u57281-N\u5185\uff0c\u5219\u53ef\u80fd\u8d8a\u754c\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8STL/#val-not-as-index-val","text":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a) #define ssclr(ss) ss.clear(), ss.str(\"\") #define INF 0x3f3f3f3f #define MOD 1000000007 using namespace std; typedef long long ll; const int maxn=5e4+1000; int f; int pre[maxn], in[maxn]; struct node { int l,r,d; }T[maxn]; int create(int l1,int r1,int l2,int r2) // in pre { if(l2>r2) return -1; int rt=l2; int p1=l1,p2; while(in[p1]!=pre[rt]) p1++; p2=p1-l1; T[rt].d=pre[rt]; T[rt].l=create(l1,p1-1,l2+1,l2+p2); T[rt].r=create(p1+1,r1,l2+p2+1,r2); return rt; } void postT(int rt) { if(rt==-1 || !f) return; postT(T[rt].l); postT(T[rt].r); if(f) f=0, printf(\"%d\\n\",T[rt].d); } int main() { int n; scanf(\"%d\",&n); for(int i=0;i<n;i++) scanf(\"%d\",&pre[i]); for(int i=0;i<n;i++) scanf(\"%d\",&in[i]); int rt=create(0,n-1,0,n-1); f=1, postT(rt); return 0; }","title":"\u7b80\u5316\u7248\uff08Val Not As Index\uff0c\u53ef\u4ee5\u5b58\u4efb\u610f\u7684 Val\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/","text":"\u7ecf\u5178\u9762\u8bd5\u5408\u96c6 \u00b6 \u6a21\u677f \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 \u7b97\u6cd5 \u00b6 \u7b97\u6cd5 - Algorithms \u6392\u5e8f\u7b97\u6cd5\uff1a\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f \u641c\u7d22\u7b97\u6cd5\uff1a\u56de\u6eaf\u3001\u9012\u5f52\u3001\u526a\u679d\u6280\u5de7 \u56fe\u8bba\uff1a\u6700\u77ed\u8def\u3001\u6700\u5c0f\u751f\u6210\u6811\u3001\u7f51\u7edc\u6d41\u5efa\u6a21 \u52a8\u6001\u89c4\u5212\uff1a\u80cc\u5305\u95ee\u9898\u3001\u6700\u957f\u5b50\u5e8f\u5217\u3001\u8ba1\u6570\u95ee\u9898 \u57fa\u7840\u6280\u5de7\uff1a\u5206\u6cbb\u3001\u500d\u589e\u3001\u4e8c\u5206\u3001\u8d2a\u5fc3 \u6570\u636e\u7ed3\u6784 - Data Structures \u6570\u7ec4\u4e0e\u94fe\u8868\uff1a\u5355 / \u53cc\u5411\u94fe\u8868\u3001\u8df3\u821e\u94fe \u6808\u4e0e\u961f\u5217 \u6811\u4e0e\u56fe\uff1a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u5e76\u67e5\u96c6 \u54c8\u5e0c\u8868 \u5806\uff1a\u5927 / \u5c0f\u6839\u5806\u3001\u53ef\u5e76\u5806 \u5b57\u7b26\u4e32\uff1a\u5b57\u5178\u6811\u3001\u540e\u7f00\u6811 \u6392\u5e8f \u00b6 \u4e00\u3001\u5feb\u901f\u6392\u5e8f \u00b6 \u4e8c\u3001\u5806\u6392 \u00b6 \u4e09\u3001\u63d2\u5165\u6392\u5e8f \u00b6 leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u00b6 //test4 //C++ upper_bound() lower_bound() //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 #include <iostream> #include <algorithm> #include <vector> #include <unordered_map> #include <string> #include <deque> using namespace std ; int main () { vector < int > nums = { 1 , 4 , 2 , 3 , 5 , 8 }; int k = 5 ; vector < double > ans ; int left = 0 ; int right = k ; deque < long long > window ; for ( int i = 0 ; i < k ; i ++ ){ //begin() refer to the first element //end() refer to the pass-the-end element //deque\u4e3a\u7a7a\u65f6 end()\u548cbegin()\u4e00\u6837 window.end()-window.begin()=0 //deque\u4e0d\u4e3a\u7a7a\u65f6 \u4e3a\u957f\u5ea6 //upper_bound\u6ca1\u627e\u5230\u65f6 \u5c31\u662f\u5728wi ndow.end()\u7684\u4f4d\u7f6e \u540c\u65f6\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u548cwindow.end()\u4e00\u6837\u4e3a\u7a7a \u53ea\u6709\u5728\u63d2\u5165\u64cd\u4f5c\u540e\u624d\u6709\u503c deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); cout << ( window . end () - window . begin ()) << \" \" <<* ( insert_p ) << \" \" << ( insert_p - window . begin ()) << endl ; window . insert ( insert_p , nums [ i ]); } ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } cout << ans [ 0 ] << endl ; return 0 ; } \u56db\u3001\u5f52\u5e76\u6392\u5e8f \u00b6 \u4e94\u3001\u5192\u6ce1\u6392\u5e8f \u00b6 \u516d\u3001\u9009\u62e9\u6392\u5e8f \u00b6 \u641c\u7d22 \u00b6 \u4e00\u3001DFS \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.DFS+\u56de\u6eaf+\u526a\u679d \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.DFS+\u6811 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 3.DFS+\u7f51\u683c\u578b \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.DFS+\u56fe \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 46. \u5168\u6392\u5217 \ud83e\udde1&&\ud83d\udca5 \u2160 1 78. \u5b50\u96c6 \ud83e\udde1&&\ud83d\udca5 \u2160 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 200. \u5c9b\u5c7f\u6570\u91cf \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 \u2162 1 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \ud83e\udde1 \u2162 1 \u56de\u6eaf\u6a21\u677f\u9898\uff1a \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 vector < string > permutation ( string s ) { vector < string > ans ; dfs ( s , ans , 0 ); return ans ; } void dfs ( string s , vector < string >& ans , int depth ){ if ( depth >= s . size () -1 ) { ans . push_back ( s ); return ; } unordered_set < char > used ; for ( int i = depth ; i < s . size (); ++ i ){ if ( used . find ( s [ i ]) != used . end ()) continue ; used . insert ( s [ i ]); swap ( s [ depth ], s [ i ]); dfs ( s , ans , depth + 1 ); swap ( s [ i ], s [ depth ]); } } 46. \u5168\u6392\u5217 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 //\u6ce8\u91ca\u90e8\u5206\u662f\u770b\u9898\u89e3\u5199\u7684 //\u672a\u6ce8\u91ca\u90e8\u5206\u662f\u6309\u7167 \u5251\u6307offer38.\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u90a3\u9898\u6a21\u677f\u5199\u7684.. //\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a vector < vector < int >> permute ( vector < int >& nums ) { vector < vector < int > > ans ; // vector<int> res; // vector<int> used(nums.size(), 0); // helper(ans, nums, res, used); helper ( ans , nums , 0 ); return ans ; } // void helper(vector<vector<int> >& ans,vector<int>& nums, vector<int>& res, vector<int>& used){ // if(res.size()==nums.size()){ // ans.push_back(res); // return; // } // for(int i=0;i<nums.size();++i){ // if(used[i]!=0) continue; // else{ // res.push_back(nums[i]); // used[i] = 1; // helper(ans, nums, res, used); // res.pop_back(); // used[i]=0; // } // } // } void helper ( vector < vector < int > >& ans , vector < int >& nums , int depth ){ if ( depth == nums . size () -1 ){ ans . push_back ( nums ); return ; } unordered_set < int > used ; for ( int i = depth ; i < nums . size (); ++ i ){ if ( used . find ( nums [ i ]) != used . end ()) continue ; used . insert ( nums [ i ]); swap ( nums [ depth ], nums [ i ]); helper ( ans , nums , depth + 1 ); swap ( nums [ depth ], nums [ i ]); } } \u7f51\u683c DFS \u904d\u5386\u7684\u57fa\u672c\u6846\u67b6 \u53c2\u8003 void dfs ( vector < vector < int > >& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 dfs ( grid , r + 1 , c ); dfs ( grid , r -1 , c ); dfs ( grid , r , c -1 ); dfs ( grid , r , c + 1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int > >& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size ; } 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef int maxAreaOfIsland ( vector < vector < int >>& grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . size (); ++ i ){ for ( int j = 0 ; j < grid [ 0 ]. size (); ++ j ){ if ( grid [ i ][ j ] == 1 ){ int r = dfs ( grid , i , j ); ans = max ( ans , r ); } } } return ans ; } int dfs ( vector < vector < int >>& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return 0 ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return 0 ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 return 1 + dfs ( grid , r + 1 , c ) + dfs ( grid , r -1 , c ) + dfs ( grid , r , c + 1 ) + dfs ( grid , r , c -1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int >>& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size (); } \u4e8c\u3001BFS \u00b6 \u5c42\u5e8f\u904d\u5386\uff1a \u300cBFS \u904d\u5386\u300d\u3001\u300c\u5c42\u5e8f\u904d\u5386\u300d\u3001\u300c\u6700\u77ed\u8def\u5f84\u300d\u5b9e\u9645\u4e0a\u662f\u9012\u8fdb\u7684\u5173\u7cfb\u3002\u5728 BFS \u904d\u5386\u7684\u57fa\u7840\u4e0a\u533a\u5206\u904d\u5386\u7684\u6bcf\u4e00\u5c42\uff0c\u5c31\u5f97\u5230\u4e86\u5c42\u5e8f\u904d\u5386\u3002\u5728\u5c42\u5e8f\u904d\u5386\u7684\u57fa\u7840\u4e0a\u8bb0\u5f55\u5c42\u6570\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u77ed\u8def\u5f84\u3002 \u4e09\u3001\u4e8c\u5206\u67e5\u627e \u00b6 \u4e00\u822c\u7528\u4e8e\u6709\u5e8f\u6570\u7ec4\u6216BST, \u4e8c\u5206\u67e5\u627e\u6548\u7387\u5f88\u9ad8O(logn) \u52a8\u6001\u89c4\u5212 \u00b6 \u5927\u591a\u6570\u9012\u5f52\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u91cd\u5199 \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u80cc\u5305\u95ee\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u52a8\u6001\u89c4\u5212\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83d\udc9a\ud83e\udde1 && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 72. \u7f16\u8f91\u8ddd\u79bb \ud83e\udde1 && \ud83d\udca5 \u2160 1 221. \u6700\u5927\u6b63\u65b9\u5f62 \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \ud83d\udc9a && \ud83d\udc8c \u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 72. \u7f16\u8f91\u8ddd\u79bb \u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 //\u4f7f\u7528dpTable //\u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a //\u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b int minDistance ( string word1 , string word2 ) { int m = word1 . size (); int n = word2 . size (); vector < vector < int > > dp ( m + 1 , vector < int > ( n + 1 )); for ( int i = 0 ; i <= m ; ++ i ) dp [ i ][ 0 ] = i ; for ( int j = 0 ; j <= n ; ++ j ) dp [ 0 ][ j ] = j ; for ( int i = 1 ; i <= m ; ++ i ){ for ( int j = 1 ; j <= n ; ++ j ){ //\u5f53\u524d\u5b57\u7b26\u4e32\u76f8\u7b49 \u5219\u53cc\u6307\u9488\u90fd\u524d\u79fb if ( word1 [ i -1 ] == word2 [ j -1 ]) dp [ i ][ j ] = dp [ i -1 ][ j -1 ]; else dp [ i ][ j ] = min ( min ( dp [ i -1 ][ j ] + 1 , dp [ i ][ j -1 ] + 1 ), dp [ i -1 ][ j -1 ] + 1 ); } } return dp [ m ][ n ]; } \u53c2\u8003 \u57fa\u7840\u6280\u5de7 \u00b6 \u4e8c\u5206 \u00b6 \u53cc\u6307\u9488 \u00b6 \u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57 \u6ed1\u52a8\u7a97\u53e3 \u00b6 \u603b\u7ed3\uff1a \u6ed1\u52a8\u7a97\u53e3+\u53cc\u6307\u9488+hash\u8868 \uff08\u6216\u8005unordered_set\uff09\u5e38\u5e38\u7ed3\u5408\u5728\u4e00\u8d77 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 \u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u7b80\u5355 && \u540c3 2 \u221a \u4e8c\u6b21AC 8min 2021-3-11 \u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 2 \u770b\u89e3\u7b54 2021-3-11 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 1 \u770b\u89e3\u7b54 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 && HOT100 2 \u221a \u4e00\u6b21AC 10min 2021-3-11 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u4e2d\u7b49 && HOT100 2 \u770b\u89e3\u7b54 2021-3-11 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 424. \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26 \u4e2d\u7b49 1 480. \u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u56f0\u96be 1 \u770b\u89e3\u7b54 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7b80\u5355 2 ac 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 t \u3002\u8fd4\u56de s \u4e2d\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c s \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u6ce8\u610f\uff1a\u5982\u679c s \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"ADOBECODEBANC\", t = \"ABC\" \u8f93\u51fa\uff1a\"BANC\" \u6ed1\u52a8\u7a97\u53e3\u601d\u60f3\uff1a \u603b\u7ed3(Conclusion) \u2460\u7a97\u53e3\u7531\u4e24\u4e2a\u6307\u9488\u6784\u6210\uff0c\u4e00\u4e2a\u5de6\u6307\u9488left\uff0c\u4e00\u4e2a\u53f3\u6307\u9488right\uff0c\u7136\u540e[left,right]\u8868\u793a\u7684\u7d22\u5f15\u8303\u56f4\u662f\u4e00\u4e2a\u7a97\u53e3\u4e86\u3002 \u2461\u53f3\u6307\u9488right\u7684\u529f\u80fd\u662f\u7528\u6765\u6269\u5c55\u7a97\u53e3\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u6ca1\u6709\u8fbe\u5230\u9898\u76ee\u8981\u6c42\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u79fb\u52a8\u53f3\u6307\u9488right\u76f4\u5230\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u7b2c\u4e00\u6b21\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e3a\u6b62\u3002 \u2462\u5de6\u6307\u9488left\u7684\u529f\u80fd\u662f\u7528\u6765\u7f29\u5c0f\u7a97\u53e3\u7684\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u5df2\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u6216\u591a\u4e8e\u9898\u76ee\u6761\u4ef6\u65f6\uff08\u7a97\u53e3\u6ea2\u51fa\uff09\uff0c\u6211\u4eec\u7f29\u5c0f\u7a97\u53e3\uff0c\u4e5f\u5c31\u662f\u5de6\u6307\u9488left\u9700\u8981\u53f3\u79fb\u76f4\u5230\u7a97\u53e3\u6761\u4ef6\u4e0d\u6ee1\u8db3\u4e3a\u6b62\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5e76\u66f4\u65b0\u76ee\u524d\u4e3a\u6b62\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7a97\u53e3\u8bb0\u5f55\u3002\u4e4b\u540e\uff0c\u518d\u6b21\u6269\u5c55\u53f3\u6307\u9488right\uff0c\u4f7f\u5f97\u7a97\u53e3\u6ee1\u8db3\u9898\u76ee\u7684\u6761\u4ef6\u3002 \u6ce8\uff1a\u6ed1\u52a8\u7a97\u53e3\u7528\u6765\u5904\u7406\u8fde\u7eed\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684\u8fde\u7eed\u533a\u95f4\u7684\u6027\u8d28\uff08\u957f\u5ea6\u7b49\uff09\u95ee\u9898\u7684\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u8d77\u59cb\u4e8e\u539f\u70b9\uff0c\u5e76\u4e00\u524d\u4e00\u540e\u5411\u7ec8\u70b9\u524d\u8fdb\u3002 \u6846\u67b6 func movingWindow () { /* 1. \u521d\u59cb\u5316\u7a97\u53e3\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bb0\u5f55\u7a97\u53e3\u5185\u7684\u4fe1\u606f */ first , last := 0 , 0 // \u7a97\u53e3\u7684\u5de6\u53f3\u8fb9\u754c for last < len ( s ) { /* 2. \u628a last \u6307\u5411\u7684\u5143\u7d20\u52a0\u5165\u7a97\u53e3 */ for first < len ( s ) && /* 3. \u5224\u65ad\u5f53\u524d\u7a97\u53e3\u5185\u7684\u5143\u7d20\u662f\u5426\u7b26\u5408\u6761\u4ef6 */ { /* 4.a \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5c0f\u503c\u7684\u4ee3\u7801 */ /* 5. \u628a first \u6307\u5411\u7684\u5143\u7d20\u79fb\u51fa\u7a97\u53e3 */ first ++ } /* 4.b \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5927\u503c\u7684\u4ee3\u7801 */ last ++ } } leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528multiset\u6765\u6c42\u51fa\u4e2d\u4f4d\u6570\uff08\u56e0\u4e3amultiset\u5e95\u5c42\u4f7f\u7528\u7684\u662f\u4e8c\u53c9\u641c\u7d22\u6811BST\u7684\u6570\u636e\u7ed3\u6784\uff0c\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u5229\u7528multiset\u7684\u81ea\u6392\u5e8f\u529f\u80fd\u53ef\u4ee5\u5f88\u5feb\u6c42\u51fa\u4e2d\u4f4d\u6570\u3002multiset\u4f5c\u4e3a\u5927\u5c0f\u4e3ak\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u6bcf\u6b21\u63d2\u5165\u65b0\u63d2\u5165\u5143\u7d20\uff0c\u9700\u5c06\u7a97\u53e3\u79fb\u52a8\u3002\u82e5\u65b0\u63d2\u5165\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u5219\u9700\u8981\u5c06mid\u5de6\u79fb\uff08\u56e0\u4e3a\u65b0\u63d2\u5165\u7684\u5143\u7d20\u6bd4\u4e2d\u4f4d\u6570\u5c0f\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u80af\u5b9a\u4f1a\u88ab\u62c9\u4f4e\uff09\uff1b\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u82e5\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5c06mid\u53f3\u79fb\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5220\u9664\u5143\u7d20\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528erase\u6839\u636evalue\u6765\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5220\u9664\u591a\u4e2a\u503c\u4e00\u6837\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u7528lower_bound\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u76ee\u6807\u503c\u7684\u6570\uff0c\u901a\u8fc7iterator\u6765\u5220\u6389\u786e\u5b9a\u7684\u4e00\u4e2a\u6570\u5b57\u3002 \u5173\u4e8enext()\u4e0eprev()\u51fd\u6570\u7684\u89e3\u91ca\uff1a Here //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 class Solution { public : vector < double > medianSlidingWindow ( vector < int >& nums , int k ) { vector < double > ans ; if ( nums . size () == 0 ) return ans ; int left = 0 ; int right = k ; //\u7531\u4e8e\u53ef\u80fdtestcase [2147483647,2147483647] k=2 //\u53d1\u751f\u6ea2\u51fa \u6240\u4ee5window\u8bbe\u7f6e\u4e3along long\u7c7b\u578b deque < long long > window ; //\u63d2\u5165\u6392\u5e8f //\u901a\u8fc7upper_bound lower_bound(\u5e95\u5c42\u90fd\u662f\u4e8c\u5206\u6cd5\u5b9e\u73b0)\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668 //lower_bound\u51c6\u786e\u627e\u5230\u8be5\u5220\u7684\u8282\u70b9 upper_bound\u627e\u5230\u8be5\u63d2\u5165\u7684\u8282\u70b9 for ( int i = 0 ; i < k ; i ++ ){ deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); //deque\u7684insert\u8981\u4f20\u8fed\u4ee3\u5668\u548cval\u3002 window . insert ( insert_p , nums [ i ]); } //ans\u4e3adouble\u7c7b\u578b \u9664\u4ee52.0\u4f7flong long\u53d8\u4e3adouble ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); //erase\u4f1a\u5220\u9664\u591a\u4e2a\u540c\u503c\u7684 \u6240\u4ee5\u5fc5\u987b\u4f20\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } return ans ; } }; \u524d\u7f00\u548c \u00b6 \u53c2\u8003 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 \u5206\u6cbb \u00b6 \u8d2a\u5fc3 \u00b6 \u5355\u8c03\u6808 \u00b6 \u601d\u7ef4\u9898 \u00b6 \u77e9\u9635\u76f8\u5173 \u00b6 \u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 54. \u87ba\u65cb\u77e9\u9635 \u4e2d\u7b49 2 \u221a \u4e00\u6b21ac 10min 2021-3-15 59. \u87ba\u65cb\u77e9\u9635 II \u7b80\u5355 2 \u221a \u4e00\u6b21ac 8min 2021-3-16 \u9762\u8bd5\u9898 01.07. \u65cb\u8f6c\u77e9\u9635 \u00b6 \u7ed9\u4f60\u4e00\u5e45\u7531 N \u00d7 N \u77e9\u9635\u8868\u793a\u7684\u56fe\u50cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u3002\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\uff0c\u5c06\u56fe\u50cf\u65cb\u8f6c 90 \u5ea6\u3002 \u4e0d\u5360\u7528\u989d\u5916\u5185\u5b58\u7a7a\u95f4\u80fd\u5426\u505a\u5230\uff1f \u65cb\u8f6c270\u00b0\u662f\u8f6c\u7f6e\u3002\u65cb\u8f6c180\u00b0\u662f\u5148\u4e0a\u4e0b\u5bf9\u79f0\uff0c\u518d\u5de6\u53f3\u5bf9\u79f0\u3002\u65cb\u8f6c90\u00b0\u662f\u5148\u8f6c\u7f6e,\u7136\u540e\u5de6\u53f3\u5bf9\u79f0\u8fc7\u53bb\u3002 \u76f8\u540c\u9898\uff1a 48. \u65cb\u8f6c\u56fe\u50cf \u9762\u8bd5\u9898 01.08. \u96f6\u77e9\u9635 \u00b6 \u7f16\u5199\u4e00\u79cd\u7b97\u6cd5\uff0c\u82e5M \u00d7 N\u77e9\u9635\u4e2d\u67d0\u4e2a\u5143\u7d20\u4e3a0\uff0c\u5219\u5c06\u5176\u6240\u5728\u7684\u884c\u4e0e\u5217\u6e05\u96f6\u3002 54. \u87ba\u65cb\u77e9\u9635 \u00b6 \u7ed9\u4f60\u4e00\u4e2a m \u884c n \u5217\u7684\u77e9\u9635 matrix \uff0c\u8bf7\u6309\u7167 \u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f \uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 221. \u6700\u5927\u6b63\u65b9\u5f62 \u00b6 \u5728\u4e00\u4e2a\u7531 '0' \u548c '1' \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b '1' \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002 \u6570\u5b66\u95ee\u9898 \u00b6 \u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \u00b6 470. \u7528 Rand7() \u5b9e\u73b0 Rand10() \u00b6 (randx()-1)Y + randx() \u80fd\u968f\u673a\u751f\u6210[1,x*Y]\u5185\u7684\u968f\u673a\u6570 \u4f4d\u8fd0\u7b97 \u00b6 \u4f4d\u8fd0\u7b97\u77e5\u8bc6\u70b9\uff1a \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II \u2b50 \ud83e\udde1 && \ud83d\udc8c \u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \ud83d\udc9a && \ud83d\udc8c 78. \u5b50\u96c6 \ud83e\udde1 && \ud83d\udca5 2\u2611\ufe0f ac 5min 2021-3-19 169. \u591a\u6570\u5143\u7d20 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u2705 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 1min 2021-3-19 338. \u6bd4\u7279\u4f4d\u8ba1\u6570 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 461. \u6c49\u660e\u8ddd\u79bb \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 \u8bbe\u8ba1\u9898 \u00b6 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 146. LRU \u7f13\u5b58\u673a\u5236 \ud83d\udc34\u2b50 \ud83e\udde1 && \ud83d\udca5 1 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \ud83e\udde1 && \ud83d\udca5 1 \u6570\u636e\u7ed3\u6784 \u00b6 1.\u6570\u7ec4 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Nsum \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5Easy && TOP\u2705\ud83d\udc34\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 2.\u94fe\u8868 \u00b6 \u603b\u7ed3\uff1a 1.\u4e86\u89e3\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9a\u4e49\u94fe\u8868 2.\u5b66\u4f1a\u4f7f\u7528dummyHead \u8fd9\u6837\u80fd\u5f88\u597d\u5904\u7406\u8fb9\u754c\u60c5\u51b5\u3002\u5220\u9664\u94fe\u8868\u8282\u70b9\u7684\u9898\u578b\u4e2d\u5c24\u4e3a\u5178\u578b\u5982\uff1a19\u3001203 3.**\u5220\u9664\u94fe\u8868\u8282\u70b9**\u7c7b\u578b\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u8bb0\u5f97\u91ca\u653e\u8282\u70b9\u5185\u5b58\u3002\u5426\u5219\u4f1a\u6709\u5185\u5b58\u6cc4\u6f0f\u3002 \u598282\u300183 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u53cd\u8f6c\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u56de\u6587\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u94fe\u8868\u8282\u70b9\u5220\u9664 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.\u5408\u5e76\u5347\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 5.\u6392\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 6.\u73af\u5f62\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 7.\u94fe\u8868\u6570\u636e\u7ed3\u6784 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 8.\u94fe\u8868\u8fd0\u7b97 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 Easy && TOP\u2705\ud83d\udc34 \u2160 2 \uff08\u8fed\u4ee3\u4e0e\u9012\u5f52\uff09 61. \u65cb\u8f6c\u94fe\u8868 Medium \u2160 1 ac(\u8fb9\u754c\u8c03\u8bd5\u4e86\u4e00\u4f1a) 15min 2021-3-18 92. \u53cd\u8f6c\u94fe\u8868 II Medium \u2160 1\u2611\ufe0f ac 30min 2021-3-18 234. \u56de\u6587\u94fe\u8868 Easy && HOT100 \u2161 2\u2611\ufe0f ac 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 Easy && HOT100 \u2162 2\u2611\ufe0f ac 5min 2021-3-18 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II Med \u2162 1\u2611\ufe0f ac 10min 2021-3-18 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 Easy \u2162 1\u2611\ufe0f ac 3min 2021-3-18 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 Easy && HOT100 \u2163 2\u2611\ufe0f ac 5min 2021-3-10 23. \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 \u2b50 Hard && HOT100 \u2163 1 ac 148. \u6392\u5e8f\u94fe\u8868 \u2b50 Medium && HOT100 \u2164 1 \u770b\u89e3\u7b54 ... ... 141. \u73af\u5f62\u94fe\u8868 Easy && HOT100 \u2165 2\u2611\ufe0f ac 2min 2021-3-18 142. \u73af\u5f62\u94fe\u8868 II Medium && HOT100 \u2165 2\u2611\ufe0f ac 5min 160. \u76f8\u4ea4\u94fe\u8868 (\u540coffer52) Easy && HOT100 \u2165 2\u2611\ufe0f ac \u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u2b50 \u5251\u6307offer \u2166 1 \u770b\u89e3\u7b54 2. \u4e24\u6570\u76f8\u52a0 \u2b50 Med && HOT100 \u2167 1 ac 86. \u5206\u9694\u94fe\u8868 Med \u2167 1 ac 20min 2021-3-18 3.\u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u80fd\u52a8\u5f52\u7684\u522b\u56de\u6eaf\uff0c\u5bb9\u6613\u8d85\u65f6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u5b57\u7b26\u4e32+\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.\u56de\u6587\u5b50\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u5b57\u7b26\u4e32+\u6808 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u5b57\u7b26\u4e32+\u56de\u6eaf\uff08\u7ec4\u5408\u53ca\u5207\u5206\u95ee\u9898\uff09 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u5b57\u7b26\u4e32+\u5206\u7c7b\u8ba8\u8bba \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 ... ... 72. \u7f16\u8f91\u8ddd\u79bb Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 Medium \u2160 1 \u56de\u6eaf\u8d85\u65f6... 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 Medium \u2161 2\u2611\ufe0f \u4e00\u6b21ac 10min 131. \u5206\u5272\u56de\u6587\u4e32 Hard \u2161 1 \u770b\u89e3\u7b54 132. \u5206\u5272\u56de\u6587\u4e32 II Hard && \u51fa\u8fc7 \u2160&&\u2161 1 \u4e00\u6b21ac 647. \u56de\u6587\u5b50\u4e32 Medium \u2161 1 \u4e00\u6b21ac \u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 Medium \u2164 1 ac 45min 394. \u5b57\u7b26\u4e32\u89e3\u7801 Medium \u2162&&\u2164 1 \u770b\u89e3\u7b54 \u5b57\u7b26\u4e32\u6392\u5e8f \u5355\u8bcd\u67e5\u627e\u6811 \u5b50\u5b57\u7b26\u4e32\u67e5\u627e \u6b63\u5219\u8868\u8fbe\u5f0f \u6570\u636e\u538b\u7f29 \u5b57\u5178\u6811 \u524d\u7f00(\u540e\u7f00)\u6811 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c KMP 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u7c7b\u4f3c\u9898\uff1a \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c \u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5 s2 \u662f\u5426\u4e3a s1 \u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c waterbottle \u662f erbottlewat \u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002 **\u89e3\u9898\u601d\u8def\uff1a**\u65b0\u5b9a\u4e49ss=s2+s2;\u7136\u540e\u5224\u65ads1\u662f\u5426\u662fss\u5b50\u4e32(\u66b4\u529b\u6216KMP\u6216\u81ea\u5e26api) 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 4.\u6808\u4e0e\u961f\u5217 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u8bbe\u8ba1\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u6808\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u2b50 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \ud83d\udc34 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c&&\ud83d\udc34 \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \ud83d\udc9a && \ud83d\udc8c \u2160 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \ud83e\udde1 && \ud83d\udc8c \u2160 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 224. \u57fa\u672c\u8ba1\u7b97\u5668 227. \u57fa\u672c\u8ba1\u7b97\u5668 II \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762 5.\u6811 \u00b6 **\u603b\u7ed3\uff1a**\u4e8c\u53c9\u6811\u9898\u76ee\u4e0e**\u9012\u5f52\u3001\u56db\u79cd\u904d\u5386\u548cDFS\u641c\u7d22**\u76f8\u5173\u6027\u975e\u5e38\u5927\u3002\u540c\u65f6\u5f88\u591a\u9898\u76ee\u8981\u6c42**\u8fed\u4ee3\u548c\u9012\u5f52**\u4e24\u79cd\u65b9\u6cd5 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u4e8c\u53c9\u6811\u7684\u56db\u79cd\u904d\u5386 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u4e8c\u53c9\u6811\u4e0e\u9012\u5f52 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u4e8c\u53c9\u6811\u4e0e\u641c\u7d22DFS \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u4e8c\u53c9\u6811\u5e8f\u5217\u5316 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u4e8c\u53c9\u6811\u4e0e\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1\u2611\ufe0f 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1 98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 2\u2611\ufe0f ac 10min 2021-3-18 617. \u5408\u5e76\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 \u2161 1\u2611\ufe0f ac 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 &&\ud83d\udc8c \u2161 2 ac(\u9012\u5f52+\u8fed\u4ee3) 10min 2021-3-18 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 \u2b50 Med \u2162 1 \u770b\u89e3\u7b54 99. \u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 \ud83d\udc98 \u2162 1 \u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u2b50 \ud83d\udc98 && \ud83d\udca5 &&\ud83d\udc8c \u2163 1 \u770b\u89e3\u7b54 ... 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 \u2b50 \ud83e\udde1 && \u7c7b\u4f3coffer 37 \u2163 1 \u770b\u89e3\u7b54(\u4e0d\u592a\u4f1a) ... 2021-3-12 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II \u2b50 \ud83e\udde1 \u2164 1 \u83ab\u91cc\u65af\u904d\u5386 \u4e8c\u53c9\u641c\u7d22\u6811 \u5e73\u8861\u4e8c\u53c9\u6811 **\u83ab\u91cc\u65af\u904d\u5386:**\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u7684\u65b9\u5f0f\u90fd\u4f7f\u7528\u4e86\u8f85\u52a9\u7684\u7a7a\u95f4\uff0c\u800c\u83ab\u91cc\u65af\u904d\u5386\u7684\u4f18\u70b9\u662f\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8f85\u52a9\u7a7a\u95f4\u3002\u7f3a\u70b9\u662f\u6539\u53d8\u4e86\u6574\u4e2a\u6811\u7684\u7ed3\u6784\u3002 \u4e8c\u53c9\u641c\u7d22\u6811\uff1a \u67e5\u627e \u63d2\u5165 \u5efa\u6811 \u5220\u9664 \u9012\u5f52 \u00b6 \u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II vector < TreeNode *> generateTrees ( int n ) { if ( n == 0 ) return vector < TreeNode *> ( 0 ); //\u4e3a0\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684\u5411\u91cf return helper ( 1 , n ); // } vector < TreeNode *> helper ( int start , int end ){ vector < TreeNode *> ans ; if ( start > end ){ ans . push_back ( NULL ); //\u4e00\u5b9a\u8981push\u4e00\u4e2aNULL\u8fdb\u53bb \u8fd9\u6837size\u81f3\u5c11\u4e3a1 \u5426\u5219\u540e\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5728\u4e00\u4e2a\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u7ee7\u7eed return ans ; } for ( int i = start ; i <= end ; ++ i ){ //i\u4ee3\u8868\u4e0d\u540c\u7684\u503c\u505a\u6839\u8282\u70b9 vector < TreeNode *> lefts = helper ( start , i -1 ); //\u5de6\u5b50\u6811\u96c6\u5408 vector < TreeNode *> rights = helper ( i + 1 , end ); //\u53f3\u5b50\u6811\u96c6\u5408 //\u4e0b\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5c31\u662f\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ec4\u5408\u60c5\u51b5 for ( int k = 0 ; k < lefts . size (); k ++ ){ //\u904d\u5386\u5de6\u5b50\u6811\u96c6\u5408 for ( int j = 0 ; j < rights . size (); j ++ ){ //\u904d\u5386\u53f3\u5b50\u6811\u96c6\u5408 TreeNode * root = new TreeNode ( i ); //\u521b\u5efa\u4e00\u4e2a\u5f53\u524d\u503c\u7684\u6839\u8282\u70b9 root -> left = lefts [ k ]; //\u9009\u53d6\u5de6\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5de6\u5b50\u6811 root -> right = rights [ j ]; //\u9009\u53d6\u53f3\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u53f3\u5b50\u6811 ans . push_back ( root ); //\u5c06\u5f53\u524d\u7684\u6811\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d } } } return ans ; } 99.\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 //\u8981\u6c42O(1)\u7a7a\u95f4 \u53ea\u80fdMorris\u904d\u5386 void recoverTree ( TreeNode * root ) { bool flag = false ; TreeNode * rt = root ; stack < TreeNode *> S ; TreeNode * pre = NULL ; //\u5b9a\u4e49\u4e00\u4e2a\u91ce\u6307\u9488\u65f6\u4e00\u5b9a\u8981\u58f0\u660e\u662fNULL TM\u7684\u88ab\u8fd9\u4e2a\u641e\u4e86\u4e00\u4e0b\u5348 \u64cd\u64cd\u64cd TreeNode * fi = NULL ; while ( rt || ! S . empty ()){ if ( rt != NULL ){ S . push ( rt ); rt = rt -> left ; } else { rt = S . top (); S . pop (); if ( pre != NULL ) { //\u7b2c\u4e00\u4e2a\u8981\u4ea4\u6362\u7684\u8282\u70b9 \u4ed6\u7684\u503c\u5c0f\u4e8e\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u3002 if ( flag == false && pre -> val >= rt -> val ) { flag = true ; fi = pre ; } //flag\u4e3atrue\u5219\u8bf4\u660e\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9 \u7b2c\u4e8c\u4e2a\u8981\u627e\u7684\u8282\u70b9\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u70b9 //1.\u8981\u4e48\u4ed6\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u503c\u5927\u4e8e\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u503c //2.\u8981\u4e48\u4ed6\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e86 \u9000\u51fawhile\u5faa\u73af\u76f4\u63a5\u4ea4\u4e92\u5373\u53ef if ( flag == true && rt -> val > fi -> val ) { swap ( fi -> val , pre -> val ); return ; } } pre = rt ; rt = rt -> right ; } } swap ( fi -> val , pre -> val ); return ; } \u5361\u7279\u5170\u6570 \u00b6 \u516c\u5f0f\uff1a G ( n )= G (0)\u2217 G ( n \u22121)+ G (1)\u2217 G ( n \u22122)+...+ G ( n \u22121)\u2217 G (0) \u9002\u7528\u95ee\u9898\uff1a n\u5bf9\u62ec\u53f7\u6b63\u786e\u5339\u914d\u6570\u76ee \u51f8\u591a\u8fb9\u5f62\u4e09\u89d2\u5212\u5206 \u51fa\u6808\u6b21\u5e8f \u77e9\u9635\u8fde\u4e58\u62ec\u53f7\u5316\uff1a\u77e9\u9635\u8fde\u4e58\uff1a P=a1\u00d7a2\u00d7a3\u00d7\u2026\u2026\u00d7an\uff0c\u4f9d\u636e\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6539\u53d8\u5176\u987a\u5e8f\uff0c\u53ea\u7528\u62ec\u53f7\u8868\u793a\u6210\u5bf9\u7684\u4e58\u79ef\uff0c\u8bd5\u95ee\u6709\u51e0\u79cd\u62ec\u53f7\u5316\u7684\u65b9\u6848\u3002\uff08 h(n) \u79cd\uff09 96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 //\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6570\u5b66\u95ee\u9898\u3002\u5c31\u662f\u6c42\u5361\u7279\u5170\u6570 int numTrees ( int n ) { vector < int > dp ( n + 1 ); dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < n + 1 ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) dp [ i ] += dp [ j ] * dp [ i -1 - j ]; return dp [ n ]; } 6.\u56fe \u00b6 \u603b\u7ed3\uff1a\u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a.... 207. \u8bfe\u7a0b\u8868 399. \u9664\u6cd5\u6c42\u503c const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; } 7.Hash \u00b6 \u603b\u7ed3\uff1aHash\u5e38\u4e0e\u53cc\u6307\u9488\u548c\u6ed1\u52a8\u7a97\u53e3\u7ec4\u5408\u3002\u5728\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u4e2d\u5c24\u4e3a\u5e38\u89c1\u3002 unordered_map\u67e5\u8be2\u624d\u662fO(1) map\u67e5\u8be2\u662fO(logn) \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Hash\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.Hash\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.Hash\u4e0e\u53cc\u6307\u9488/\u6ed1\u52a8\u7a97\u53e3 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.Hash\u8bbe\u8ba1 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 &&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 ac 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 \ud83e\udde1 && \ud83d\udca5 \u2160 1 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u2b50 \ud83d\udc98 && \ud83d\udca5 \u2160&& \u2162 2 \u770b\u89e3\u7b54 705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408 \ud83d\udc9a && \ud83d\udd05 1 \u770b\u89e3\u7b54 5min 2021-3-13 706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04 \ud83d\udc9a && \ud83d\udd05 1 \u4e24\u6b21ac 10min 2021-3-14 8.\u5806 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \ud83e\udde1&&\ud83d\udc8c \u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \ud83d\udc98&&\ud83d\udc8c 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 9.\u5e76\u67e5\u96c6 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 \u7ecf\u9a8c\u79ef\u7d2f \u00b6 \u6a21\u677f \u00b6 \u6a21\u677f IO\u5904\u7406 \u00b6 \u603b\u7ed3\uff1a\u53ef\u4ee5\u770b\u770bC++\u8f93\u5165\u8f93\u51fa\u5904\u7406 \u5c24\u5176\u662fstringstream \u548c getline\u7b49\u7528\u6cd5 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 C++:cin\u3001cin.getline()\u3001getline()\u7684\u7528\u6cd5 \u5f53 cin \u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u4f20\u9012\u5e76\u5ffd\u7565\u4efb\u4f55\u524d\u5bfc\u767d\u8272\u7a7a\u683c\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u5236\u8868\u7b26\u6216\u6362\u884c\u7b26\uff09\u3002\u4e00\u65e6\u5b83\u63a5\u89e6\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u5373\u5f00\u59cb\u9605\u8bfb\uff0c\u5f53\u5b83\u8bfb\u53d6\u5230\u4e0b\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5b83\u5c06\u505c\u6b62\u8bfb\u53d6\u3002 getline\u51fd\u6570\u53ef\u8bfb\u53d6\u6574\u884c\uff0c\u5305\u62ec\u524d\u5bfc\u548c\u5d4c\u5165\u7684\u7a7a\u683c\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u5bf9\u8c61\u4e2d\u3002 getline(cin,'\\n'); cin\u4e3a\u8f93\u5165\u6d41 '\\n'\u4e3a\u7ed3\u675f\u7b26 \u4e5f\u53ef\u5199\u4f5cgetline(str, tmp, ',') \u5c31\u662f\u8f93\u5165\u5b57\u7b26\u4e32\u4e3astr, \u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u4e3atmp \u3002','\u4e3a\u7ed3\u675f\u7b26 \u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0C++\u4e2d\u6ca1\u6709\u7684split\u65b9\u6cd5 C++\u8bed\u6cd5 \u00b6 C++ Lambda\u8868\u8fbe\u5f0f \u53c2\u8003 auto \u5173\u952e\u5b57 \u53c2\u8003 \u9012\u5f52 \u00b6 \u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 7\u4e2a\u5b57\u6bcd\u6570\u5b57\u5224\u65ad\u76f8\u5173\u7684\u51fd\u6570 \u00b6 \u4f8b125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u8bb0\u4e00\u7b14 c++\u7684\u51e0\u4e2a\u5185\u7f6e\u51fd\u6570 islower(char c) \u662f\u5426\u4e3a\u5c0f\u5199\u5b57\u6bcd isupper(char c) \u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd isdigit(char c) \u662f\u5426\u4e3a\u6570\u5b57 isalpha(char c) \u662f\u5426\u4e3a\u5b57\u6bcd isalnum(char c) \u662f\u5426\u4e3a\u5b57\u6bcd\u6216\u8005\u6570\u5b57 toupper(char c) \u5b57\u6bcd\u5c0f\u8f6c\u5927 tolower(char c) \u5b57\u6bcd\u5927\u8f6c\u5c0f TIPs \u00b6 \u957f\u5ea6\u4e3ak\u7684\u6709\u5e8f\u5411\u91cf\u7684**\u4e2d\u4f4d\u6570\u6c42\u6cd5**\uff1a\u65e0\u8bba\u5947\u5076,\u90fd\u662f( num[k/2]+num[(k-1)/2])/2 \u4e5f\u5373**\u7d22\u5f15\u4e3a(size-1)/2\u548csize/2\u5904\u503c\u548c\u7684\u5e73\u5747** **\u4e2d\u95f4\u7684\u6570mid**\u4e00\u822c\u4e3ak/2,k\u4e3a\u5076\u6570\u65f6\u4e3a\u504f\u540e\u7684\u90a3\u4e00\u4e2a\u4e2d\u95f4\u6570 \u4e00\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5 \uff1amultiset window(nums.begin(),nums.begin()+k); \u521b\u5efaiterator\u5bf9\u8c61 \u3002\u5982 c++ vector<int> a(20,1); vector<int>::iterator tmp = upper_bound(a.begin(), a.end(), val; \u5bb9\u5668\u9002\u914d\u5668 stack\u3001queue \u548c priority_queue \u6ca1\u6709\u8fed\u4ee3\u5668 \u5c3e\u9012\u5f52( tail-recursive )\uff1a\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory() // \u5c3e\u9012\u5f52\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 } function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory()\uff0c\u5c0f\u548c\u5c1a\u542c\u4e86\uff0c\u627e\u4e86\u5757\u8c46\u8150\u649e\u6b7b\u4e86 // \u975e\u5c3e\u9012\u5f52\uff0c\u4e0b\u4e00\u4e2a\u51fd\u6570\u7ed3\u675f\u4ee5\u540e\u6b64\u51fd\u6570\u8fd8\u6709\u540e\u7eed\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u5b58\u672c\u8eab\u7684\u73af\u5883\u4ee5\u4f9b\u5904\u7406\u8fd4\u56de\u503c\u3002 } string\u52a0\u6cd5\u7528\u201c+\u201d\u5f88\u8017\u65f6 \u7528append()\u548cpush_back()\u65b9\u6cd5\u66f4\u597d \u4f20\u5f15\u7528\u901f\u5ea6\u8981\u5feb\u5f88\u591a \u5b57\u7b26\u4e32 tmp.substr(start, num) tmp.erase(tmp.size()-word.size()-1, word.size()+1); \u5220\u9664\u5012\u6570k\u4e2a\u5143\u7d20 tmp.erase(tmp.size()-k, k) \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u5e38\u7528\u51fd\u6570\uff1a \u00b6 //range [first,last) //parameters (first, last, val) //return iterator lower_bound (); //first position that not less than the value upper_bound (); //first position that greater than the value // lower_bound/upper_bound example #include <iostream> // std::cout #include <algorithm> // std::lower_bound, std::upper_bound, std::sort #include <vector> // std::vector int main () { int myints [] = { 10 , 20 , 30 , 30 , 20 , 10 , 10 , 20 }; std :: vector < int > v ( myints , myints + 8 ); // 10 20 30 30 20 10 10 20 std :: sort ( v . begin (), v . end ()); // 10 10 10 20 20 20 30 30 std :: vector < int >:: iterator low , up ; low = std :: lower_bound ( v . begin (), v . end (), 20 ); // ^ up = std :: upper_bound ( v . begin (), v . end (), 20 ); // ^ std :: cout << \"lower_bound at position \" << ( low - v . begin ()) << '\\n' ; std :: cout << \"upper_bound at position \" << ( up - v . begin ()) << '\\n' ; return 0 ; } \u7b97\u6cd5\u8d44\u6e90 \u00b6 LeetBook + Top100 + \u516c\u53f8\u4e13\u9898 + \u5251\u6307offer + \u9762\u8bd5\u91d1\u5178 + \u725b\u5ba2 \u529b\u6263\u52a0\u52a0 \u7b97\u6cd5\u6a21\u677f\u63d2\u4ef6 \u7b97\u6cd5\u7b14\u8bb0+\u7b97\u6cd54+\u5de6\u7a0b\u4e91\u6700\u4f18\u89e3 PAT labuladong AcWing","title":"\u7b97\u6cd5\u7cfb\u7edf\u590d\u4e60"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_1","text":"\u6a21\u677f \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"\u7ecf\u5178\u9762\u8bd5\u5408\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_2","text":"\u7b97\u6cd5 - Algorithms \u6392\u5e8f\u7b97\u6cd5\uff1a\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f \u641c\u7d22\u7b97\u6cd5\uff1a\u56de\u6eaf\u3001\u9012\u5f52\u3001\u526a\u679d\u6280\u5de7 \u56fe\u8bba\uff1a\u6700\u77ed\u8def\u3001\u6700\u5c0f\u751f\u6210\u6811\u3001\u7f51\u7edc\u6d41\u5efa\u6a21 \u52a8\u6001\u89c4\u5212\uff1a\u80cc\u5305\u95ee\u9898\u3001\u6700\u957f\u5b50\u5e8f\u5217\u3001\u8ba1\u6570\u95ee\u9898 \u57fa\u7840\u6280\u5de7\uff1a\u5206\u6cbb\u3001\u500d\u589e\u3001\u4e8c\u5206\u3001\u8d2a\u5fc3 \u6570\u636e\u7ed3\u6784 - Data Structures \u6570\u7ec4\u4e0e\u94fe\u8868\uff1a\u5355 / \u53cc\u5411\u94fe\u8868\u3001\u8df3\u821e\u94fe \u6808\u4e0e\u961f\u5217 \u6811\u4e0e\u56fe\uff1a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u5e76\u67e5\u96c6 \u54c8\u5e0c\u8868 \u5806\uff1a\u5927 / \u5c0f\u6839\u5806\u3001\u53ef\u5e76\u5806 \u5b57\u7b26\u4e32\uff1a\u5b57\u5178\u6811\u3001\u540e\u7f00\u6811","title":"\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_3","text":"","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_4","text":"","title":"\u4e00\u3001\u5feb\u901f\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_5","text":"","title":"\u4e8c\u3001\u5806\u6392"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_6","text":"","title":"\u4e09\u3001\u63d2\u5165\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#leetcode480","text":"//test4 //C++ upper_bound() lower_bound() //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 #include <iostream> #include <algorithm> #include <vector> #include <unordered_map> #include <string> #include <deque> using namespace std ; int main () { vector < int > nums = { 1 , 4 , 2 , 3 , 5 , 8 }; int k = 5 ; vector < double > ans ; int left = 0 ; int right = k ; deque < long long > window ; for ( int i = 0 ; i < k ; i ++ ){ //begin() refer to the first element //end() refer to the pass-the-end element //deque\u4e3a\u7a7a\u65f6 end()\u548cbegin()\u4e00\u6837 window.end()-window.begin()=0 //deque\u4e0d\u4e3a\u7a7a\u65f6 \u4e3a\u957f\u5ea6 //upper_bound\u6ca1\u627e\u5230\u65f6 \u5c31\u662f\u5728wi ndow.end()\u7684\u4f4d\u7f6e \u540c\u65f6\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u548cwindow.end()\u4e00\u6837\u4e3a\u7a7a \u53ea\u6709\u5728\u63d2\u5165\u64cd\u4f5c\u540e\u624d\u6709\u503c deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); cout << ( window . end () - window . begin ()) << \" \" <<* ( insert_p ) << \" \" << ( insert_p - window . begin ()) << endl ; window . insert ( insert_p , nums [ i ]); } ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } cout << ans [ 0 ] << endl ; return 0 ; }","title":"leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_7","text":"","title":"\u56db\u3001\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_8","text":"","title":"\u4e94\u3001\u5192\u6ce1\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_9","text":"","title":"\u516d\u3001\u9009\u62e9\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_10","text":"","title":"\u641c\u7d22"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#dfs","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.DFS+\u56de\u6eaf+\u526a\u679d \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.DFS+\u6811 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 3.DFS+\u7f51\u683c\u578b \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.DFS+\u56fe \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 46. \u5168\u6392\u5217 \ud83e\udde1&&\ud83d\udca5 \u2160 1 78. \u5b50\u96c6 \ud83e\udde1&&\ud83d\udca5 \u2160 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 200. \u5c9b\u5c7f\u6570\u91cf \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 \u2162 1 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \ud83e\udde1 \u2162 1 \u56de\u6eaf\u6a21\u677f\u9898\uff1a \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 vector < string > permutation ( string s ) { vector < string > ans ; dfs ( s , ans , 0 ); return ans ; } void dfs ( string s , vector < string >& ans , int depth ){ if ( depth >= s . size () -1 ) { ans . push_back ( s ); return ; } unordered_set < char > used ; for ( int i = depth ; i < s . size (); ++ i ){ if ( used . find ( s [ i ]) != used . end ()) continue ; used . insert ( s [ i ]); swap ( s [ depth ], s [ i ]); dfs ( s , ans , depth + 1 ); swap ( s [ i ], s [ depth ]); } } 46. \u5168\u6392\u5217 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 //\u6ce8\u91ca\u90e8\u5206\u662f\u770b\u9898\u89e3\u5199\u7684 //\u672a\u6ce8\u91ca\u90e8\u5206\u662f\u6309\u7167 \u5251\u6307offer38.\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u90a3\u9898\u6a21\u677f\u5199\u7684.. //\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a vector < vector < int >> permute ( vector < int >& nums ) { vector < vector < int > > ans ; // vector<int> res; // vector<int> used(nums.size(), 0); // helper(ans, nums, res, used); helper ( ans , nums , 0 ); return ans ; } // void helper(vector<vector<int> >& ans,vector<int>& nums, vector<int>& res, vector<int>& used){ // if(res.size()==nums.size()){ // ans.push_back(res); // return; // } // for(int i=0;i<nums.size();++i){ // if(used[i]!=0) continue; // else{ // res.push_back(nums[i]); // used[i] = 1; // helper(ans, nums, res, used); // res.pop_back(); // used[i]=0; // } // } // } void helper ( vector < vector < int > >& ans , vector < int >& nums , int depth ){ if ( depth == nums . size () -1 ){ ans . push_back ( nums ); return ; } unordered_set < int > used ; for ( int i = depth ; i < nums . size (); ++ i ){ if ( used . find ( nums [ i ]) != used . end ()) continue ; used . insert ( nums [ i ]); swap ( nums [ depth ], nums [ i ]); helper ( ans , nums , depth + 1 ); swap ( nums [ depth ], nums [ i ]); } } \u7f51\u683c DFS \u904d\u5386\u7684\u57fa\u672c\u6846\u67b6 \u53c2\u8003 void dfs ( vector < vector < int > >& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 dfs ( grid , r + 1 , c ); dfs ( grid , r -1 , c ); dfs ( grid , r , c -1 ); dfs ( grid , r , c + 1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int > >& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size ; } 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef int maxAreaOfIsland ( vector < vector < int >>& grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . size (); ++ i ){ for ( int j = 0 ; j < grid [ 0 ]. size (); ++ j ){ if ( grid [ i ][ j ] == 1 ){ int r = dfs ( grid , i , j ); ans = max ( ans , r ); } } } return ans ; } int dfs ( vector < vector < int >>& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return 0 ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return 0 ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 return 1 + dfs ( grid , r + 1 , c ) + dfs ( grid , r -1 , c ) + dfs ( grid , r , c + 1 ) + dfs ( grid , r , c -1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int >>& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size (); }","title":"\u4e00\u3001DFS"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#bfs","text":"\u5c42\u5e8f\u904d\u5386\uff1a \u300cBFS \u904d\u5386\u300d\u3001\u300c\u5c42\u5e8f\u904d\u5386\u300d\u3001\u300c\u6700\u77ed\u8def\u5f84\u300d\u5b9e\u9645\u4e0a\u662f\u9012\u8fdb\u7684\u5173\u7cfb\u3002\u5728 BFS \u904d\u5386\u7684\u57fa\u7840\u4e0a\u533a\u5206\u904d\u5386\u7684\u6bcf\u4e00\u5c42\uff0c\u5c31\u5f97\u5230\u4e86\u5c42\u5e8f\u904d\u5386\u3002\u5728\u5c42\u5e8f\u904d\u5386\u7684\u57fa\u7840\u4e0a\u8bb0\u5f55\u5c42\u6570\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u77ed\u8def\u5f84\u3002","title":"\u4e8c\u3001BFS"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_11","text":"\u4e00\u822c\u7528\u4e8e\u6709\u5e8f\u6570\u7ec4\u6216BST, \u4e8c\u5206\u67e5\u627e\u6548\u7387\u5f88\u9ad8O(logn)","title":"\u4e09\u3001\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_12","text":"\u5927\u591a\u6570\u9012\u5f52\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u91cd\u5199 \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u80cc\u5305\u95ee\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u52a8\u6001\u89c4\u5212\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83d\udc9a\ud83e\udde1 && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 72. \u7f16\u8f91\u8ddd\u79bb \ud83e\udde1 && \ud83d\udca5 \u2160 1 221. \u6700\u5927\u6b63\u65b9\u5f62 \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \ud83d\udc9a && \ud83d\udc8c \u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 72. \u7f16\u8f91\u8ddd\u79bb \u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 //\u4f7f\u7528dpTable //\u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a //\u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b int minDistance ( string word1 , string word2 ) { int m = word1 . size (); int n = word2 . size (); vector < vector < int > > dp ( m + 1 , vector < int > ( n + 1 )); for ( int i = 0 ; i <= m ; ++ i ) dp [ i ][ 0 ] = i ; for ( int j = 0 ; j <= n ; ++ j ) dp [ 0 ][ j ] = j ; for ( int i = 1 ; i <= m ; ++ i ){ for ( int j = 1 ; j <= n ; ++ j ){ //\u5f53\u524d\u5b57\u7b26\u4e32\u76f8\u7b49 \u5219\u53cc\u6307\u9488\u90fd\u524d\u79fb if ( word1 [ i -1 ] == word2 [ j -1 ]) dp [ i ][ j ] = dp [ i -1 ][ j -1 ]; else dp [ i ][ j ] = min ( min ( dp [ i -1 ][ j ] + 1 , dp [ i ][ j -1 ] + 1 ), dp [ i -1 ][ j -1 ] + 1 ); } } return dp [ m ][ n ]; } \u53c2\u8003","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_13","text":"","title":"\u57fa\u7840\u6280\u5de7"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_14","text":"","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_15","text":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57","title":"\u53cc\u6307\u9488"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_16","text":"\u603b\u7ed3\uff1a \u6ed1\u52a8\u7a97\u53e3+\u53cc\u6307\u9488+hash\u8868 \uff08\u6216\u8005unordered_set\uff09\u5e38\u5e38\u7ed3\u5408\u5728\u4e00\u8d77 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 \u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u7b80\u5355 && \u540c3 2 \u221a \u4e8c\u6b21AC 8min 2021-3-11 \u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 2 \u770b\u89e3\u7b54 2021-3-11 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 1 \u770b\u89e3\u7b54 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 && HOT100 2 \u221a \u4e00\u6b21AC 10min 2021-3-11 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u4e2d\u7b49 && HOT100 2 \u770b\u89e3\u7b54 2021-3-11 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 424. \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26 \u4e2d\u7b49 1 480. \u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u56f0\u96be 1 \u770b\u89e3\u7b54 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7b80\u5355 2 ac 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 t \u3002\u8fd4\u56de s \u4e2d\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c s \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u6ce8\u610f\uff1a\u5982\u679c s \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"ADOBECODEBANC\", t = \"ABC\" \u8f93\u51fa\uff1a\"BANC\" \u6ed1\u52a8\u7a97\u53e3\u601d\u60f3\uff1a \u603b\u7ed3(Conclusion) \u2460\u7a97\u53e3\u7531\u4e24\u4e2a\u6307\u9488\u6784\u6210\uff0c\u4e00\u4e2a\u5de6\u6307\u9488left\uff0c\u4e00\u4e2a\u53f3\u6307\u9488right\uff0c\u7136\u540e[left,right]\u8868\u793a\u7684\u7d22\u5f15\u8303\u56f4\u662f\u4e00\u4e2a\u7a97\u53e3\u4e86\u3002 \u2461\u53f3\u6307\u9488right\u7684\u529f\u80fd\u662f\u7528\u6765\u6269\u5c55\u7a97\u53e3\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u6ca1\u6709\u8fbe\u5230\u9898\u76ee\u8981\u6c42\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u79fb\u52a8\u53f3\u6307\u9488right\u76f4\u5230\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u7b2c\u4e00\u6b21\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e3a\u6b62\u3002 \u2462\u5de6\u6307\u9488left\u7684\u529f\u80fd\u662f\u7528\u6765\u7f29\u5c0f\u7a97\u53e3\u7684\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u5df2\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u6216\u591a\u4e8e\u9898\u76ee\u6761\u4ef6\u65f6\uff08\u7a97\u53e3\u6ea2\u51fa\uff09\uff0c\u6211\u4eec\u7f29\u5c0f\u7a97\u53e3\uff0c\u4e5f\u5c31\u662f\u5de6\u6307\u9488left\u9700\u8981\u53f3\u79fb\u76f4\u5230\u7a97\u53e3\u6761\u4ef6\u4e0d\u6ee1\u8db3\u4e3a\u6b62\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5e76\u66f4\u65b0\u76ee\u524d\u4e3a\u6b62\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7a97\u53e3\u8bb0\u5f55\u3002\u4e4b\u540e\uff0c\u518d\u6b21\u6269\u5c55\u53f3\u6307\u9488right\uff0c\u4f7f\u5f97\u7a97\u53e3\u6ee1\u8db3\u9898\u76ee\u7684\u6761\u4ef6\u3002 \u6ce8\uff1a\u6ed1\u52a8\u7a97\u53e3\u7528\u6765\u5904\u7406\u8fde\u7eed\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684\u8fde\u7eed\u533a\u95f4\u7684\u6027\u8d28\uff08\u957f\u5ea6\u7b49\uff09\u95ee\u9898\u7684\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u8d77\u59cb\u4e8e\u539f\u70b9\uff0c\u5e76\u4e00\u524d\u4e00\u540e\u5411\u7ec8\u70b9\u524d\u8fdb\u3002 \u6846\u67b6 func movingWindow () { /* 1. \u521d\u59cb\u5316\u7a97\u53e3\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bb0\u5f55\u7a97\u53e3\u5185\u7684\u4fe1\u606f */ first , last := 0 , 0 // \u7a97\u53e3\u7684\u5de6\u53f3\u8fb9\u754c for last < len ( s ) { /* 2. \u628a last \u6307\u5411\u7684\u5143\u7d20\u52a0\u5165\u7a97\u53e3 */ for first < len ( s ) && /* 3. \u5224\u65ad\u5f53\u524d\u7a97\u53e3\u5185\u7684\u5143\u7d20\u662f\u5426\u7b26\u5408\u6761\u4ef6 */ { /* 4.a \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5c0f\u503c\u7684\u4ee3\u7801 */ /* 5. \u628a first \u6307\u5411\u7684\u5143\u7d20\u79fb\u51fa\u7a97\u53e3 */ first ++ } /* 4.b \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5927\u503c\u7684\u4ee3\u7801 */ last ++ } } leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528multiset\u6765\u6c42\u51fa\u4e2d\u4f4d\u6570\uff08\u56e0\u4e3amultiset\u5e95\u5c42\u4f7f\u7528\u7684\u662f\u4e8c\u53c9\u641c\u7d22\u6811BST\u7684\u6570\u636e\u7ed3\u6784\uff0c\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u5229\u7528multiset\u7684\u81ea\u6392\u5e8f\u529f\u80fd\u53ef\u4ee5\u5f88\u5feb\u6c42\u51fa\u4e2d\u4f4d\u6570\u3002multiset\u4f5c\u4e3a\u5927\u5c0f\u4e3ak\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u6bcf\u6b21\u63d2\u5165\u65b0\u63d2\u5165\u5143\u7d20\uff0c\u9700\u5c06\u7a97\u53e3\u79fb\u52a8\u3002\u82e5\u65b0\u63d2\u5165\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u5219\u9700\u8981\u5c06mid\u5de6\u79fb\uff08\u56e0\u4e3a\u65b0\u63d2\u5165\u7684\u5143\u7d20\u6bd4\u4e2d\u4f4d\u6570\u5c0f\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u80af\u5b9a\u4f1a\u88ab\u62c9\u4f4e\uff09\uff1b\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u82e5\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5c06mid\u53f3\u79fb\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5220\u9664\u5143\u7d20\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528erase\u6839\u636evalue\u6765\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5220\u9664\u591a\u4e2a\u503c\u4e00\u6837\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u7528lower_bound\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u76ee\u6807\u503c\u7684\u6570\uff0c\u901a\u8fc7iterator\u6765\u5220\u6389\u786e\u5b9a\u7684\u4e00\u4e2a\u6570\u5b57\u3002 \u5173\u4e8enext()\u4e0eprev()\u51fd\u6570\u7684\u89e3\u91ca\uff1a Here //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 class Solution { public : vector < double > medianSlidingWindow ( vector < int >& nums , int k ) { vector < double > ans ; if ( nums . size () == 0 ) return ans ; int left = 0 ; int right = k ; //\u7531\u4e8e\u53ef\u80fdtestcase [2147483647,2147483647] k=2 //\u53d1\u751f\u6ea2\u51fa \u6240\u4ee5window\u8bbe\u7f6e\u4e3along long\u7c7b\u578b deque < long long > window ; //\u63d2\u5165\u6392\u5e8f //\u901a\u8fc7upper_bound lower_bound(\u5e95\u5c42\u90fd\u662f\u4e8c\u5206\u6cd5\u5b9e\u73b0)\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668 //lower_bound\u51c6\u786e\u627e\u5230\u8be5\u5220\u7684\u8282\u70b9 upper_bound\u627e\u5230\u8be5\u63d2\u5165\u7684\u8282\u70b9 for ( int i = 0 ; i < k ; i ++ ){ deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); //deque\u7684insert\u8981\u4f20\u8fed\u4ee3\u5668\u548cval\u3002 window . insert ( insert_p , nums [ i ]); } //ans\u4e3adouble\u7c7b\u578b \u9664\u4ee52.0\u4f7flong long\u53d8\u4e3adouble ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); //erase\u4f1a\u5220\u9664\u591a\u4e2a\u540c\u503c\u7684 \u6240\u4ee5\u5fc5\u987b\u4f20\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } return ans ; } };","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_17","text":"\u53c2\u8003 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_18","text":"","title":"\u5206\u6cbb"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_19","text":"","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_20","text":"","title":"\u5355\u8c03\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_21","text":"","title":"\u601d\u7ef4\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_22","text":"\u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 54. \u87ba\u65cb\u77e9\u9635 \u4e2d\u7b49 2 \u221a \u4e00\u6b21ac 10min 2021-3-15 59. \u87ba\u65cb\u77e9\u9635 II \u7b80\u5355 2 \u221a \u4e00\u6b21ac 8min 2021-3-16","title":"\u77e9\u9635\u76f8\u5173"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#0107","text":"\u7ed9\u4f60\u4e00\u5e45\u7531 N \u00d7 N \u77e9\u9635\u8868\u793a\u7684\u56fe\u50cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u3002\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\uff0c\u5c06\u56fe\u50cf\u65cb\u8f6c 90 \u5ea6\u3002 \u4e0d\u5360\u7528\u989d\u5916\u5185\u5b58\u7a7a\u95f4\u80fd\u5426\u505a\u5230\uff1f \u65cb\u8f6c270\u00b0\u662f\u8f6c\u7f6e\u3002\u65cb\u8f6c180\u00b0\u662f\u5148\u4e0a\u4e0b\u5bf9\u79f0\uff0c\u518d\u5de6\u53f3\u5bf9\u79f0\u3002\u65cb\u8f6c90\u00b0\u662f\u5148\u8f6c\u7f6e,\u7136\u540e\u5de6\u53f3\u5bf9\u79f0\u8fc7\u53bb\u3002 \u76f8\u540c\u9898\uff1a 48. \u65cb\u8f6c\u56fe\u50cf","title":"\u9762\u8bd5\u9898 01.07. \u65cb\u8f6c\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#0108","text":"\u7f16\u5199\u4e00\u79cd\u7b97\u6cd5\uff0c\u82e5M \u00d7 N\u77e9\u9635\u4e2d\u67d0\u4e2a\u5143\u7d20\u4e3a0\uff0c\u5219\u5c06\u5176\u6240\u5728\u7684\u884c\u4e0e\u5217\u6e05\u96f6\u3002","title":"\u9762\u8bd5\u9898 01.08. \u96f6\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#54","text":"\u7ed9\u4f60\u4e00\u4e2a m \u884c n \u5217\u7684\u77e9\u9635 matrix \uff0c\u8bf7\u6309\u7167 \u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f \uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002","title":"54. \u87ba\u65cb\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#221","text":"\u5728\u4e00\u4e2a\u7531 '0' \u548c '1' \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b '1' \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002","title":"221. \u6700\u5927\u6b63\u65b9\u5f62"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_23","text":"","title":"\u6570\u5b66\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#offer-62","text":"","title":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#470-rand7-rand10","text":"(randx()-1)Y + randx() \u80fd\u968f\u673a\u751f\u6210[1,x*Y]\u5185\u7684\u968f\u673a\u6570","title":"470. \u7528 Rand7() \u5b9e\u73b0 Rand10()"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_24","text":"\u4f4d\u8fd0\u7b97\u77e5\u8bc6\u70b9\uff1a \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II \u2b50 \ud83e\udde1 && \ud83d\udc8c \u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \ud83d\udc9a && \ud83d\udc8c 78. \u5b50\u96c6 \ud83e\udde1 && \ud83d\udca5 2\u2611\ufe0f ac 5min 2021-3-19 169. \u591a\u6570\u5143\u7d20 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u2705 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 1min 2021-3-19 338. \u6bd4\u7279\u4f4d\u8ba1\u6570 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 461. \u6c49\u660e\u8ddd\u79bb \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_25","text":"\u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 146. LRU \u7f13\u5b58\u673a\u5236 \ud83d\udc34\u2b50 \ud83e\udde1 && \ud83d\udca5 1 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \ud83e\udde1 && \ud83d\udca5 1","title":"\u8bbe\u8ba1\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_26","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#1","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Nsum \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5Easy && TOP\u2705\ud83d\udc34\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"1.\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#2","text":"\u603b\u7ed3\uff1a 1.\u4e86\u89e3\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9a\u4e49\u94fe\u8868 2.\u5b66\u4f1a\u4f7f\u7528dummyHead \u8fd9\u6837\u80fd\u5f88\u597d\u5904\u7406\u8fb9\u754c\u60c5\u51b5\u3002\u5220\u9664\u94fe\u8868\u8282\u70b9\u7684\u9898\u578b\u4e2d\u5c24\u4e3a\u5178\u578b\u5982\uff1a19\u3001203 3.**\u5220\u9664\u94fe\u8868\u8282\u70b9**\u7c7b\u578b\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u8bb0\u5f97\u91ca\u653e\u8282\u70b9\u5185\u5b58\u3002\u5426\u5219\u4f1a\u6709\u5185\u5b58\u6cc4\u6f0f\u3002 \u598282\u300183 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u53cd\u8f6c\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u56de\u6587\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u94fe\u8868\u8282\u70b9\u5220\u9664 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.\u5408\u5e76\u5347\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 5.\u6392\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 6.\u73af\u5f62\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 7.\u94fe\u8868\u6570\u636e\u7ed3\u6784 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 8.\u94fe\u8868\u8fd0\u7b97 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 Easy && TOP\u2705\ud83d\udc34 \u2160 2 \uff08\u8fed\u4ee3\u4e0e\u9012\u5f52\uff09 61. \u65cb\u8f6c\u94fe\u8868 Medium \u2160 1 ac(\u8fb9\u754c\u8c03\u8bd5\u4e86\u4e00\u4f1a) 15min 2021-3-18 92. \u53cd\u8f6c\u94fe\u8868 II Medium \u2160 1\u2611\ufe0f ac 30min 2021-3-18 234. \u56de\u6587\u94fe\u8868 Easy && HOT100 \u2161 2\u2611\ufe0f ac 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 Easy && HOT100 \u2162 2\u2611\ufe0f ac 5min 2021-3-18 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II Med \u2162 1\u2611\ufe0f ac 10min 2021-3-18 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 Easy \u2162 1\u2611\ufe0f ac 3min 2021-3-18 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 Easy && HOT100 \u2163 2\u2611\ufe0f ac 5min 2021-3-10 23. \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 \u2b50 Hard && HOT100 \u2163 1 ac 148. \u6392\u5e8f\u94fe\u8868 \u2b50 Medium && HOT100 \u2164 1 \u770b\u89e3\u7b54 ... ... 141. \u73af\u5f62\u94fe\u8868 Easy && HOT100 \u2165 2\u2611\ufe0f ac 2min 2021-3-18 142. \u73af\u5f62\u94fe\u8868 II Medium && HOT100 \u2165 2\u2611\ufe0f ac 5min 160. \u76f8\u4ea4\u94fe\u8868 (\u540coffer52) Easy && HOT100 \u2165 2\u2611\ufe0f ac \u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u2b50 \u5251\u6307offer \u2166 1 \u770b\u89e3\u7b54 2. \u4e24\u6570\u76f8\u52a0 \u2b50 Med && HOT100 \u2167 1 ac 86. \u5206\u9694\u94fe\u8868 Med \u2167 1 ac 20min 2021-3-18","title":"2.\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#3","text":"\u5b57\u7b26\u4e32\u80fd\u52a8\u5f52\u7684\u522b\u56de\u6eaf\uff0c\u5bb9\u6613\u8d85\u65f6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u5b57\u7b26\u4e32+\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.\u56de\u6587\u5b50\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u5b57\u7b26\u4e32+\u6808 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u5b57\u7b26\u4e32+\u56de\u6eaf\uff08\u7ec4\u5408\u53ca\u5207\u5206\u95ee\u9898\uff09 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u5b57\u7b26\u4e32+\u5206\u7c7b\u8ba8\u8bba \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 ... ... 72. \u7f16\u8f91\u8ddd\u79bb Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 Medium \u2160 1 \u56de\u6eaf\u8d85\u65f6... 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 Medium \u2161 2\u2611\ufe0f \u4e00\u6b21ac 10min 131. \u5206\u5272\u56de\u6587\u4e32 Hard \u2161 1 \u770b\u89e3\u7b54 132. \u5206\u5272\u56de\u6587\u4e32 II Hard && \u51fa\u8fc7 \u2160&&\u2161 1 \u4e00\u6b21ac 647. \u56de\u6587\u5b50\u4e32 Medium \u2161 1 \u4e00\u6b21ac \u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 Medium \u2164 1 ac 45min 394. \u5b57\u7b26\u4e32\u89e3\u7801 Medium \u2162&&\u2164 1 \u770b\u89e3\u7b54 \u5b57\u7b26\u4e32\u6392\u5e8f \u5355\u8bcd\u67e5\u627e\u6811 \u5b50\u5b57\u7b26\u4e32\u67e5\u627e \u6b63\u5219\u8868\u8fbe\u5f0f \u6570\u636e\u538b\u7f29 \u5b57\u5178\u6811 \u524d\u7f00(\u540e\u7f00)\u6811 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c KMP 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u7c7b\u4f3c\u9898\uff1a \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c \u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5 s2 \u662f\u5426\u4e3a s1 \u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c waterbottle \u662f erbottlewat \u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002 **\u89e3\u9898\u601d\u8def\uff1a**\u65b0\u5b9a\u4e49ss=s2+s2;\u7136\u540e\u5224\u65ads1\u662f\u5426\u662fss\u5b50\u4e32(\u66b4\u529b\u6216KMP\u6216\u81ea\u5e26api) 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002","title":"3.\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#4","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u8bbe\u8ba1\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u6808\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u2b50 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \ud83d\udc34 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c&&\ud83d\udc34 \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \ud83d\udc9a && \ud83d\udc8c \u2160 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \ud83e\udde1 && \ud83d\udc8c \u2160 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 224. \u57fa\u672c\u8ba1\u7b97\u5668 227. \u57fa\u672c\u8ba1\u7b97\u5668 II \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762","title":"4.\u6808\u4e0e\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#5","text":"**\u603b\u7ed3\uff1a**\u4e8c\u53c9\u6811\u9898\u76ee\u4e0e**\u9012\u5f52\u3001\u56db\u79cd\u904d\u5386\u548cDFS\u641c\u7d22**\u76f8\u5173\u6027\u975e\u5e38\u5927\u3002\u540c\u65f6\u5f88\u591a\u9898\u76ee\u8981\u6c42**\u8fed\u4ee3\u548c\u9012\u5f52**\u4e24\u79cd\u65b9\u6cd5 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u4e8c\u53c9\u6811\u7684\u56db\u79cd\u904d\u5386 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u4e8c\u53c9\u6811\u4e0e\u9012\u5f52 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u4e8c\u53c9\u6811\u4e0e\u641c\u7d22DFS \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u4e8c\u53c9\u6811\u5e8f\u5217\u5316 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u4e8c\u53c9\u6811\u4e0e\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1\u2611\ufe0f 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1 98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 2\u2611\ufe0f ac 10min 2021-3-18 617. \u5408\u5e76\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 \u2161 1\u2611\ufe0f ac 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 &&\ud83d\udc8c \u2161 2 ac(\u9012\u5f52+\u8fed\u4ee3) 10min 2021-3-18 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 \u2b50 Med \u2162 1 \u770b\u89e3\u7b54 99. \u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 \ud83d\udc98 \u2162 1 \u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u2b50 \ud83d\udc98 && \ud83d\udca5 &&\ud83d\udc8c \u2163 1 \u770b\u89e3\u7b54 ... 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 \u2b50 \ud83e\udde1 && \u7c7b\u4f3coffer 37 \u2163 1 \u770b\u89e3\u7b54(\u4e0d\u592a\u4f1a) ... 2021-3-12 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II \u2b50 \ud83e\udde1 \u2164 1 \u83ab\u91cc\u65af\u904d\u5386 \u4e8c\u53c9\u641c\u7d22\u6811 \u5e73\u8861\u4e8c\u53c9\u6811 **\u83ab\u91cc\u65af\u904d\u5386:**\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u7684\u65b9\u5f0f\u90fd\u4f7f\u7528\u4e86\u8f85\u52a9\u7684\u7a7a\u95f4\uff0c\u800c\u83ab\u91cc\u65af\u904d\u5386\u7684\u4f18\u70b9\u662f\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8f85\u52a9\u7a7a\u95f4\u3002\u7f3a\u70b9\u662f\u6539\u53d8\u4e86\u6574\u4e2a\u6811\u7684\u7ed3\u6784\u3002 \u4e8c\u53c9\u641c\u7d22\u6811\uff1a \u67e5\u627e \u63d2\u5165 \u5efa\u6811 \u5220\u9664","title":"5.\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_27","text":"\u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II vector < TreeNode *> generateTrees ( int n ) { if ( n == 0 ) return vector < TreeNode *> ( 0 ); //\u4e3a0\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684\u5411\u91cf return helper ( 1 , n ); // } vector < TreeNode *> helper ( int start , int end ){ vector < TreeNode *> ans ; if ( start > end ){ ans . push_back ( NULL ); //\u4e00\u5b9a\u8981push\u4e00\u4e2aNULL\u8fdb\u53bb \u8fd9\u6837size\u81f3\u5c11\u4e3a1 \u5426\u5219\u540e\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5728\u4e00\u4e2a\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u7ee7\u7eed return ans ; } for ( int i = start ; i <= end ; ++ i ){ //i\u4ee3\u8868\u4e0d\u540c\u7684\u503c\u505a\u6839\u8282\u70b9 vector < TreeNode *> lefts = helper ( start , i -1 ); //\u5de6\u5b50\u6811\u96c6\u5408 vector < TreeNode *> rights = helper ( i + 1 , end ); //\u53f3\u5b50\u6811\u96c6\u5408 //\u4e0b\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5c31\u662f\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ec4\u5408\u60c5\u51b5 for ( int k = 0 ; k < lefts . size (); k ++ ){ //\u904d\u5386\u5de6\u5b50\u6811\u96c6\u5408 for ( int j = 0 ; j < rights . size (); j ++ ){ //\u904d\u5386\u53f3\u5b50\u6811\u96c6\u5408 TreeNode * root = new TreeNode ( i ); //\u521b\u5efa\u4e00\u4e2a\u5f53\u524d\u503c\u7684\u6839\u8282\u70b9 root -> left = lefts [ k ]; //\u9009\u53d6\u5de6\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5de6\u5b50\u6811 root -> right = rights [ j ]; //\u9009\u53d6\u53f3\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u53f3\u5b50\u6811 ans . push_back ( root ); //\u5c06\u5f53\u524d\u7684\u6811\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d } } } return ans ; } 99.\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 //\u8981\u6c42O(1)\u7a7a\u95f4 \u53ea\u80fdMorris\u904d\u5386 void recoverTree ( TreeNode * root ) { bool flag = false ; TreeNode * rt = root ; stack < TreeNode *> S ; TreeNode * pre = NULL ; //\u5b9a\u4e49\u4e00\u4e2a\u91ce\u6307\u9488\u65f6\u4e00\u5b9a\u8981\u58f0\u660e\u662fNULL TM\u7684\u88ab\u8fd9\u4e2a\u641e\u4e86\u4e00\u4e0b\u5348 \u64cd\u64cd\u64cd TreeNode * fi = NULL ; while ( rt || ! S . empty ()){ if ( rt != NULL ){ S . push ( rt ); rt = rt -> left ; } else { rt = S . top (); S . pop (); if ( pre != NULL ) { //\u7b2c\u4e00\u4e2a\u8981\u4ea4\u6362\u7684\u8282\u70b9 \u4ed6\u7684\u503c\u5c0f\u4e8e\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u3002 if ( flag == false && pre -> val >= rt -> val ) { flag = true ; fi = pre ; } //flag\u4e3atrue\u5219\u8bf4\u660e\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9 \u7b2c\u4e8c\u4e2a\u8981\u627e\u7684\u8282\u70b9\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u70b9 //1.\u8981\u4e48\u4ed6\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u503c\u5927\u4e8e\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u503c //2.\u8981\u4e48\u4ed6\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e86 \u9000\u51fawhile\u5faa\u73af\u76f4\u63a5\u4ea4\u4e92\u5373\u53ef if ( flag == true && rt -> val > fi -> val ) { swap ( fi -> val , pre -> val ); return ; } } pre = rt ; rt = rt -> right ; } } swap ( fi -> val , pre -> val ); return ; }","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_28","text":"\u516c\u5f0f\uff1a G ( n )= G (0)\u2217 G ( n \u22121)+ G (1)\u2217 G ( n \u22122)+...+ G ( n \u22121)\u2217 G (0) \u9002\u7528\u95ee\u9898\uff1a n\u5bf9\u62ec\u53f7\u6b63\u786e\u5339\u914d\u6570\u76ee \u51f8\u591a\u8fb9\u5f62\u4e09\u89d2\u5212\u5206 \u51fa\u6808\u6b21\u5e8f \u77e9\u9635\u8fde\u4e58\u62ec\u53f7\u5316\uff1a\u77e9\u9635\u8fde\u4e58\uff1a P=a1\u00d7a2\u00d7a3\u00d7\u2026\u2026\u00d7an\uff0c\u4f9d\u636e\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6539\u53d8\u5176\u987a\u5e8f\uff0c\u53ea\u7528\u62ec\u53f7\u8868\u793a\u6210\u5bf9\u7684\u4e58\u79ef\uff0c\u8bd5\u95ee\u6709\u51e0\u79cd\u62ec\u53f7\u5316\u7684\u65b9\u6848\u3002\uff08 h(n) \u79cd\uff09 96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 //\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6570\u5b66\u95ee\u9898\u3002\u5c31\u662f\u6c42\u5361\u7279\u5170\u6570 int numTrees ( int n ) { vector < int > dp ( n + 1 ); dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < n + 1 ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) dp [ i ] += dp [ j ] * dp [ i -1 - j ]; return dp [ n ]; }","title":"\u5361\u7279\u5170\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#6","text":"\u603b\u7ed3\uff1a\u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a.... 207. \u8bfe\u7a0b\u8868 399. \u9664\u6cd5\u6c42\u503c const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; }","title":"6.\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#7hash","text":"\u603b\u7ed3\uff1aHash\u5e38\u4e0e\u53cc\u6307\u9488\u548c\u6ed1\u52a8\u7a97\u53e3\u7ec4\u5408\u3002\u5728\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u4e2d\u5c24\u4e3a\u5e38\u89c1\u3002 unordered_map\u67e5\u8be2\u624d\u662fO(1) map\u67e5\u8be2\u662fO(logn) \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Hash\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.Hash\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.Hash\u4e0e\u53cc\u6307\u9488/\u6ed1\u52a8\u7a97\u53e3 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.Hash\u8bbe\u8ba1 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 &&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 ac 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 \ud83e\udde1 && \ud83d\udca5 \u2160 1 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u2b50 \ud83d\udc98 && \ud83d\udca5 \u2160&& \u2162 2 \u770b\u89e3\u7b54 705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408 \ud83d\udc9a && \ud83d\udd05 1 \u770b\u89e3\u7b54 5min 2021-3-13 706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04 \ud83d\udc9a && \ud83d\udd05 1 \u4e24\u6b21ac 10min 2021-3-14","title":"7.Hash"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#8","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \ud83e\udde1&&\ud83d\udc8c \u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \ud83d\udc98&&\ud83d\udc8c 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"8.\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#9","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"9.\u5e76\u67e5\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_29","text":"","title":"\u7ecf\u9a8c\u79ef\u7d2f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_30","text":"\u6a21\u677f","title":"\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#io","text":"\u603b\u7ed3\uff1a\u53ef\u4ee5\u770b\u770bC++\u8f93\u5165\u8f93\u51fa\u5904\u7406 \u5c24\u5176\u662fstringstream \u548c getline\u7b49\u7528\u6cd5 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 C++:cin\u3001cin.getline()\u3001getline()\u7684\u7528\u6cd5 \u5f53 cin \u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u4f20\u9012\u5e76\u5ffd\u7565\u4efb\u4f55\u524d\u5bfc\u767d\u8272\u7a7a\u683c\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u5236\u8868\u7b26\u6216\u6362\u884c\u7b26\uff09\u3002\u4e00\u65e6\u5b83\u63a5\u89e6\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u5373\u5f00\u59cb\u9605\u8bfb\uff0c\u5f53\u5b83\u8bfb\u53d6\u5230\u4e0b\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5b83\u5c06\u505c\u6b62\u8bfb\u53d6\u3002 getline\u51fd\u6570\u53ef\u8bfb\u53d6\u6574\u884c\uff0c\u5305\u62ec\u524d\u5bfc\u548c\u5d4c\u5165\u7684\u7a7a\u683c\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u5bf9\u8c61\u4e2d\u3002 getline(cin,'\\n'); cin\u4e3a\u8f93\u5165\u6d41 '\\n'\u4e3a\u7ed3\u675f\u7b26 \u4e5f\u53ef\u5199\u4f5cgetline(str, tmp, ',') \u5c31\u662f\u8f93\u5165\u5b57\u7b26\u4e32\u4e3astr, \u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u4e3atmp \u3002','\u4e3a\u7ed3\u675f\u7b26 \u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0C++\u4e2d\u6ca1\u6709\u7684split\u65b9\u6cd5","title":"IO\u5904\u7406"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#c","text":"C++ Lambda\u8868\u8fbe\u5f0f \u53c2\u8003 auto \u5173\u952e\u5b57 \u53c2\u8003","title":"C++\u8bed\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_31","text":"\u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#7","text":"\u4f8b125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u8bb0\u4e00\u7b14 c++\u7684\u51e0\u4e2a\u5185\u7f6e\u51fd\u6570 islower(char c) \u662f\u5426\u4e3a\u5c0f\u5199\u5b57\u6bcd isupper(char c) \u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd isdigit(char c) \u662f\u5426\u4e3a\u6570\u5b57 isalpha(char c) \u662f\u5426\u4e3a\u5b57\u6bcd isalnum(char c) \u662f\u5426\u4e3a\u5b57\u6bcd\u6216\u8005\u6570\u5b57 toupper(char c) \u5b57\u6bcd\u5c0f\u8f6c\u5927 tolower(char c) \u5b57\u6bcd\u5927\u8f6c\u5c0f","title":"7\u4e2a\u5b57\u6bcd\u6570\u5b57\u5224\u65ad\u76f8\u5173\u7684\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#tips","text":"\u957f\u5ea6\u4e3ak\u7684\u6709\u5e8f\u5411\u91cf\u7684**\u4e2d\u4f4d\u6570\u6c42\u6cd5**\uff1a\u65e0\u8bba\u5947\u5076,\u90fd\u662f( num[k/2]+num[(k-1)/2])/2 \u4e5f\u5373**\u7d22\u5f15\u4e3a(size-1)/2\u548csize/2\u5904\u503c\u548c\u7684\u5e73\u5747** **\u4e2d\u95f4\u7684\u6570mid**\u4e00\u822c\u4e3ak/2,k\u4e3a\u5076\u6570\u65f6\u4e3a\u504f\u540e\u7684\u90a3\u4e00\u4e2a\u4e2d\u95f4\u6570 \u4e00\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5 \uff1amultiset window(nums.begin(),nums.begin()+k); \u521b\u5efaiterator\u5bf9\u8c61 \u3002\u5982 c++ vector<int> a(20,1); vector<int>::iterator tmp = upper_bound(a.begin(), a.end(), val; \u5bb9\u5668\u9002\u914d\u5668 stack\u3001queue \u548c priority_queue \u6ca1\u6709\u8fed\u4ee3\u5668 \u5c3e\u9012\u5f52( tail-recursive )\uff1a\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory() // \u5c3e\u9012\u5f52\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 } function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory()\uff0c\u5c0f\u548c\u5c1a\u542c\u4e86\uff0c\u627e\u4e86\u5757\u8c46\u8150\u649e\u6b7b\u4e86 // \u975e\u5c3e\u9012\u5f52\uff0c\u4e0b\u4e00\u4e2a\u51fd\u6570\u7ed3\u675f\u4ee5\u540e\u6b64\u51fd\u6570\u8fd8\u6709\u540e\u7eed\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u5b58\u672c\u8eab\u7684\u73af\u5883\u4ee5\u4f9b\u5904\u7406\u8fd4\u56de\u503c\u3002 } string\u52a0\u6cd5\u7528\u201c+\u201d\u5f88\u8017\u65f6 \u7528append()\u548cpush_back()\u65b9\u6cd5\u66f4\u597d \u4f20\u5f15\u7528\u901f\u5ea6\u8981\u5feb\u5f88\u591a \u5b57\u7b26\u4e32 tmp.substr(start, num) tmp.erase(tmp.size()-word.size()-1, word.size()+1); \u5220\u9664\u5012\u6570k\u4e2a\u5143\u7d20 tmp.erase(tmp.size()-k, k) \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b","title":"TIPs"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_32","text":"//range [first,last) //parameters (first, last, val) //return iterator lower_bound (); //first position that not less than the value upper_bound (); //first position that greater than the value // lower_bound/upper_bound example #include <iostream> // std::cout #include <algorithm> // std::lower_bound, std::upper_bound, std::sort #include <vector> // std::vector int main () { int myints [] = { 10 , 20 , 30 , 30 , 20 , 10 , 10 , 20 }; std :: vector < int > v ( myints , myints + 8 ); // 10 20 30 30 20 10 10 20 std :: sort ( v . begin (), v . end ()); // 10 10 10 20 20 20 30 30 std :: vector < int >:: iterator low , up ; low = std :: lower_bound ( v . begin (), v . end (), 20 ); // ^ up = std :: upper_bound ( v . begin (), v . end (), 20 ); // ^ std :: cout << \"lower_bound at position \" << ( low - v . begin ()) << '\\n' ; std :: cout << \"upper_bound at position \" << ( up - v . begin ()) << '\\n' ; return 0 ; }","title":"\u5e38\u7528\u51fd\u6570\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_33","text":"LeetBook + Top100 + \u516c\u53f8\u4e13\u9898 + \u5251\u6307offer + \u9762\u8bd5\u91d1\u5178 + \u725b\u5ba2 \u529b\u6263\u52a0\u52a0 \u7b97\u6cd5\u6a21\u677f\u63d2\u4ef6 \u7b97\u6cd5\u7b14\u8bb0+\u7b97\u6cd54+\u5de6\u7a0b\u4e91\u6700\u4f18\u89e3 PAT labuladong AcWing","title":"\u7b97\u6cd5\u8d44\u6e90"}]}