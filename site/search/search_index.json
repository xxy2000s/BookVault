{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 \u83dc\u83dc","title":"\u524d\u8a00"},{"location":"#welcome-to-mkdocs","text":"\u83dc\u83dc","title":"Welcome to MkDocs"},{"location":"JavaAPI/","text":"Java\u5237\u9898 \u00b6 Java HashMap | \u83dc\u9e1f\u6559\u7a0b (runoob.com) String \u00b6 \u6570\u7ec4\u4f7f\u7528length\u53d6\u957f\u5ea6 string\u4f7f\u7528length()\u53d6\u957f\u5ea6 StringBuilder\u76f4\u63a5append(int) \u65e0\u9700\u8fdb\u884cint\u8f6cchar char\u6570\u7ec4\u8f6cstring\u200b new String(chars) \u8f93\u5165\u8f93\u51fa \u00b6 Scanner sc = new Scanner ( System . in ); String s = sc . next (); //\u5b57\u7b26\u4e32 double t = sc . nextDouble (); //\u6d6e\u70b9\u6570 String s = sc . nextLine (); //\u4e00\u884c \u5224\u65ad\u662f\u5426\u6709\u4e0b\u4e00\u4e2a\u8f93\u5165\uff0c\u7528 sc.hasNext() \u6216 sc.hasNextInt() \u6216 sc.hasNextDouble() \u6216 sc.hasNextLine() //\u5faa\u73af\u8f93\u5165\u6574\u6570 while ( in . hasNextInt ()){ int n = sc . nextInt (); } //\u5faa\u73af\u8f93\u5165\u5b57\u7b26 while ( in . hasNext ()){ } \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 nextInt() \u6216 next() \u4e4b\u540e\uff0c\u8981\u7528 nextLine()\uff0c\u9700\u624b\u52a8\u8c03\u7528. nextLine() \u5438\u6536\u6389\u56de\u8f66\u7b26\u6216\u7a7a\u683c\u3002\u4f46\u662f\u5982\u679c\u4e0d\u662f\u4ea4\u53c9\u4f7f\u7528\uff0c\u6bd4\u5982\u8fde\u7eed\u4f7f\u7528 next() \u6216 next() \u662f\u53ef\u4ee5\u81ea\u52a8\u5438\u6536\u6389\u7a7a\u683c\u6216\u56de\u8f66\u7b26\u7684\u3002 nextInt() \u53ea\u8bfb\u53d6\u6574\u6570\u7c7b\u578b\u6570\u636e\uff0c\u8bfb\u53d6\u5b8c\u8f93\u5165\u540e\u628a \u3002 next() \u53ea\u8bfb\u53d6\u5230\u7a7a\u683c\uff0c\u4e0d\u80fd\u8bfb\u53d6\u88ab\u7a7a\u683c\u5206\u5f00\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8bfb\u53d6\u5b8c\u540e\u628a\u5149\u6807\u4f4d\u7f6e \u3002 nextLine() \u8bfb\u53d6\u6574\u884c\u7684\u6570\u636e\u5305\u62ec\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u548c\u7ed3\u675f\u7684\u56de\u8f66\u7b26\uff0c\u8bfb\u53d6\u7ed3\u675f\u540e\u628a import java.util.ArrayList ; import java.util.List ; import java.util.Scanner ; /** input: 2 3 1 2 3 4 5 6 avd dvd abcdf fsfd output\uff1a 123 456 avd dvd abcdf fsfd */ public class Main { public static void main ( String [] args ) { Scanner sc = new Scanner ( System . in ); int n = sc . nextInt (); int m = sc . nextInt (); List < List < Integer >> lists = new ArrayList <> (); for ( int i = 0 ; i < n ; i ++ ){ List < Integer > list = new ArrayList <> (); for ( int j = 0 ; j < m ; j ++ ){ list . add ( sc . nextInt ()); } lists . add ( list ); } String s1 = sc . next (); char [] c = sc . next (). toCharArray (); sc . nextLine (); //\u624b\u52a8 \u8c03\u7528.nextLine()\u8d8a\u8fc7\u201c/n\u201c String s2 = sc . nextLine (); //output for ( List < Integer > list : lists ){ for ( Integer a : list ){ System . out . print ( a ); } System . out . println (); } System . out . println ( s1 ); System . out . println ( c ); System . out . println ( s2 ); } } \u5faa\u73af\u4e2d hasNext() \u65e0\u6cd5\u7ed3\u675f\uff0c \u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u52a0\u5165 break \u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8bbe\u7f6e\u7ec8\u6b62\u7b26 //\u4f8b\uff1a\u4ee5\u201c0\u201d\u4f5c\u4e3a\u7ec8\u6b62\u7b26 Scanner in = new Scanner ( System . in ); while ( ! in . hasNext ( \"0\" )) { System . out . println ( in . next ()); } \u8f93\u51fa System.out.println(); System.out.printf(); \u5feb\u901f\u67e5\u770b \u00b6 \u6700\u5927\u6700\u5c0f\u503c \u00b6 fmax = Float.MAX_VALUE; fmin = Float.MIN_VALUE; dmax = Double.MAX_VALUE; dmin = Double.MIN_VALUE; bmax = Byte.MAX_VALUE; bmin = Byte.MIN_VALUE; cmax = Character.MAX_VALUE; cmin = Character.MIN_VALUE; shmax = Short.MAX_VALUE; shmin = Short.MIN_VALUE; imax = Integer.MAX_VALUE; imin = Integer.MIN_VALUE; lmax = Long.MAX_VALUE; lmin = Long.MIN_VALUE; string \u00b6 \u4e0d\u53ef\u53d8\u91cf, \u6bcf\u4e2a\u4f4d\u7f6e\u5143\u7d20\u662f\u4e2a char \u521d\u59cb\u5316 String s = \"abc\" ; s = \"abc\" String s2 = new String ( s ); s = \"abc\" ; char [] c = s . toCharArray (); String s3 = new String ( c ); String s4 = new String ( c , 1 , 3 ); // [offset, offset + count) [) String.valueOf(\u4e00\u4e2a\u53c2\u6570 Object / \u57fa\u672c\u6570\u636e\u7c7b\u578b) \u8fd4\u56de\u4f20\u5165\u53c2\u6570 obj \u7684 toString(), \u82e5\u4e3a\u7a7a\u8fd4\u56de\u5b57\u7b26\u4e32 \"null\"\u3002 \u82e5\u4e3a\u57fa\u672c\u7c7b\u578b\u8c03\u7528\u5176 \u5305\u88c5\u7c7b\u7684 toString \u65b9\u6cd5\uff08Integer.toString(i)\uff09 char[] ch = {'a', 'b', 'c'}; String s5 = String.valueOf(ch);//char\u6570\u7ec4\u8f6c\u6362\u6210string \u65b9\u6cd5: charAt, length, substring, equals, indexOf, lastIndexOf, replace, toCharArray, trim, split, toLowerCase, toUpperCase . substring ( int beginIndex , int endIndex ); // \u8fd4\u56de\u5b57\u7b26\u7247\u6bb5[beginIndex, endIndex) --- O(n) . substring ( int beginIndex ); // \u8fd4\u56de\u5b57\u7b26\u7247\u6bb5[beginIndex, end_of_String) \u5c31\u662f\u4ecebeginIndex\u5f00\u59cb\u540e\u9762\u7684 ---- O(n) //indexOf \u662f\uff08\u66b4\u529b\u67e5\u627e\u5b57\u7b26\u4e32\uff0c\u4e0d\u662fKMP\uff09 . indexOf ( String str ) // \u8fd4\u56destr\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e(int)\uff0c\u6ca1\u627e\u5230\u5219\u8fd4\u56de-1\u3002 --- O(m * n) m\u4e3a\u539f\u4e32\u957f\u5ea6\uff0c n\u4e3astr\u957f\u5ea6 s . indexOf ( String str , int fromIndex ); // \u540c\u4e0a\uff0c\u4f46\u4ecefromIndex\u5f00\u59cb\u627e --- O(m * n) . lastIndexOf ( String str ); // \u8fd4\u56destr\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e(int)\uff0c\u6ca1\u627e\u5230\u5219\u8fd4\u56de-1\u3002 --- O(m * n) m\u4e3a\u539f\u4e32\u957f\u5ea6\uff0c n\u4e3astr\u957f\u5ea6 // (\u5047\u5982\u8981\u627e\u4e00\u4e2a\u5b57\u7b26char c\uff0cstr\u53ef\u4ee5\u8868\u793a\u6210String.valueOf(c),\u7136\u540e\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u53bb. . lastIndexOf ( String str , int fromIndex ); //\u4ecefromIndex\u5f00\u59cb\u4ece\u540e\u5f80\u524d\u627e [0 <- fromIndex] --- O(m * n) . replace ( char oldChar , char newChar ); // \u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32String\uff0c\u5176oldChar\u5168\u90e8\u53d8\u6210newChar --- O(n) replaceAll ( String s1 , String s2 ); //\u7528s2\u66ff\u6362\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u6240\u6709s1 replaceFirst ( String s1 , String s2 ); //\u7528s2\u66ff\u6362\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2as1 . toCharArray (); // \u8fd4\u56dechar[] \u6570\u7ec4\u3002 \u628aString\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4 --- O(n) . trim (); // \u8fd4\u56de\u53bb\u9664\u524d\u540e\u7a7a\u683c\u7684\u65b0\u5b57\u7b26\u4e32 --- O(n) . split ( String regex ); // \u8fd4\u56de String[]\uff0c\u4ee5regex(\u6b63\u5219\u8868\u8fbe\u5f0f)\u62c6\u5206 ---- O(n) // \u4ece\u975e\"/\"\u7b97\u8d77 \u82e5\"/a/c\" -> \u4f1a\u53d8\u6210\"\" \"a\" \"c\" String [] date = str . split ( \"/\" ); // date[0]:1995 date[1]:12 date[2]:18 --- O(n) //\u8f6c\u6362\u5927\u5c0f\u5199 s = s . toLowerCase (); // \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6210\u5c0f\u5199 --- O(n) s = s . toUpperCase (); // \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6210\u5927\u5199 --- O(n) string \u7684\u6bd4\u8f83 compareTo(String anotherString)//\u6309\u5b57\u5178\u987a\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32 compareToIgnoreCase(String anotherString)//\u6309\u5b57\u5178\u987a\u5e8f\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32 equals(String anotherString)//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u8fd4\u56detrue\u5426\u5219\u8fd4\u56defalse equalsIgnoreCase(String str)//\u540c\u4e0a\uff0c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 \u5982\u679c a > b \u8fd4\u56de\u5927\u4e8e 0 \u7684\u6574\u6570\uff0c \u5982\u679c a == b \u8fd4\u56de 0\uff0c \u5982\u679c a < b \u8fd4\u56de\u5c0f\u4e8e 0 \u7684\u6574\u6570 \u5176\u5b9e\u662f\u8fd4\u56de a \u548c b \u7b2c\u4e00\u4e2a\u4e0d\u540c\u5b57\u7b26\u7684\u5dee\u503c\u3002 \u641c\u7d22\u5b50\u4e32 indexOf(String str);//\u8fd4\u56de\u5b50\u4e32\u5728\u6b64\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 indexOf(String str, int fromindex);//\u540c\u4e0a\uff0c\u4ece\u6307\u5b9a\u7d22\u5f15\u5f00\u59cb\u641c\u7d22 lastIndexOf(int ch);//\u8fd4\u56de\u6307\u5b9a\u5b57\u7b26\u5728\u6b64\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 lastIndexOf(int ch, int fromindex);//\u540c\u4e0a\uff0c \u4ece\u6307\u5b9a\u7d22\u5f15\u5f00\u59cb\u641c\u7d22 lastIndexOf(String str);//\u8fd4\u56de\u5b50\u4e32\u5728\u6b64\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 lastIndexOf(String str, int fromindex);//\u540c\u4e0a\uff0c \u4ece\u6307\u5b9a\u7d22\u5f15\u5f00\u59cb\u641c\u7d22 startsWith(String prefix);// \u68c0\u67e5\u662f\u5426\u4ee5\u67d0\u4e00\u524d\u7f00\u5f00\u59cb \u5176\u4ed6\u7c7b\u578b\u8f6c\u6362\u4e3a string String.valueOf(char[] data);//\u8fd4\u56de char\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f String.valueOf(char[] data,int offset, int count)//\u8fd4\u56de char \u6570\u7ec4\u53c2\u6570\u7684\u7279\u5b9a\u5b50\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f String.valueOf(int i);//\u8fd4\u56de int \u53c2\u6570\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f string \u8f6c\u6362\u4e3a\u5176\u4ed6\u7c7b\u578b String sInt = \"123\"; int s = Integer.parseInt(sInt); long ls = Long.parseLong(sInt); char[] c = s.toCharArray(); stringbuilder \u00b6 \u975e\u7ebf\u7a0b\u5b89\u5168 \u65b9\u6cd5: append, charAt, length, setCharAt, insert, deleteCharAt, delete, reverse, toString StringBuilder sb = new StringBuilder (); StringBuilder sb = StringBuilder ( String str ); //\u6784\u5efa\u4e00\u4e2a\u503c\u4e3astr\u7684\u53ef\u53d8\u5b57\u7b26\u4e32\u3002 . setCharAt ( int index , char ch ); // \u8bbe\u7f6eindex\u4f4d\u7f6e\u7684char\u4e3ach --- O(1) . insert ( int offset , String str ); // \u5728offer\u4f4d\u7f6e\u7684\u63d2\u5165\u5b57\u7b26\u4e32str--- O(m + n) . deleteCharAt ( int index ); // \u5220\u9664index\u4f4d\u7f6e\u7684char --- O(n) . deleteCharAt ( sb . length () - 1 ); // \u5220\u9664\u6700\u540e\u4e00\u4e2achar --- O(1) . delete ( int start , int end ); // \u5220\u9664[start, end)\u4f4d\u7f6e\u7684char --- O(n) . delete ( int start , int end ); //\u79fb\u9664\u6b64\u5e8f\u5217\u4ecestart\u5230end-1\u7684\u5b57\u7b26\u4e32 . reverse (); // \u53cd\u8f6c\u7f13\u5b58\u5b57\u7b26\u4e32 --- O(n) . toString (); // \u8fd4\u56de\u4e00\u4e2a\u4e0e\u6784\u5efa\u8d77\u6216\u7f13\u51b2\u5668\u5185\u5bb9\u76f8\u540c\u7684\u5b57\u7b26\u4e32 --- O(n) append ( String str ); //\u5728\u6b64\u5b57\u7b26\u4e32\u8ffd\u52a0str\u3002 append ( StringBuilder str ); //\u5728\u6b64\u5b57\u7b26\u4e32\u8ffd\u52a0str\u3002 append ( char [] str , int offset , int len ); //\u5c06char\u7684\u5b50\u6570\u7ec4\u8ffd\u52a0\u5230\u6b64\u5b57\u7b26\u4e32 \u67e5\u627e indexOf(String str);//\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 indexOf(String str, int fromIndex);//\u540c\u4e0a\uff0c\u4ece\u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e lastIndexOf(String str);//\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 lastIndexOf(String str, int fromIndex);//\u540c\u4e0a\uff0c\u4ece\u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e \u96c6\u5408 \u00b6 Java HashMap | \u83dc\u9e1f\u6559\u7a0b (runoob.com) map \u00b6 \u65b9\u6cd5\uff1aput, get, getOrDefault, containsKey, containsValue, keySet, values, isEmpty, size,remove import java.util.HashMap ; import java.util.Iterator ; import java.util.Map ; public class TestMap { public static void main ( String [] args ) { Map < String , String > map = new HashMap < String , String > (); map . put ( \"1\" , \"a\" ); map . put ( \"2\" , \"b\" ); map . put ( \"3\" , \"c\" ); //\u6700\u7b80\u6d01\u3001\u6700\u901a\u7528\u7684\u904d\u5386\u65b9\u5f0f for ( Map . Entry < String , String > entry : map . entrySet ()) { System . out . println ( entry . getKey () + \" = \" + entry . getValue ()); } //.keySet(); // \u8fd4\u56de\u4e00\u4e2aSet,\u8fd9\u4e2aSet\u4e2d\u5305\u542bMap\u4e2d\u6240\u6709\u7684Key --- O(1) for ( Character key : map . keySet ()) { // Operate with each key } //.values(); // \u8fd4\u56de\u4e00\u4e2aCollection<v>,\u91cc\u9762\u5168\u662f\u5bf9\u5e94\u7684\u6bcf\u4e00\u4e2avalue --- O(1) for ( Integer value : map . values ()) { // Operate with each values } } } queue \u00b6 \u65b9\u6cd5\uff1aoffer, poll, peek, isEmpty, size import java.util.Queue ; import java.util.concurrent.LinkedBlockingQueue ; public class TestQueue { public static void main ( String [] args ) { Queue < Integer > q = new LinkedBlockingQueue < Integer > (); //\u521d\u59cb\u5316 //\u628a\u628a\u96c6\u5408\u5982Stack\u3001Set\u3001List\u7b49Collection\u4f5c\u4e3a\u53c2\u6570 Set < Integer > s = new HashSet <> (); Queue < Integer > q = new LinkedList <> ( s ); //\u521d\u59cb\u5316\u961f\u5217 for ( int i = 0 ; i < 5 ; i ++ ) { q . offer ( i ); //\u5165\u961f } System . out . println ( \"-------1-----\" ); //\u96c6\u5408\u65b9\u5f0f\u904d\u5386\uff0c\u5143\u7d20\u4e0d\u4f1a\u88ab\u79fb\u9664 for ( Integer x : q ) { System . out . println ( x ); } System . out . println ( \"-------2-----\" ); //\u961f\u5217\u65b9\u5f0f\u904d\u5386\uff0c\u5143\u7d20\u9010\u4e2a\u88ab\u79fb\u9664 while ( q . peek () != null ) { System . out . println ( q . poll ()); //\u51fa\u961f } } } deque \u00b6 addFirst() addLast() getFirst() getLast() removeFirst() removeLast() isEmpty() size() \u66f4\u591a Java \u96c6\u5408\u7c7b\u65b9\u9762\u7684\u6587\u7ae0\uff0c\u8bf7\u53c2\u89c1\u6587\u96c6 \u300aJava \u96c6\u5408\u7c7b\u300b \u200b Deque \u63a5\u53e3\u662f double ended queue \u7684\u7f29\u5199\uff0c\u5373\u53cc\u7aef\u961f\u5217\uff0c\u652f\u6301\u5728\u961f\u5217\u7684\u4e24\u7aef\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\uff0c\u7ee7\u627f Queue \u63a5\u53e3\u3002 public interface Deque extends Queue Deque \u7684 12 \u79cd\u65b9\u6cd5\u603b\u7ed3\u5982\u4e0b\uff1a \u63d2\u5165\uff1a \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 void addFirst(Object e) void addLast(Object e) \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c ( null \u6216 false ) boolean offerFirst(Object e) boolean offerLast(Object e); \u5220\u9664\uff1a \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 Object removeFirst() Object removeLast() \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c ( null \u6216 false ) Object pollFirst() Object pollLast() \u83b7\u53d6\uff1a \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 Object getFirst() Object getLast() \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c ( null \u6216 false ) Object peekFirst() Object peekLast() Deque \u4e0e List \u4e0d\u540c\uff0c\u8be5\u63a5\u53e3\u4e0d\u652f\u6301\u4e0b\u6807\u8bbf\u95ee\u5143\u7d20\u3002 Deque \u7684\u5b9e\u73b0\u5e76\u4e0d\u4e25\u683c\u8981\u6c42\u7981\u6b62\u63d2\u5165\u5143\u7d20 null \uff0c\u4f46\u5f3a\u70c8\u9f13\u52b1\u4e0d\u63d2\u5165 null \u3002\u4efb\u4f55 Deque \u7684\u5b9e\u73b0\u90fd\u5f3a\u70c8\u9f13\u52b1\u4e0d\u8981\u63d2\u5165 null \uff0c\u56e0\u4e3a null \u662f\u591a\u79cd\u65b9\u6cd5\u4f5c\u4e3a\u4e00\u79cd\u7279\u6b8a\u8fd4\u56de\u503c\u6765\u8868\u793a Deque \u4e3a\u7a7a\u3002 ArrayDeque \u548c LinkedList \u7c7b\u662f Deque \u63a5\u53e3\u7684\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff1a ArrayDeque \u7c7b\u7531\u6570\u7ec4\u652f\u6301\u3002\u9002\u5408\u5f53\u4f5c\u5806\u6808\u4f7f\u7528\u3002 LinkedList \u7c7b\u7531\u94fe\u8868\u652f\u6301\u3002\u9002\u5408\u5f53\u4f5c FIFO \u961f\u5217\u4f7f\u7528\u3002 public static void main ( String [] args ) { Deque < Integer > deque = new LinkedList <> (); deque . addLast ( 1 ); deque . offerLast ( 2 ); deque . offerLast ( 3 ); deque . offerLast ( 4 ); System . out . println ( deque ); // [1, 2, 3, 4] while ( deque . peekFirst () != null ) { System . out . println ( deque . peekFirst ()); deque . removeFirst (); } } \u5f15\u7528\uff1a Java \u53cc\u7aef\u961f\u5217 stack \u00b6 \u65b9\u6cd5\uff1apush, pop, peek, isEmpty, size import java.util.Stack ; public class TestStack { public static void main ( String [] args ) { Stack < Integer > s = new Stack < Integer > (); //\u521d\u59cb\u5316 for ( int i = 0 ; i < 10 ; i ++ ) { s . push ( i ); //\u5165\u6808 } //\u96c6\u5408\u904d\u5386\u65b9\u5f0f for ( Integer x : s ) { System . out . println ( x ); } System . out . println ( \"------1-----\" ); //\u6808\u5f39\u51fa\u904d\u5386\u65b9\u5f0f // while (s.peek()!=null) { //\u4e0d\u5065\u58ee\u7684\u5224\u65ad\u65b9\u5f0f\uff0c\u5bb9\u6613\u629b\u5f02\u5e38\uff0c\u6b63\u786e\u5199\u6cd5\u662f\u4e0b\u9762\u7684 while ( ! s . isEmpty ()) { System . out . println ( s . pop ()); //\u51fa\u6808 } System . out . println ( \"------2-----\" ); //\u9519\u8bef\u7684\u904d\u5386\u65b9\u5f0f // for (Integer x : s) { // System.out.println(s.pop()); // } } } set \u00b6 \u521d\u59cb\u5316 Set < Integer > set = new HashSet <> (); //\u628a\u96c6\u5408\u5982Stack\u3001Queue\u3001List\u7b49Collection\u4f5c\u4e3a\u53c2\u6570 List < Integer > list = new ArrayList <> ....; Set < Integer > set = new HashSet <> ( list ); \u65b9\u6cd5\uff1aadd, remove, contains, isEmpty, size \u4f18\u5148\u961f\u5217 PriorityQueue (Heap) \u00b6 \u5e95\u5c42\u662f\u4e00\u9897\u6570\uff0c \u4ee5\u5c0f\u6839\u5806\u4e3a\u4f8b \u521d\u59cb\u5316 //\u5c0f\u6839\u5806 Queue < Integer > minH = new PriorityQueue <> (); // \u5c0f\u6839\u5806\uff0c\u9ed8\u8ba4\u5927\u5c0f\u4e3a11 \u76f8\u5f53\u4e8e new PriorityQueue<>(11) Queue < Integer > minH = new PriorityQueue <> ( 100 ); // \u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u5bb9\u91cf\u6709100\u7684\u5c0f\u6839\u5806\u3002\u5728\u5f53\u4e2d\u589e\u52a0\u5143\u7d20\u4f1a\u6269\u5bb9\uff0c\u53ea\u662f\u5f00\u59cb\u6307\u5b9a\u5927\u5c0f\u3002\u4e0d\u662fsize\uff0c\u662fcapacity //\u5927\u6839\u5806 Queue < Integer > maxH = new PriorityQueue <> (( i1 , i2 ) -> i2 - i1 ); // \u5927\u6839\u5806\uff0c\u9ed8\u8ba4\u5927\u5c0f\u4e3a11 \u76f8\u5f53\u4e8e new PriorityQueue<>(11, (i1, i2) -> i2 - i1) Queue < Integer > maxH = new PriorityQueue <> ( 100 , ( i1 , i2 ) -> i2 - i1 ); // \u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u5bb9\u91cf\u6709100\u7684\u5927\u6839\u5806\u3002\u5728\u5f53\u4e2d\u589e\u52a0\u5143\u7d20\u4f1a\u6269\u5bb9\uff0c\u53ea\u662f\u5f00\u59cb\u6307\u5b9a\u5927\u5c0f \u65b9\u6cd5\uff1aoffer, poll, peek, isEmpty, size \u6570\u7ec4 \u00b6 \u9759\u6001\u6570\u7ec4 \u00b6 //\u4e00\u7ef4 String [] s = new String [ 3 ] ; char [] b = new char [] { 'a' , 'b' }; //\u4e8c\u7ef4 // \u4e8c\u7ef4 int [][] c = new int [ 10 ][ 10 ] ; Arrays.sort \u4ece\u5c0f\u5230\u5927\u6392\u5e8f Arrays . sort ( int [] arr ) //\u4ece\u5c0f\u5230\u5927\u6392\u5e8f Arrays . sort ( int [] arr , int fromIndex , int toIndex ) // [) Arrays . sort ( int [] arr , int fromIndex , int toIndex , \u6bd4\u8f83\u5668 ); //\u4e00\u5b9a\u662f\u9700\u8981\u6cdb\u578b Arrays . sort ( arr , ( o1 , o2 ) -> o2 - o1 ); //\u6570\u7ec4\u5168\u90e8 \u4ece\u5927\u5230\u5c0f\u6392\u5e8f \u8ddfCollections.sort()\u4e00\u6837 Arrays . sort ( arr , 0 , 3 , ( o1 , o2 ) -> o2 - o1 ); //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u53ea\u6392\u5e8f[0, 3) Arrays.fill \u586b\u6ee1\u4e00\u4e2a\u6570\u7ec4 int[] a = new int[5]; Arrays.fill(a, 1); Arrays.copyOf / arr.clone() \u590d\u5236\u4e00\u4e2a\u6570\u7ec4 (\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u53ef\u4ee5) int [] a = new int [ 5 ]; int [] newA = Array.copyOf(a, 5 ); // or int [][] a = {{ 1 }, { 1 , 2 }, { 1 , 2 , 3 }, { 1 , 2 , 3 , 4 }, { 1 , 2 , 3 , 4 , 5 }}; // \u4e0d\u662f5*5\uff0c\u7b2c\u4e00\u7ef41 2 3 4 5 int [][] newa = a.clone(); // \u4e0d\u662f5*5\u77e9\u9635 \u76f8\u7b49\u6bd4\u8f83 arr1.equals(arr2) \u6bd4\u8f83\u7684\u662f\u4e24\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u4e0d\u662f\u91cc\u9762\u7684\u6570\uff0c\u800c Arrays.equals \u91cd\u5199\u4e86 equals\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u80fd\u6bd4\u8f83\u5143\u7d20\u662f\u5426\u76f8\u7b49\u3002 \u4e8c\u5206\u67e5\u627e\u6cd5\u627e\u6307\u5b9a\u5143\u7d20\u7684\u7d22\u5f15\u503c\uff08\u4e0b\u6807\uff09 int []arr = {10,20,30,40,50}; System.out.println(Arrays.binarySearch(arr, 20));//\u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56de-x \u622a\u53d6\u6570\u7ec4\uff1acopeOf \u548c copeOfRange int [] arr = { 10 , 20 , 30 , 40 , 50 }; int [] arr1 = Arrays . copyOf ( arr , 3 ); //\u622a\u53d6arr\u6570\u7ec4\u76843\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u59d3\u6570\u7ec4arr1 10 20 30 int [] arr = { 10 , 20 , 30 , 40 , 50 }; int [] arr1 = Arrays . copyOfRange ( arr , 1 , 3 ); // [) 10 20 \u52a8\u6001\u6570\u7ec4 \u00b6 List < Integer > array = new ArrayList <> (); // \u6570\u7ec4 List < Integer > list = new LinkedList <> (); // \u94fe\u8868 List < List < Integer >> = new ArrayList <> (); //\u4e8c\u7ef4\u6570\u7ec4 //Integer\u8f6cint\u6570\u7ec4 Integer[] cannot be converted to int[] List < Integer > list = new ArrayList < Integer > (); int [] array = list . stream (). mapToInt ( i -> i ). toArray (); List \u63a5\u53e3\u65b9\u6cd5: . get ( int index ) . size () . add ( E e ) // \u5728\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20e --- O(1) . add ( int index , E e ) // \u5728index\u4f4d\u7f6e\u63d2\u4e00\u4e2a\u5143\u7d20e --- O(n) . remove ( int index ) // \u5220\u9664\u4f4d\u4e8eindex\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u5220\u9664\u5143\u7d20e list . remove ( list . size () - 1 ); . subList ( int from , int to ) // \u76f8\u5f53\u4e8e\u8fd4\u56de\u539f\u6570\u7ec4\u7684\u4e00\u4e2a\u7247\u6bb5,\u4f46\u4e0d\u8981\u5bf9\u5176\u8fdb\u884c\u6539\u52a8\uff0c\u6539\u52a8\u4f1a\u5f71\u54cd\u539f\u6570\u7ec4 \u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u6bd4\u8f83\u5668 Math \u00b6 Math . max ( long a , long b ) Math . sqrt ( double a ) Math . abs ( double a ) //\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\u4e00\u81f4\u7684\u7edd\u5bf9\u503c Math . pow ( double a , double b ) \u53d6\u6574 Math . ceil ( double x ); //\u5411\u4e0a\u53d6\u6574 Math . floor ( double x ); //\u5411\u4e0b\u53d6\u6574 Math . round ( double x ); //\u56db\u820d\u4e94\u5165 \u968f\u673a\u6570\uff0c\u751f\u6210\u4e00\u4e2a [0,1) \u4e4b\u95f4\u7684 double \u7c7b\u578b\u7684\u4f2a\u968f\u673a\u6570 Math . random () int a = ( int )( Math . random () * b + 1 ); // [1, b] int a = ( int )( Math . random () * ( b - a + 1 ) + a ); //[a, b] \u5b57\u6bcd\u6570\u5b57\u6709\u5173\u51fd\u6570 \u00b6","title":"JavaAPI"},{"location":"JavaAPI/#java","text":"Java HashMap | \u83dc\u9e1f\u6559\u7a0b (runoob.com)","title":"Java\u5237\u9898"},{"location":"JavaAPI/#string","text":"\u6570\u7ec4\u4f7f\u7528length\u53d6\u957f\u5ea6 string\u4f7f\u7528length()\u53d6\u957f\u5ea6 StringBuilder\u76f4\u63a5append(int) \u65e0\u9700\u8fdb\u884cint\u8f6cchar char\u6570\u7ec4\u8f6cstring\u200b new String(chars)","title":"String"},{"location":"JavaAPI/#_1","text":"Scanner sc = new Scanner ( System . in ); String s = sc . next (); //\u5b57\u7b26\u4e32 double t = sc . nextDouble (); //\u6d6e\u70b9\u6570 String s = sc . nextLine (); //\u4e00\u884c \u5224\u65ad\u662f\u5426\u6709\u4e0b\u4e00\u4e2a\u8f93\u5165\uff0c\u7528 sc.hasNext() \u6216 sc.hasNextInt() \u6216 sc.hasNextDouble() \u6216 sc.hasNextLine() //\u5faa\u73af\u8f93\u5165\u6574\u6570 while ( in . hasNextInt ()){ int n = sc . nextInt (); } //\u5faa\u73af\u8f93\u5165\u5b57\u7b26 while ( in . hasNext ()){ } \u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 nextInt() \u6216 next() \u4e4b\u540e\uff0c\u8981\u7528 nextLine()\uff0c\u9700\u624b\u52a8\u8c03\u7528. nextLine() \u5438\u6536\u6389\u56de\u8f66\u7b26\u6216\u7a7a\u683c\u3002\u4f46\u662f\u5982\u679c\u4e0d\u662f\u4ea4\u53c9\u4f7f\u7528\uff0c\u6bd4\u5982\u8fde\u7eed\u4f7f\u7528 next() \u6216 next() \u662f\u53ef\u4ee5\u81ea\u52a8\u5438\u6536\u6389\u7a7a\u683c\u6216\u56de\u8f66\u7b26\u7684\u3002 nextInt() \u53ea\u8bfb\u53d6\u6574\u6570\u7c7b\u578b\u6570\u636e\uff0c\u8bfb\u53d6\u5b8c\u8f93\u5165\u540e\u628a \u3002 next() \u53ea\u8bfb\u53d6\u5230\u7a7a\u683c\uff0c\u4e0d\u80fd\u8bfb\u53d6\u88ab\u7a7a\u683c\u5206\u5f00\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8bfb\u53d6\u5b8c\u540e\u628a\u5149\u6807\u4f4d\u7f6e \u3002 nextLine() \u8bfb\u53d6\u6574\u884c\u7684\u6570\u636e\u5305\u62ec\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u548c\u7ed3\u675f\u7684\u56de\u8f66\u7b26\uff0c\u8bfb\u53d6\u7ed3\u675f\u540e\u628a import java.util.ArrayList ; import java.util.List ; import java.util.Scanner ; /** input: 2 3 1 2 3 4 5 6 avd dvd abcdf fsfd output\uff1a 123 456 avd dvd abcdf fsfd */ public class Main { public static void main ( String [] args ) { Scanner sc = new Scanner ( System . in ); int n = sc . nextInt (); int m = sc . nextInt (); List < List < Integer >> lists = new ArrayList <> (); for ( int i = 0 ; i < n ; i ++ ){ List < Integer > list = new ArrayList <> (); for ( int j = 0 ; j < m ; j ++ ){ list . add ( sc . nextInt ()); } lists . add ( list ); } String s1 = sc . next (); char [] c = sc . next (). toCharArray (); sc . nextLine (); //\u624b\u52a8 \u8c03\u7528.nextLine()\u8d8a\u8fc7\u201c/n\u201c String s2 = sc . nextLine (); //output for ( List < Integer > list : lists ){ for ( Integer a : list ){ System . out . print ( a ); } System . out . println (); } System . out . println ( s1 ); System . out . println ( c ); System . out . println ( s2 ); } } \u5faa\u73af\u4e2d hasNext() \u65e0\u6cd5\u7ed3\u675f\uff0c \u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u52a0\u5165 break \u6761\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8bbe\u7f6e\u7ec8\u6b62\u7b26 //\u4f8b\uff1a\u4ee5\u201c0\u201d\u4f5c\u4e3a\u7ec8\u6b62\u7b26 Scanner in = new Scanner ( System . in ); while ( ! in . hasNext ( \"0\" )) { System . out . println ( in . next ()); } \u8f93\u51fa System.out.println(); System.out.printf();","title":"\u8f93\u5165\u8f93\u51fa"},{"location":"JavaAPI/#_2","text":"","title":"\u5feb\u901f\u67e5\u770b"},{"location":"JavaAPI/#_3","text":"fmax = Float.MAX_VALUE; fmin = Float.MIN_VALUE; dmax = Double.MAX_VALUE; dmin = Double.MIN_VALUE; bmax = Byte.MAX_VALUE; bmin = Byte.MIN_VALUE; cmax = Character.MAX_VALUE; cmin = Character.MIN_VALUE; shmax = Short.MAX_VALUE; shmin = Short.MIN_VALUE; imax = Integer.MAX_VALUE; imin = Integer.MIN_VALUE; lmax = Long.MAX_VALUE; lmin = Long.MIN_VALUE;","title":"\u6700\u5927\u6700\u5c0f\u503c"},{"location":"JavaAPI/#string_1","text":"\u4e0d\u53ef\u53d8\u91cf, \u6bcf\u4e2a\u4f4d\u7f6e\u5143\u7d20\u662f\u4e2a char \u521d\u59cb\u5316 String s = \"abc\" ; s = \"abc\" String s2 = new String ( s ); s = \"abc\" ; char [] c = s . toCharArray (); String s3 = new String ( c ); String s4 = new String ( c , 1 , 3 ); // [offset, offset + count) [) String.valueOf(\u4e00\u4e2a\u53c2\u6570 Object / \u57fa\u672c\u6570\u636e\u7c7b\u578b) \u8fd4\u56de\u4f20\u5165\u53c2\u6570 obj \u7684 toString(), \u82e5\u4e3a\u7a7a\u8fd4\u56de\u5b57\u7b26\u4e32 \"null\"\u3002 \u82e5\u4e3a\u57fa\u672c\u7c7b\u578b\u8c03\u7528\u5176 \u5305\u88c5\u7c7b\u7684 toString \u65b9\u6cd5\uff08Integer.toString(i)\uff09 char[] ch = {'a', 'b', 'c'}; String s5 = String.valueOf(ch);//char\u6570\u7ec4\u8f6c\u6362\u6210string \u65b9\u6cd5: charAt, length, substring, equals, indexOf, lastIndexOf, replace, toCharArray, trim, split, toLowerCase, toUpperCase . substring ( int beginIndex , int endIndex ); // \u8fd4\u56de\u5b57\u7b26\u7247\u6bb5[beginIndex, endIndex) --- O(n) . substring ( int beginIndex ); // \u8fd4\u56de\u5b57\u7b26\u7247\u6bb5[beginIndex, end_of_String) \u5c31\u662f\u4ecebeginIndex\u5f00\u59cb\u540e\u9762\u7684 ---- O(n) //indexOf \u662f\uff08\u66b4\u529b\u67e5\u627e\u5b57\u7b26\u4e32\uff0c\u4e0d\u662fKMP\uff09 . indexOf ( String str ) // \u8fd4\u56destr\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684\u4f4d\u7f6e(int)\uff0c\u6ca1\u627e\u5230\u5219\u8fd4\u56de-1\u3002 --- O(m * n) m\u4e3a\u539f\u4e32\u957f\u5ea6\uff0c n\u4e3astr\u957f\u5ea6 s . indexOf ( String str , int fromIndex ); // \u540c\u4e0a\uff0c\u4f46\u4ecefromIndex\u5f00\u59cb\u627e --- O(m * n) . lastIndexOf ( String str ); // \u8fd4\u56destr\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e(int)\uff0c\u6ca1\u627e\u5230\u5219\u8fd4\u56de-1\u3002 --- O(m * n) m\u4e3a\u539f\u4e32\u957f\u5ea6\uff0c n\u4e3astr\u957f\u5ea6 // (\u5047\u5982\u8981\u627e\u4e00\u4e2a\u5b57\u7b26char c\uff0cstr\u53ef\u4ee5\u8868\u793a\u6210String.valueOf(c),\u7136\u540e\u4f5c\u4e3a\u53c2\u6570\u4f20\u8fdb\u53bb. . lastIndexOf ( String str , int fromIndex ); //\u4ecefromIndex\u5f00\u59cb\u4ece\u540e\u5f80\u524d\u627e [0 <- fromIndex] --- O(m * n) . replace ( char oldChar , char newChar ); // \u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32String\uff0c\u5176oldChar\u5168\u90e8\u53d8\u6210newChar --- O(n) replaceAll ( String s1 , String s2 ); //\u7528s2\u66ff\u6362\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u6240\u6709s1 replaceFirst ( String s1 , String s2 ); //\u7528s2\u66ff\u6362\u76ee\u6807\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2as1 . toCharArray (); // \u8fd4\u56dechar[] \u6570\u7ec4\u3002 \u628aString\u8f6c\u6362\u6210\u5b57\u7b26\u6570\u7ec4 --- O(n) . trim (); // \u8fd4\u56de\u53bb\u9664\u524d\u540e\u7a7a\u683c\u7684\u65b0\u5b57\u7b26\u4e32 --- O(n) . split ( String regex ); // \u8fd4\u56de String[]\uff0c\u4ee5regex(\u6b63\u5219\u8868\u8fbe\u5f0f)\u62c6\u5206 ---- O(n) // \u4ece\u975e\"/\"\u7b97\u8d77 \u82e5\"/a/c\" -> \u4f1a\u53d8\u6210\"\" \"a\" \"c\" String [] date = str . split ( \"/\" ); // date[0]:1995 date[1]:12 date[2]:18 --- O(n) //\u8f6c\u6362\u5927\u5c0f\u5199 s = s . toLowerCase (); // \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6210\u5c0f\u5199 --- O(n) s = s . toUpperCase (); // \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u5168\u90e8\u8f6c\u6210\u5927\u5199 --- O(n) string \u7684\u6bd4\u8f83 compareTo(String anotherString)//\u6309\u5b57\u5178\u987a\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32 compareToIgnoreCase(String anotherString)//\u6309\u5b57\u5178\u987a\u5e8f\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32 equals(String anotherString)//\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u8fd4\u56detrue\u5426\u5219\u8fd4\u56defalse equalsIgnoreCase(String str)//\u540c\u4e0a\uff0c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 \u5982\u679c a > b \u8fd4\u56de\u5927\u4e8e 0 \u7684\u6574\u6570\uff0c \u5982\u679c a == b \u8fd4\u56de 0\uff0c \u5982\u679c a < b \u8fd4\u56de\u5c0f\u4e8e 0 \u7684\u6574\u6570 \u5176\u5b9e\u662f\u8fd4\u56de a \u548c b \u7b2c\u4e00\u4e2a\u4e0d\u540c\u5b57\u7b26\u7684\u5dee\u503c\u3002 \u641c\u7d22\u5b50\u4e32 indexOf(String str);//\u8fd4\u56de\u5b50\u4e32\u5728\u6b64\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 indexOf(String str, int fromindex);//\u540c\u4e0a\uff0c\u4ece\u6307\u5b9a\u7d22\u5f15\u5f00\u59cb\u641c\u7d22 lastIndexOf(int ch);//\u8fd4\u56de\u6307\u5b9a\u5b57\u7b26\u5728\u6b64\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 lastIndexOf(int ch, int fromindex);//\u540c\u4e0a\uff0c \u4ece\u6307\u5b9a\u7d22\u5f15\u5f00\u59cb\u641c\u7d22 lastIndexOf(String str);//\u8fd4\u56de\u5b50\u4e32\u5728\u6b64\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 lastIndexOf(String str, int fromindex);//\u540c\u4e0a\uff0c \u4ece\u6307\u5b9a\u7d22\u5f15\u5f00\u59cb\u641c\u7d22 startsWith(String prefix);// \u68c0\u67e5\u662f\u5426\u4ee5\u67d0\u4e00\u524d\u7f00\u5f00\u59cb \u5176\u4ed6\u7c7b\u578b\u8f6c\u6362\u4e3a string String.valueOf(char[] data);//\u8fd4\u56de char\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f String.valueOf(char[] data,int offset, int count)//\u8fd4\u56de char \u6570\u7ec4\u53c2\u6570\u7684\u7279\u5b9a\u5b50\u6570\u7ec4\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f String.valueOf(int i);//\u8fd4\u56de int \u53c2\u6570\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f string \u8f6c\u6362\u4e3a\u5176\u4ed6\u7c7b\u578b String sInt = \"123\"; int s = Integer.parseInt(sInt); long ls = Long.parseLong(sInt); char[] c = s.toCharArray();","title":"string"},{"location":"JavaAPI/#stringbuilder","text":"\u975e\u7ebf\u7a0b\u5b89\u5168 \u65b9\u6cd5: append, charAt, length, setCharAt, insert, deleteCharAt, delete, reverse, toString StringBuilder sb = new StringBuilder (); StringBuilder sb = StringBuilder ( String str ); //\u6784\u5efa\u4e00\u4e2a\u503c\u4e3astr\u7684\u53ef\u53d8\u5b57\u7b26\u4e32\u3002 . setCharAt ( int index , char ch ); // \u8bbe\u7f6eindex\u4f4d\u7f6e\u7684char\u4e3ach --- O(1) . insert ( int offset , String str ); // \u5728offer\u4f4d\u7f6e\u7684\u63d2\u5165\u5b57\u7b26\u4e32str--- O(m + n) . deleteCharAt ( int index ); // \u5220\u9664index\u4f4d\u7f6e\u7684char --- O(n) . deleteCharAt ( sb . length () - 1 ); // \u5220\u9664\u6700\u540e\u4e00\u4e2achar --- O(1) . delete ( int start , int end ); // \u5220\u9664[start, end)\u4f4d\u7f6e\u7684char --- O(n) . delete ( int start , int end ); //\u79fb\u9664\u6b64\u5e8f\u5217\u4ecestart\u5230end-1\u7684\u5b57\u7b26\u4e32 . reverse (); // \u53cd\u8f6c\u7f13\u5b58\u5b57\u7b26\u4e32 --- O(n) . toString (); // \u8fd4\u56de\u4e00\u4e2a\u4e0e\u6784\u5efa\u8d77\u6216\u7f13\u51b2\u5668\u5185\u5bb9\u76f8\u540c\u7684\u5b57\u7b26\u4e32 --- O(n) append ( String str ); //\u5728\u6b64\u5b57\u7b26\u4e32\u8ffd\u52a0str\u3002 append ( StringBuilder str ); //\u5728\u6b64\u5b57\u7b26\u4e32\u8ffd\u52a0str\u3002 append ( char [] str , int offset , int len ); //\u5c06char\u7684\u5b50\u6570\u7ec4\u8ffd\u52a0\u5230\u6b64\u5b57\u7b26\u4e32 \u67e5\u627e indexOf(String str);//\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 indexOf(String str, int fromIndex);//\u540c\u4e0a\uff0c\u4ece\u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e lastIndexOf(String str);//\u8fd4\u56de\u5b50\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15 lastIndexOf(String str, int fromIndex);//\u540c\u4e0a\uff0c\u4ece\u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e","title":"stringbuilder"},{"location":"JavaAPI/#_4","text":"Java HashMap | \u83dc\u9e1f\u6559\u7a0b (runoob.com)","title":"\u96c6\u5408"},{"location":"JavaAPI/#map","text":"\u65b9\u6cd5\uff1aput, get, getOrDefault, containsKey, containsValue, keySet, values, isEmpty, size,remove import java.util.HashMap ; import java.util.Iterator ; import java.util.Map ; public class TestMap { public static void main ( String [] args ) { Map < String , String > map = new HashMap < String , String > (); map . put ( \"1\" , \"a\" ); map . put ( \"2\" , \"b\" ); map . put ( \"3\" , \"c\" ); //\u6700\u7b80\u6d01\u3001\u6700\u901a\u7528\u7684\u904d\u5386\u65b9\u5f0f for ( Map . Entry < String , String > entry : map . entrySet ()) { System . out . println ( entry . getKey () + \" = \" + entry . getValue ()); } //.keySet(); // \u8fd4\u56de\u4e00\u4e2aSet,\u8fd9\u4e2aSet\u4e2d\u5305\u542bMap\u4e2d\u6240\u6709\u7684Key --- O(1) for ( Character key : map . keySet ()) { // Operate with each key } //.values(); // \u8fd4\u56de\u4e00\u4e2aCollection<v>,\u91cc\u9762\u5168\u662f\u5bf9\u5e94\u7684\u6bcf\u4e00\u4e2avalue --- O(1) for ( Integer value : map . values ()) { // Operate with each values } } }","title":"map"},{"location":"JavaAPI/#queue","text":"\u65b9\u6cd5\uff1aoffer, poll, peek, isEmpty, size import java.util.Queue ; import java.util.concurrent.LinkedBlockingQueue ; public class TestQueue { public static void main ( String [] args ) { Queue < Integer > q = new LinkedBlockingQueue < Integer > (); //\u521d\u59cb\u5316 //\u628a\u628a\u96c6\u5408\u5982Stack\u3001Set\u3001List\u7b49Collection\u4f5c\u4e3a\u53c2\u6570 Set < Integer > s = new HashSet <> (); Queue < Integer > q = new LinkedList <> ( s ); //\u521d\u59cb\u5316\u961f\u5217 for ( int i = 0 ; i < 5 ; i ++ ) { q . offer ( i ); //\u5165\u961f } System . out . println ( \"-------1-----\" ); //\u96c6\u5408\u65b9\u5f0f\u904d\u5386\uff0c\u5143\u7d20\u4e0d\u4f1a\u88ab\u79fb\u9664 for ( Integer x : q ) { System . out . println ( x ); } System . out . println ( \"-------2-----\" ); //\u961f\u5217\u65b9\u5f0f\u904d\u5386\uff0c\u5143\u7d20\u9010\u4e2a\u88ab\u79fb\u9664 while ( q . peek () != null ) { System . out . println ( q . poll ()); //\u51fa\u961f } } }","title":"queue"},{"location":"JavaAPI/#deque","text":"addFirst() addLast() getFirst() getLast() removeFirst() removeLast() isEmpty() size() \u66f4\u591a Java \u96c6\u5408\u7c7b\u65b9\u9762\u7684\u6587\u7ae0\uff0c\u8bf7\u53c2\u89c1\u6587\u96c6 \u300aJava \u96c6\u5408\u7c7b\u300b \u200b Deque \u63a5\u53e3\u662f double ended queue \u7684\u7f29\u5199\uff0c\u5373\u53cc\u7aef\u961f\u5217\uff0c\u652f\u6301\u5728\u961f\u5217\u7684\u4e24\u7aef\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\uff0c\u7ee7\u627f Queue \u63a5\u53e3\u3002 public interface Deque extends Queue Deque \u7684 12 \u79cd\u65b9\u6cd5\u603b\u7ed3\u5982\u4e0b\uff1a \u63d2\u5165\uff1a \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 void addFirst(Object e) void addLast(Object e) \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c ( null \u6216 false ) boolean offerFirst(Object e) boolean offerLast(Object e); \u5220\u9664\uff1a \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 Object removeFirst() Object removeLast() \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c ( null \u6216 false ) Object pollFirst() Object pollLast() \u83b7\u53d6\uff1a \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u629b\u51fa\u5f02\u5e38 Object getFirst() Object getLast() \u5982\u679c\u64cd\u4f5c\u5931\u8d25\u5219\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c ( null \u6216 false ) Object peekFirst() Object peekLast() Deque \u4e0e List \u4e0d\u540c\uff0c\u8be5\u63a5\u53e3\u4e0d\u652f\u6301\u4e0b\u6807\u8bbf\u95ee\u5143\u7d20\u3002 Deque \u7684\u5b9e\u73b0\u5e76\u4e0d\u4e25\u683c\u8981\u6c42\u7981\u6b62\u63d2\u5165\u5143\u7d20 null \uff0c\u4f46\u5f3a\u70c8\u9f13\u52b1\u4e0d\u63d2\u5165 null \u3002\u4efb\u4f55 Deque \u7684\u5b9e\u73b0\u90fd\u5f3a\u70c8\u9f13\u52b1\u4e0d\u8981\u63d2\u5165 null \uff0c\u56e0\u4e3a null \u662f\u591a\u79cd\u65b9\u6cd5\u4f5c\u4e3a\u4e00\u79cd\u7279\u6b8a\u8fd4\u56de\u503c\u6765\u8868\u793a Deque \u4e3a\u7a7a\u3002 ArrayDeque \u548c LinkedList \u7c7b\u662f Deque \u63a5\u53e3\u7684\u4e24\u4e2a\u5b9e\u73b0\u7c7b\uff1a ArrayDeque \u7c7b\u7531\u6570\u7ec4\u652f\u6301\u3002\u9002\u5408\u5f53\u4f5c\u5806\u6808\u4f7f\u7528\u3002 LinkedList \u7c7b\u7531\u94fe\u8868\u652f\u6301\u3002\u9002\u5408\u5f53\u4f5c FIFO \u961f\u5217\u4f7f\u7528\u3002 public static void main ( String [] args ) { Deque < Integer > deque = new LinkedList <> (); deque . addLast ( 1 ); deque . offerLast ( 2 ); deque . offerLast ( 3 ); deque . offerLast ( 4 ); System . out . println ( deque ); // [1, 2, 3, 4] while ( deque . peekFirst () != null ) { System . out . println ( deque . peekFirst ()); deque . removeFirst (); } } \u5f15\u7528\uff1a Java \u53cc\u7aef\u961f\u5217","title":"deque"},{"location":"JavaAPI/#stack","text":"\u65b9\u6cd5\uff1apush, pop, peek, isEmpty, size import java.util.Stack ; public class TestStack { public static void main ( String [] args ) { Stack < Integer > s = new Stack < Integer > (); //\u521d\u59cb\u5316 for ( int i = 0 ; i < 10 ; i ++ ) { s . push ( i ); //\u5165\u6808 } //\u96c6\u5408\u904d\u5386\u65b9\u5f0f for ( Integer x : s ) { System . out . println ( x ); } System . out . println ( \"------1-----\" ); //\u6808\u5f39\u51fa\u904d\u5386\u65b9\u5f0f // while (s.peek()!=null) { //\u4e0d\u5065\u58ee\u7684\u5224\u65ad\u65b9\u5f0f\uff0c\u5bb9\u6613\u629b\u5f02\u5e38\uff0c\u6b63\u786e\u5199\u6cd5\u662f\u4e0b\u9762\u7684 while ( ! s . isEmpty ()) { System . out . println ( s . pop ()); //\u51fa\u6808 } System . out . println ( \"------2-----\" ); //\u9519\u8bef\u7684\u904d\u5386\u65b9\u5f0f // for (Integer x : s) { // System.out.println(s.pop()); // } } }","title":"stack"},{"location":"JavaAPI/#set","text":"\u521d\u59cb\u5316 Set < Integer > set = new HashSet <> (); //\u628a\u96c6\u5408\u5982Stack\u3001Queue\u3001List\u7b49Collection\u4f5c\u4e3a\u53c2\u6570 List < Integer > list = new ArrayList <> ....; Set < Integer > set = new HashSet <> ( list ); \u65b9\u6cd5\uff1aadd, remove, contains, isEmpty, size","title":"set"},{"location":"JavaAPI/#priorityqueue-heap","text":"\u5e95\u5c42\u662f\u4e00\u9897\u6570\uff0c \u4ee5\u5c0f\u6839\u5806\u4e3a\u4f8b \u521d\u59cb\u5316 //\u5c0f\u6839\u5806 Queue < Integer > minH = new PriorityQueue <> (); // \u5c0f\u6839\u5806\uff0c\u9ed8\u8ba4\u5927\u5c0f\u4e3a11 \u76f8\u5f53\u4e8e new PriorityQueue<>(11) Queue < Integer > minH = new PriorityQueue <> ( 100 ); // \u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u5bb9\u91cf\u6709100\u7684\u5c0f\u6839\u5806\u3002\u5728\u5f53\u4e2d\u589e\u52a0\u5143\u7d20\u4f1a\u6269\u5bb9\uff0c\u53ea\u662f\u5f00\u59cb\u6307\u5b9a\u5927\u5c0f\u3002\u4e0d\u662fsize\uff0c\u662fcapacity //\u5927\u6839\u5806 Queue < Integer > maxH = new PriorityQueue <> (( i1 , i2 ) -> i2 - i1 ); // \u5927\u6839\u5806\uff0c\u9ed8\u8ba4\u5927\u5c0f\u4e3a11 \u76f8\u5f53\u4e8e new PriorityQueue<>(11, (i1, i2) -> i2 - i1) Queue < Integer > maxH = new PriorityQueue <> ( 100 , ( i1 , i2 ) -> i2 - i1 ); // \u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u5bb9\u91cf\u6709100\u7684\u5927\u6839\u5806\u3002\u5728\u5f53\u4e2d\u589e\u52a0\u5143\u7d20\u4f1a\u6269\u5bb9\uff0c\u53ea\u662f\u5f00\u59cb\u6307\u5b9a\u5927\u5c0f \u65b9\u6cd5\uff1aoffer, poll, peek, isEmpty, size","title":"\u4f18\u5148\u961f\u5217 PriorityQueue (Heap)"},{"location":"JavaAPI/#_5","text":"","title":"\u6570\u7ec4"},{"location":"JavaAPI/#_6","text":"//\u4e00\u7ef4 String [] s = new String [ 3 ] ; char [] b = new char [] { 'a' , 'b' }; //\u4e8c\u7ef4 // \u4e8c\u7ef4 int [][] c = new int [ 10 ][ 10 ] ; Arrays.sort \u4ece\u5c0f\u5230\u5927\u6392\u5e8f Arrays . sort ( int [] arr ) //\u4ece\u5c0f\u5230\u5927\u6392\u5e8f Arrays . sort ( int [] arr , int fromIndex , int toIndex ) // [) Arrays . sort ( int [] arr , int fromIndex , int toIndex , \u6bd4\u8f83\u5668 ); //\u4e00\u5b9a\u662f\u9700\u8981\u6cdb\u578b Arrays . sort ( arr , ( o1 , o2 ) -> o2 - o1 ); //\u6570\u7ec4\u5168\u90e8 \u4ece\u5927\u5230\u5c0f\u6392\u5e8f \u8ddfCollections.sort()\u4e00\u6837 Arrays . sort ( arr , 0 , 3 , ( o1 , o2 ) -> o2 - o1 ); //\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u53ea\u6392\u5e8f[0, 3) Arrays.fill \u586b\u6ee1\u4e00\u4e2a\u6570\u7ec4 int[] a = new int[5]; Arrays.fill(a, 1); Arrays.copyOf / arr.clone() \u590d\u5236\u4e00\u4e2a\u6570\u7ec4 (\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u53ef\u4ee5) int [] a = new int [ 5 ]; int [] newA = Array.copyOf(a, 5 ); // or int [][] a = {{ 1 }, { 1 , 2 }, { 1 , 2 , 3 }, { 1 , 2 , 3 , 4 }, { 1 , 2 , 3 , 4 , 5 }}; // \u4e0d\u662f5*5\uff0c\u7b2c\u4e00\u7ef41 2 3 4 5 int [][] newa = a.clone(); // \u4e0d\u662f5*5\u77e9\u9635 \u76f8\u7b49\u6bd4\u8f83 arr1.equals(arr2) \u6bd4\u8f83\u7684\u662f\u4e24\u4e2a\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u4e0d\u662f\u91cc\u9762\u7684\u6570\uff0c\u800c Arrays.equals \u91cd\u5199\u4e86 equals\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u80fd\u6bd4\u8f83\u5143\u7d20\u662f\u5426\u76f8\u7b49\u3002 \u4e8c\u5206\u67e5\u627e\u6cd5\u627e\u6307\u5b9a\u5143\u7d20\u7684\u7d22\u5f15\u503c\uff08\u4e0b\u6807\uff09 int []arr = {10,20,30,40,50}; System.out.println(Arrays.binarySearch(arr, 20));//\u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56de-x \u622a\u53d6\u6570\u7ec4\uff1acopeOf \u548c copeOfRange int [] arr = { 10 , 20 , 30 , 40 , 50 }; int [] arr1 = Arrays . copyOf ( arr , 3 ); //\u622a\u53d6arr\u6570\u7ec4\u76843\u4e2a\u5143\u7d20\u8d4b\u503c\u7ed9\u59d3\u6570\u7ec4arr1 10 20 30 int [] arr = { 10 , 20 , 30 , 40 , 50 }; int [] arr1 = Arrays . copyOfRange ( arr , 1 , 3 ); // [) 10 20","title":"\u9759\u6001\u6570\u7ec4"},{"location":"JavaAPI/#_7","text":"List < Integer > array = new ArrayList <> (); // \u6570\u7ec4 List < Integer > list = new LinkedList <> (); // \u94fe\u8868 List < List < Integer >> = new ArrayList <> (); //\u4e8c\u7ef4\u6570\u7ec4 //Integer\u8f6cint\u6570\u7ec4 Integer[] cannot be converted to int[] List < Integer > list = new ArrayList < Integer > (); int [] array = list . stream (). mapToInt ( i -> i ). toArray (); List \u63a5\u53e3\u65b9\u6cd5: . get ( int index ) . size () . add ( E e ) // \u5728\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20e --- O(1) . add ( int index , E e ) // \u5728index\u4f4d\u7f6e\u63d2\u4e00\u4e2a\u5143\u7d20e --- O(n) . remove ( int index ) // \u5220\u9664\u4f4d\u4e8eindex\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u5220\u9664\u5143\u7d20e list . remove ( list . size () - 1 ); . subList ( int from , int to ) // \u76f8\u5f53\u4e8e\u8fd4\u56de\u539f\u6570\u7ec4\u7684\u4e00\u4e2a\u7247\u6bb5,\u4f46\u4e0d\u8981\u5bf9\u5176\u8fdb\u884c\u6539\u52a8\uff0c\u6539\u52a8\u4f1a\u5f71\u54cd\u539f\u6570\u7ec4 \u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u6bd4\u8f83\u5668","title":"\u52a8\u6001\u6570\u7ec4"},{"location":"JavaAPI/#math","text":"Math . max ( long a , long b ) Math . sqrt ( double a ) Math . abs ( double a ) //\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u548c\u53c2\u6570\u7c7b\u578b\u4e00\u81f4\u7684\u7edd\u5bf9\u503c Math . pow ( double a , double b ) \u53d6\u6574 Math . ceil ( double x ); //\u5411\u4e0a\u53d6\u6574 Math . floor ( double x ); //\u5411\u4e0b\u53d6\u6574 Math . round ( double x ); //\u56db\u820d\u4e94\u5165 \u968f\u673a\u6570\uff0c\u751f\u6210\u4e00\u4e2a [0,1) \u4e4b\u95f4\u7684 double \u7c7b\u578b\u7684\u4f2a\u968f\u673a\u6570 Math . random () int a = ( int )( Math . random () * b + 1 ); // [1, b] int a = ( int )( Math . random () * ( b - a + 1 ) + a ); //[a, b]","title":"Math"},{"location":"JavaAPI/#_8","text":"","title":"\u5b57\u6bcd\u6570\u5b57\u6709\u5173\u51fd\u6570"},{"location":"Linux/","text":"","title":"Linux"},{"location":"%E5%B7%A5%E5%85%B7/Git/","text":"","title":"Git"},{"location":"%E5%B7%A5%E5%85%B7/%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/","text":"","title":"\u7b14\u8bb0\u7cfb\u7edf"},{"location":"%E5%B7%A5%E5%85%B7/%E8%AE%BA%E6%96%87/","text":"","title":"\u8bba\u6587"},{"location":"%E5%BC%80%E5%8F%91/C%2B%2B/","text":"","title":"C++"},{"location":"%E5%BC%80%E5%8F%91/Go/","text":"","title":"Go"},{"location":"%E5%BC%80%E5%8F%91/Java/","text":"Spring Boot \u6559\u7a0b\u63a8\u8350 \u00b6 \u4e0b\u9762\u7684\u9879\u76ee\u4e2d\u8981\u5c5e\u827f\u827f\u7684 SpringBoot-Labs \u6700\u4e3a\u6df1\u5165\uff0c\u8fd9\u70b9\u5f53\u4f60\u770b\u5b8c\u6240\u6709\u9879\u76ee\u4e4b\u540e\u5c31\u5f88\u5bb9\u6613\u770b\u51fa\u6765\u3002 \u6211\u5f00\u6e90\u7684 springboot-guide \u7684\u8bdd\uff0c\u6709\u65f6\u95f4\u8fd8\u662f\u7ee7\u7eed\u7ef4\u62a4\u8d77\u6765\u5427\uff01\u5206\u4eab\u4e00\u4e9b\u5b9e\u9645\u6709\u7528\u7684\u4e1c\u897f\uff0c\u8ba9\u5927\u5bb6\u770b\u4e86\u4e4b\u540e\u53c8\u5c31\u53ef\u4ee5\u7528\u5230\u9879\u76ee\u4e0a\u3002 1.spring-boot-demo\uff0815.2k star\uff09 spring boot demo \u662f\u4e00\u4e2a\u7528\u6765\u6df1\u5ea6\u5b66\u4e60\u5e76\u5b9e\u6218 spring boot \u7684\u9879\u76ee\uff0c\u76ee\u524d\u603b\u5171\u5305\u542b 65 \u4e2a\u96c6\u6210 demo\uff0c\u5df2\u7ecf\u5b8c\u6210 53 \u4e2a\u3002 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u9879\u76ee\u5b66\u4e60\u5230 Spring Boot \u4e0e\u57fa\u672c\u6240\u6709\u6280\u672f\u7684\u96c6\u6210\uff0c\u6bd4\u5982 actuator( \u76d1\u63a7 )\u3001JPA(\u5f3a\u5927\u7684 ORM \u6846\u67b6)\u3001mybatis(\u5f3a\u5927\u7684 ORM \u6846\u67b6)\u3001mybatis-plus(\u5feb\u901f\u64cd\u4f5c Mybatis\uff09\u7b49\u7b49\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/xkcoding/spring-boot-demo \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a 2.SpringBoot-Labs(4k star) \u57fa\u4e8e Spring Boot 2.X \u7684 Spring Boot \u6df1\u5165\u5b66\u4e60\u9879\u76ee\u3002 \u5e02\u9762\u4e0a\u7684 Spring Boot **\u57fa\u7840**\u5165\u95e8\u6587\u7ae0\u5f88\u591a\uff0c\u4f46\u662f**\u6df1\u5ea6**\u5165\u95e8\u6587\u7ae0\u5374\u5f88\u5c11\u3002\u827f\u827f\u7684 Spring Boot \u7cfb\u5217\uff0c\u5e26\u4f60\u5168\u9762\u4e14\u6df1\u5ea6\u5730\u5b66\u4e60 Spring Boot 2.X \u3002 \u53e6\u5916\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e0d\u5149\u6709 Spring Boot 2.X,\u8fd8\u6709 Spring Cloud\u3001Spring Cloud Alibaba\u3001Dubbo\u3001\u5206\u5e03\u5f0f\u6d88\u606f\u961f\u5217\u3001\u5206\u5e03\u5f0f\u4e8b\u52a1\u8fd9\u4e9b\u5185\u5bb9\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/YunaiV/SpringBoot-Labs \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a 3.springboot-guide(2.1k star) \u8fd9\u4e2a\u9879\u76ee\u662f Guide \u81ea\u5df1\u5f00\u6e90\u7684\uff0c\u8bf4\u5b9e\u8bdd\u66f4\u65b0\u7684\u4e0d\u662f\u7279\u522b\u52e4\u5feb\uff0c\u6709\u4e00\u6bb5\u65f6\u95f4\u6ca1\u66f4\u65b0\u4e86\u3002 \u8fd9\u4e2a\u9879\u76ee\u4e3b\u8981\u6db5\u76d6\u4e86 Spring Boot \u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u4e9b\u77e5\u8bc6\u70b9\uff0c\u6bd4\u5982\u5982\u4f55\u4f18\u96c5\u5730\u8fdb\u884c\u5f02\u5e38\u5904\u7406\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/Snailclimb/springboot-guide \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a 4.springBoot\uff083.8k star\uff09 \u8fd9\u4e2a\u9879\u76ee\u540c\u6837\u662f springboot \u6846\u67b6\u4e0e\u5176\u5b83\u7ec4\u4ef6\u7ed3\u5408\u5982 jpa\u3001mybatis\u3001websocket\u3001security\u3001shiro\u3001cache \u7b49\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/527515025/springBoot \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a Spring Boot \u5b9e\u6218\u9879\u76ee/\u811a\u624b\u67b6\u63a8\u8350 \u00b6 \u5bf9\u4e8e\u4e0b\u9762\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u53ef\u4ee5\u8fd9\u6837\u8bf4\u6bcf\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u90fd\u6709\u5f88\u591a\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\u3002\u5982\u679c\u4f60\u60f3\u771f\u6b63\u5b66\u5230\u4e1c\u897f\u7684\u8bdd\uff0c\u5efa\u8bae\u4e0d\u5149\u8981\u628a\u9879\u76ee\u8dd1\u8d77\u6765\u66f4\u8981\u53bb\u4f18\u5316\uff01 \u7b80\u5355\u8bf4\u51e0\u4e2a\u6bd4\u8f83\u5bb9\u6613\u7684\u4f18\u5316\u70b9\uff1a \u5168\u5c40\u5f02\u5e38\u5904\u7406\uff0c\u5f88\u591a\u9879\u76ee\u8fd9\u65b9\u9762\u90fd\u505a\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u8fd9\u7bc7\u6587\u7ae0\uff1a \u300a\u4f7f\u7528\u679a\u4e3e\u7b80\u5355\u5c01\u88c5\u4e00\u4e2a\u4f18\u96c5\u7684 Spring Boot \u5168\u5c40\u5f02\u5e38\u5904\u7406\uff01\u300b \u6765\u505a\u4f18\u5316\u3002 \u9879\u76ee\u7684\u6280\u672f\u9009\u578b\u4f18\u5316\uff0c\u6bd4\u5982\u4f7f\u7528 Guava \u505a\u672c\u5730\u7f13\u5b58\u7684\u5730\u65b9\u53ef\u4ee5\u6362\u6210 Caffeine \u3002Caffeine \u7684\u5404\u65b9\u9762\u7684\u8868\u73b0\u8981\u66f4\u52a0\u597d\uff01\u518d\u6bd4\u5982 Controller \u5c42\u662f\u5426\u653e\u4e86\u592a\u591a\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u6570\u636e\u5e93\u65b9\u9762\uff1a\u6570\u636e\u5e93\u8bbe\u8ba1\u53ef\u5426\u4f18\u5316\uff1f\u7d22\u5f15\u662f\u5426\u4f7f\u7528\u4f7f\u7528\u6b63\u786e\uff1fSQL \u8bed\u53e5\u662f\u5426\u53ef\u4ee5\u4f18\u5316\uff1f \u2026 1.eladmin(9.4k star) eladmin \u662f\u4e00\u6b3e\u57fa\u4e8e Spring Boot 2.1.0 \u3001 Jpa\u3001 Spring Security\u3001redis\u3001Vue \u7684\u524d\u540e\u7aef\u5206\u79bb\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\uff0c\u9879\u76ee\u91c7\u7528\u5206\u6a21\u5757\u5f00\u53d1\u65b9\u5f0f\uff0c \u6743\u9650\u63a7\u5236\u91c7\u7528 RBAC\uff0c\u652f\u6301\u6570\u636e\u5b57\u5178\u4e0e\u6570\u636e\u6743\u9650\u7ba1\u7406\uff0c\u652f\u6301\u4e00\u952e\u751f\u6210\u524d\u540e\u7aef\u4ee3\u7801\uff0c\u652f\u6301\u52a8\u6001\u8def\u7531\u3002 \u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u57fa\u672c\u7a33\u5b9a\uff0c\u5e76\u4e14\u540e\u7eed\u4f5c\u8005\u8fd8\u4f1a\u7ee7\u7eed\u4f18\u5316\u3002\u5e76\u4e14\uff0c\u5b8c\u5168\u5f00\u6e90\uff01\u8fd9\u4e2a\u771f\u7684\u8981\u4e3a\u539f\u4f5c\u8005\u70b9\u4e2a\u8d5e\uff0c\u5982\u679c\u5927\u5bb6\u89c9\u5f97\u8fd9\u4e2a\u9879\u76ee\u6709\u7528\u7684\u8bdd\uff0c\u5efa\u8bae\u53ef\u4ee5\u7a0d\u5fae\u6350\u8d60\u4e00\u4e0b\u539f\u4f5c\u8005\u652f\u6301\u4e00\u4e0b\u3002\u540e\u7aef\u6574\u7406\u4ee3\u7801\u8d28\u91cf\u3001\u8868\u8bbe\u8ba1\u7b49\u5404\u4e2a\u65b9\u9762\u6765\u8bf4\u90fd\u662f\u5f88\u4e0d\u9519\u7684\u3002\u524d\u540e\u7aef\u5206\u79bb\uff0c\u524d\u7aef\u4f7f\u7528\u7684\u662f\u56fd\u5185\u5e38\u7528\u7684 vue \u6846\u67b6\uff0c\u4e5f\u6bd4\u8f83\u5bb9\u6613\u4e0a\u624b\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/elunez/eladmin \u3002 2.mall(36.1k star) \u4e00\u4f4d\u670b\u53cb\u7684\u9879\u76ee\uff0c\u975e\u5e38\u4e0d\u9519\uff0c\u503c\u5f97\u63a8\u8350! mall \u8fd9\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u662f\u4e00\u5957\u7535\u5546\u7cfb\u7edf\uff0c\u5305\u62ec\u524d\u53f0\u5546\u57ce\u7cfb\u7edf\u53ca\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\uff0c\u57fa\u4e8e SpringBoot+MyBatis \u5b9e\u73b0\uff0c\u91c7\u7528 Docker \u5bb9\u5668\u5316\u90e8\u7f72\u3002 \u524d\u53f0\u5546\u57ce\u7cfb\u7edf\u5305\u542b\u9996\u9875\u95e8\u6237\u3001\u5546\u54c1\u63a8\u8350\u3001\u5546\u54c1\u641c\u7d22\u3001\u5546\u54c1\u5c55\u793a\u3001\u8d2d\u7269\u8f66\u3001\u8ba2\u5355\u6d41\u7a0b\u3001\u4f1a\u5458\u4e2d\u5fc3\u3001\u5ba2\u6237\u670d\u52a1\u3001\u5e2e\u52a9\u4e2d\u5fc3\u7b49\u6a21\u5757\u3002 \u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u5305\u542b\u5546\u54c1\u7ba1\u7406\u3001\u8ba2\u5355\u7ba1\u7406\u3001\u4f1a\u5458\u7ba1\u7406\u3001\u4fc3\u9500\u7ba1\u7406\u3001\u8fd0\u8425\u7ba1\u7406\u3001\u5185\u5bb9\u7ba1\u7406\u3001\u7edf\u8ba1\u62a5\u8868\u3001\u8d22\u52a1\u7ba1\u7406\u3001\u6743\u9650\u7ba1\u7406\u3001\u8bbe\u7f6e\u7b49\u6a21\u5757\u3002 \u53e6\u5916\uff0c\u8fd9\u4e2a\u9879\u76ee\u8fd8\u63d0\u4f9b\u4e86\u8be6\u7ec6\u7684\u6587\u6863\uff0c\u5e2e\u52a9\u4f60\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/macrozheng/mall \u3002 3.vhr(16.9k star) \u6c5f\u5357\u4e00\u70b9\u96e8\u5927\u4f6c\u7684\u529b\u4f5c\u3002\u6574\u4e2a\u9879\u76ee\u4e0d\u8bba\u662f\u524d\u7aef\u8fd8\u662f\u540e\u7aef\u7684\u4ee3\u7801\u8d28\u91cf\u90fd\u6bd4\u8f83\u9ad8\uff0c\u975e\u5e38\u503c\u5f97\u5b66\u4e60\u3002 \u7136\u540e\uff0cvhr\uff08\u5fae\u4eba\u4e8b\uff09\u8fd9\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u662f\u4e00\u4e2a\u524d\u540e\u7aef\u5206\u79bb\u7684\u4eba\u529b\u8d44\u6e90\u7ba1\u7406\u7cfb\u7edf\uff0c\u540e\u7aef\u57fa\u4e8e SpringBoot \u5f00\u53d1\uff0c\u524d\u7aef\u57fa\u4e8e Vue \u5f00\u53d1\uff0c\u5e76\u4e14\uff0c\u9879\u76ee\u52a0\u5165\u5e38\u89c1\u7684\u4f01\u4e1a\u7ea7\u5e94\u7528\u6240\u6d89\u53ca\u5230\u7684\u6280\u672f\u70b9\uff0c\u4f8b\u5982 Redis\u3001RabbitMQ \u7b49\u3002 \u53e6\u5916\uff0c\u8fd9\u4e2a\u9879\u76ee\u63d0\u4f9b\u4e86\u975e\u5e38\u8be6\u7ec6\u7684\u6587\u6863\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/lenve/vhr \u3002 4.favorites-web(3.9k star) \u57fa\u4e8e Spring Boot 2.X \u7684\u5f00\u6e90\u9879\u76ee\u3002favorites-web\uff08\u4e91\u6536\u85cf\uff09\u662f\u4e00\u4e2a\u4f7f\u7528 Spring Boot \u6784\u5efa\u7684\u5f00\u6e90\u7f51\u7ad9\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u5728\u7ebf\u968f\u65f6\u968f\u5730\u6536\u85cf\u7684\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5728\u7f51\u7ad9\u4e0a\u5206\u7c7b\u6574\u7406\u6536\u85cf\u7684\u7f51\u7ad9\u6216\u8005\u6587\u7ae0\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/cloudfavorites/favorites-web \u3002 5.community(0.8k star) \u5f00\u6e90\u8bba\u575b\u3001\u95ee\u7b54\u7cfb\u7edf\uff0c\u73b0\u6709\u529f\u80fd\u63d0\u95ee\u3001\u56de\u590d\u3001\u901a\u77e5\u3001\u6700\u65b0\u3001\u6700\u70ed\u3001\u6d88\u9664\u96f6\u56de\u590d\u529f\u80fd\u3002\u529f\u80fd\u6301\u7eed\u66f4\u65b0\u4e2d\u2026\u2026 \u6280\u672f\u6808 Spring\u3001Spring Boot\u3001MyBatis\u3001MySQL/H2\u3001Bootstrap\u3002 \u76ee\u524d\u8fd9\u4e2a\u5199\u5728\u7b80\u5386\u4e0a\u7684\u91cd\u590d\u7387\u8fd8\u597d\uff0c\u81ea\u5df1\u7a0d\u5fae\u6539\u9020\u4e00\u4e0b\u8fd8\u662f\u5f88\u6709\u6f5c\u529b\u7684\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/codedrinker/community \u3002 6.SpringBoot-Shiro-Vue(2.7k star) \u63d0\u4f9b\u4e00\u5957\u57fa\u4e8e Spring Boot-Shiro-Vue \u7684\u6743\u9650\u7ba1\u7406\u601d\u8def.\u524d\u540e\u7aef\u90fd\u52a0\u4ee5\u63a7\u5236,\u505a\u5230\u6309\u94ae/\u63a5\u53e3\u7ea7\u522b\u7684\u6743\u9650 \u9879\u76ee\u5730\u5740\uff1a https://github.com/Heeexy/SpringBoot-Shiro-Vue \u3002","title":"Java"},{"location":"%E5%BC%80%E5%8F%91/Java/#spring-boot","text":"\u4e0b\u9762\u7684\u9879\u76ee\u4e2d\u8981\u5c5e\u827f\u827f\u7684 SpringBoot-Labs \u6700\u4e3a\u6df1\u5165\uff0c\u8fd9\u70b9\u5f53\u4f60\u770b\u5b8c\u6240\u6709\u9879\u76ee\u4e4b\u540e\u5c31\u5f88\u5bb9\u6613\u770b\u51fa\u6765\u3002 \u6211\u5f00\u6e90\u7684 springboot-guide \u7684\u8bdd\uff0c\u6709\u65f6\u95f4\u8fd8\u662f\u7ee7\u7eed\u7ef4\u62a4\u8d77\u6765\u5427\uff01\u5206\u4eab\u4e00\u4e9b\u5b9e\u9645\u6709\u7528\u7684\u4e1c\u897f\uff0c\u8ba9\u5927\u5bb6\u770b\u4e86\u4e4b\u540e\u53c8\u5c31\u53ef\u4ee5\u7528\u5230\u9879\u76ee\u4e0a\u3002 1.spring-boot-demo\uff0815.2k star\uff09 spring boot demo \u662f\u4e00\u4e2a\u7528\u6765\u6df1\u5ea6\u5b66\u4e60\u5e76\u5b9e\u6218 spring boot \u7684\u9879\u76ee\uff0c\u76ee\u524d\u603b\u5171\u5305\u542b 65 \u4e2a\u96c6\u6210 demo\uff0c\u5df2\u7ecf\u5b8c\u6210 53 \u4e2a\u3002 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u9879\u76ee\u5b66\u4e60\u5230 Spring Boot \u4e0e\u57fa\u672c\u6240\u6709\u6280\u672f\u7684\u96c6\u6210\uff0c\u6bd4\u5982 actuator( \u76d1\u63a7 )\u3001JPA(\u5f3a\u5927\u7684 ORM \u6846\u67b6)\u3001mybatis(\u5f3a\u5927\u7684 ORM \u6846\u67b6)\u3001mybatis-plus(\u5feb\u901f\u64cd\u4f5c Mybatis\uff09\u7b49\u7b49\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/xkcoding/spring-boot-demo \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a 2.SpringBoot-Labs(4k star) \u57fa\u4e8e Spring Boot 2.X \u7684 Spring Boot \u6df1\u5165\u5b66\u4e60\u9879\u76ee\u3002 \u5e02\u9762\u4e0a\u7684 Spring Boot **\u57fa\u7840**\u5165\u95e8\u6587\u7ae0\u5f88\u591a\uff0c\u4f46\u662f**\u6df1\u5ea6**\u5165\u95e8\u6587\u7ae0\u5374\u5f88\u5c11\u3002\u827f\u827f\u7684 Spring Boot \u7cfb\u5217\uff0c\u5e26\u4f60\u5168\u9762\u4e14\u6df1\u5ea6\u5730\u5b66\u4e60 Spring Boot 2.X \u3002 \u53e6\u5916\uff0c\u8fd9\u4e2a\u9879\u76ee\u4e0d\u5149\u6709 Spring Boot 2.X,\u8fd8\u6709 Spring Cloud\u3001Spring Cloud Alibaba\u3001Dubbo\u3001\u5206\u5e03\u5f0f\u6d88\u606f\u961f\u5217\u3001\u5206\u5e03\u5f0f\u4e8b\u52a1\u8fd9\u4e9b\u5185\u5bb9\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/YunaiV/SpringBoot-Labs \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a 3.springboot-guide(2.1k star) \u8fd9\u4e2a\u9879\u76ee\u662f Guide \u81ea\u5df1\u5f00\u6e90\u7684\uff0c\u8bf4\u5b9e\u8bdd\u66f4\u65b0\u7684\u4e0d\u662f\u7279\u522b\u52e4\u5feb\uff0c\u6709\u4e00\u6bb5\u65f6\u95f4\u6ca1\u66f4\u65b0\u4e86\u3002 \u8fd9\u4e2a\u9879\u76ee\u4e3b\u8981\u6db5\u76d6\u4e86 Spring Boot \u6bd4\u8f83\u91cd\u8981\u7684\u4e00\u4e9b\u77e5\u8bc6\u70b9\uff0c\u6bd4\u5982\u5982\u4f55\u4f18\u96c5\u5730\u8fdb\u884c\u5f02\u5e38\u5904\u7406\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/Snailclimb/springboot-guide \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a 4.springBoot\uff083.8k star\uff09 \u8fd9\u4e2a\u9879\u76ee\u540c\u6837\u662f springboot \u6846\u67b6\u4e0e\u5176\u5b83\u7ec4\u4ef6\u7ed3\u5408\u5982 jpa\u3001mybatis\u3001websocket\u3001security\u3001shiro\u3001cache \u7b49\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/527515025/springBoot \u3002 \u8fd9\u4e2a\u4ed3\u5e93\u7684\u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a","title":"Spring Boot \u6559\u7a0b\u63a8\u8350"},{"location":"%E5%BC%80%E5%8F%91/Java/#spring-boot_1","text":"\u5bf9\u4e8e\u4e0b\u9762\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u53ef\u4ee5\u8fd9\u6837\u8bf4\u6bcf\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u90fd\u6709\u5f88\u591a\u53ef\u4ee5\u4f18\u5316\u7684\u5730\u65b9\u3002\u5982\u679c\u4f60\u60f3\u771f\u6b63\u5b66\u5230\u4e1c\u897f\u7684\u8bdd\uff0c\u5efa\u8bae\u4e0d\u5149\u8981\u628a\u9879\u76ee\u8dd1\u8d77\u6765\u66f4\u8981\u53bb\u4f18\u5316\uff01 \u7b80\u5355\u8bf4\u51e0\u4e2a\u6bd4\u8f83\u5bb9\u6613\u7684\u4f18\u5316\u70b9\uff1a \u5168\u5c40\u5f02\u5e38\u5904\u7406\uff0c\u5f88\u591a\u9879\u76ee\u8fd9\u65b9\u9762\u90fd\u505a\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u7684\u8fd9\u7bc7\u6587\u7ae0\uff1a \u300a\u4f7f\u7528\u679a\u4e3e\u7b80\u5355\u5c01\u88c5\u4e00\u4e2a\u4f18\u96c5\u7684 Spring Boot \u5168\u5c40\u5f02\u5e38\u5904\u7406\uff01\u300b \u6765\u505a\u4f18\u5316\u3002 \u9879\u76ee\u7684\u6280\u672f\u9009\u578b\u4f18\u5316\uff0c\u6bd4\u5982\u4f7f\u7528 Guava \u505a\u672c\u5730\u7f13\u5b58\u7684\u5730\u65b9\u53ef\u4ee5\u6362\u6210 Caffeine \u3002Caffeine \u7684\u5404\u65b9\u9762\u7684\u8868\u73b0\u8981\u66f4\u52a0\u597d\uff01\u518d\u6bd4\u5982 Controller \u5c42\u662f\u5426\u653e\u4e86\u592a\u591a\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u6570\u636e\u5e93\u65b9\u9762\uff1a\u6570\u636e\u5e93\u8bbe\u8ba1\u53ef\u5426\u4f18\u5316\uff1f\u7d22\u5f15\u662f\u5426\u4f7f\u7528\u4f7f\u7528\u6b63\u786e\uff1fSQL \u8bed\u53e5\u662f\u5426\u53ef\u4ee5\u4f18\u5316\uff1f \u2026 1.eladmin(9.4k star) eladmin \u662f\u4e00\u6b3e\u57fa\u4e8e Spring Boot 2.1.0 \u3001 Jpa\u3001 Spring Security\u3001redis\u3001Vue \u7684\u524d\u540e\u7aef\u5206\u79bb\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\uff0c\u9879\u76ee\u91c7\u7528\u5206\u6a21\u5757\u5f00\u53d1\u65b9\u5f0f\uff0c \u6743\u9650\u63a7\u5236\u91c7\u7528 RBAC\uff0c\u652f\u6301\u6570\u636e\u5b57\u5178\u4e0e\u6570\u636e\u6743\u9650\u7ba1\u7406\uff0c\u652f\u6301\u4e00\u952e\u751f\u6210\u524d\u540e\u7aef\u4ee3\u7801\uff0c\u652f\u6301\u52a8\u6001\u8def\u7531\u3002 \u8fd9\u4e2a\u5f00\u6e90\u9879\u76ee\u57fa\u672c\u7a33\u5b9a\uff0c\u5e76\u4e14\u540e\u7eed\u4f5c\u8005\u8fd8\u4f1a\u7ee7\u7eed\u4f18\u5316\u3002\u5e76\u4e14\uff0c\u5b8c\u5168\u5f00\u6e90\uff01\u8fd9\u4e2a\u771f\u7684\u8981\u4e3a\u539f\u4f5c\u8005\u70b9\u4e2a\u8d5e\uff0c\u5982\u679c\u5927\u5bb6\u89c9\u5f97\u8fd9\u4e2a\u9879\u76ee\u6709\u7528\u7684\u8bdd\uff0c\u5efa\u8bae\u53ef\u4ee5\u7a0d\u5fae\u6350\u8d60\u4e00\u4e0b\u539f\u4f5c\u8005\u652f\u6301\u4e00\u4e0b\u3002\u540e\u7aef\u6574\u7406\u4ee3\u7801\u8d28\u91cf\u3001\u8868\u8bbe\u8ba1\u7b49\u5404\u4e2a\u65b9\u9762\u6765\u8bf4\u90fd\u662f\u5f88\u4e0d\u9519\u7684\u3002\u524d\u540e\u7aef\u5206\u79bb\uff0c\u524d\u7aef\u4f7f\u7528\u7684\u662f\u56fd\u5185\u5e38\u7528\u7684 vue \u6846\u67b6\uff0c\u4e5f\u6bd4\u8f83\u5bb9\u6613\u4e0a\u624b\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/elunez/eladmin \u3002 2.mall(36.1k star) \u4e00\u4f4d\u670b\u53cb\u7684\u9879\u76ee\uff0c\u975e\u5e38\u4e0d\u9519\uff0c\u503c\u5f97\u63a8\u8350! mall \u8fd9\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u662f\u4e00\u5957\u7535\u5546\u7cfb\u7edf\uff0c\u5305\u62ec\u524d\u53f0\u5546\u57ce\u7cfb\u7edf\u53ca\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\uff0c\u57fa\u4e8e SpringBoot+MyBatis \u5b9e\u73b0\uff0c\u91c7\u7528 Docker \u5bb9\u5668\u5316\u90e8\u7f72\u3002 \u524d\u53f0\u5546\u57ce\u7cfb\u7edf\u5305\u542b\u9996\u9875\u95e8\u6237\u3001\u5546\u54c1\u63a8\u8350\u3001\u5546\u54c1\u641c\u7d22\u3001\u5546\u54c1\u5c55\u793a\u3001\u8d2d\u7269\u8f66\u3001\u8ba2\u5355\u6d41\u7a0b\u3001\u4f1a\u5458\u4e2d\u5fc3\u3001\u5ba2\u6237\u670d\u52a1\u3001\u5e2e\u52a9\u4e2d\u5fc3\u7b49\u6a21\u5757\u3002 \u540e\u53f0\u7ba1\u7406\u7cfb\u7edf\u5305\u542b\u5546\u54c1\u7ba1\u7406\u3001\u8ba2\u5355\u7ba1\u7406\u3001\u4f1a\u5458\u7ba1\u7406\u3001\u4fc3\u9500\u7ba1\u7406\u3001\u8fd0\u8425\u7ba1\u7406\u3001\u5185\u5bb9\u7ba1\u7406\u3001\u7edf\u8ba1\u62a5\u8868\u3001\u8d22\u52a1\u7ba1\u7406\u3001\u6743\u9650\u7ba1\u7406\u3001\u8bbe\u7f6e\u7b49\u6a21\u5757\u3002 \u53e6\u5916\uff0c\u8fd9\u4e2a\u9879\u76ee\u8fd8\u63d0\u4f9b\u4e86\u8be6\u7ec6\u7684\u6587\u6863\uff0c\u5e2e\u52a9\u4f60\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/macrozheng/mall \u3002 3.vhr(16.9k star) \u6c5f\u5357\u4e00\u70b9\u96e8\u5927\u4f6c\u7684\u529b\u4f5c\u3002\u6574\u4e2a\u9879\u76ee\u4e0d\u8bba\u662f\u524d\u7aef\u8fd8\u662f\u540e\u7aef\u7684\u4ee3\u7801\u8d28\u91cf\u90fd\u6bd4\u8f83\u9ad8\uff0c\u975e\u5e38\u503c\u5f97\u5b66\u4e60\u3002 \u7136\u540e\uff0cvhr\uff08\u5fae\u4eba\u4e8b\uff09\u8fd9\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u662f\u4e00\u4e2a\u524d\u540e\u7aef\u5206\u79bb\u7684\u4eba\u529b\u8d44\u6e90\u7ba1\u7406\u7cfb\u7edf\uff0c\u540e\u7aef\u57fa\u4e8e SpringBoot \u5f00\u53d1\uff0c\u524d\u7aef\u57fa\u4e8e Vue \u5f00\u53d1\uff0c\u5e76\u4e14\uff0c\u9879\u76ee\u52a0\u5165\u5e38\u89c1\u7684\u4f01\u4e1a\u7ea7\u5e94\u7528\u6240\u6d89\u53ca\u5230\u7684\u6280\u672f\u70b9\uff0c\u4f8b\u5982 Redis\u3001RabbitMQ \u7b49\u3002 \u53e6\u5916\uff0c\u8fd9\u4e2a\u9879\u76ee\u63d0\u4f9b\u4e86\u975e\u5e38\u8be6\u7ec6\u7684\u6587\u6863\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/lenve/vhr \u3002 4.favorites-web(3.9k star) \u57fa\u4e8e Spring Boot 2.X \u7684\u5f00\u6e90\u9879\u76ee\u3002favorites-web\uff08\u4e91\u6536\u85cf\uff09\u662f\u4e00\u4e2a\u4f7f\u7528 Spring Boot \u6784\u5efa\u7684\u5f00\u6e90\u7f51\u7ad9\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u5728\u7ebf\u968f\u65f6\u968f\u5730\u6536\u85cf\u7684\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5728\u7f51\u7ad9\u4e0a\u5206\u7c7b\u6574\u7406\u6536\u85cf\u7684\u7f51\u7ad9\u6216\u8005\u6587\u7ae0\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/cloudfavorites/favorites-web \u3002 5.community(0.8k star) \u5f00\u6e90\u8bba\u575b\u3001\u95ee\u7b54\u7cfb\u7edf\uff0c\u73b0\u6709\u529f\u80fd\u63d0\u95ee\u3001\u56de\u590d\u3001\u901a\u77e5\u3001\u6700\u65b0\u3001\u6700\u70ed\u3001\u6d88\u9664\u96f6\u56de\u590d\u529f\u80fd\u3002\u529f\u80fd\u6301\u7eed\u66f4\u65b0\u4e2d\u2026\u2026 \u6280\u672f\u6808 Spring\u3001Spring Boot\u3001MyBatis\u3001MySQL/H2\u3001Bootstrap\u3002 \u76ee\u524d\u8fd9\u4e2a\u5199\u5728\u7b80\u5386\u4e0a\u7684\u91cd\u590d\u7387\u8fd8\u597d\uff0c\u81ea\u5df1\u7a0d\u5fae\u6539\u9020\u4e00\u4e0b\u8fd8\u662f\u5f88\u6709\u6f5c\u529b\u7684\u3002 \u9879\u76ee\u5730\u5740\uff1a https://github.com/codedrinker/community \u3002 6.SpringBoot-Shiro-Vue(2.7k star) \u63d0\u4f9b\u4e00\u5957\u57fa\u4e8e Spring Boot-Shiro-Vue \u7684\u6743\u9650\u7ba1\u7406\u601d\u8def.\u524d\u540e\u7aef\u90fd\u52a0\u4ee5\u63a7\u5236,\u505a\u5230\u6309\u94ae/\u63a5\u53e3\u7ea7\u522b\u7684\u6743\u9650 \u9879\u76ee\u5730\u5740\uff1a https://github.com/Heeexy/SpringBoot-Shiro-Vue \u3002","title":"Spring Boot \u5b9e\u6218\u9879\u76ee/\u811a\u624b\u67b6\u63a8\u8350"},{"location":"%E5%BC%80%E5%8F%91/Python/","text":"","title":"Python"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/","text":"\u5173\u673a/\u91cd\u542f/\u6ce8\u9500 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 shutdown -h now \u5373\u523b\u5173\u673a shutdown -h 10 10\u5206\u949f\u540e\u5173\u673a shutdown -h 11:00 11\uff1a00\u5173\u673a shutdown -h +10 \u9884\u5b9a\u65f6\u95f4\u5173\u673a\uff0810\u5206\u949f\u540e\uff09 shutdown -c \u53d6\u6d88\u6307\u5b9a\u65f6\u95f4\u5173\u673a shutdown -r now \u91cd\u542f shutdown -r 10 10\u5206\u949f\u4e4b\u540e\u91cd\u542f shutdown -r 11:00 \u5b9a\u65f6\u91cd\u542f reboot \u91cd\u542f init 6 \u91cd\u542f init 0 \u2f74\u523b\u5173\u673a telinit 0 \u5173\u673a poweroff \u2f74\u523b\u5173\u673a halt \u5173\u673a sync buff\u6570\u636e\u540c\u6b65\u5230\u78c1\u76d8 logout \u9000\u51fa\u767b\u5f55Shell \u7cfb\u7edf\u4fe1\u606f\u548c\u6027\u80fd\u67e5\u770b \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 uname -a \u67e5\u770b\u5185\u6838/OS/CPU\u4fe1\u606f uname -r \u67e5\u770b\u5185\u6838\u7248\u672c uname -m \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 arch \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 hostname \u67e5\u770b\u8ba1\u7b97\u673a\u540d who \u663e\u793a\u5f53\u524d\u767b\u5f55\u7cfb\u7edf\u7684\u2f64\u6237 who am i \u663e\u793a\u767b\u5f55\u65f6\u7684\u2f64\u6237\u540d whoami \u663e\u793a\u5f53\u524d\u2f64\u6237\u540d cat /proc/version \u67e5\u770blinux\u7248\u672c\u4fe1\u606f cat /proc/cpuinfo \u67e5\u770bCPU\u4fe1\u606f cat /proc/interrupts \u67e5\u770b\u4e2d\u65ad cat /proc/loadavg \u67e5\u770b\u7cfb\u7edf\u8d1f\u8f7d uptime \u67e5\u770b\u7cfb\u7edf\u8fd0\u2f8f\u65f6\u95f4\u3001\u2f64\u6237\u6570\u3001\u8d1f\u8f7d env \u67e5\u770b\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf lsusb -tv \u67e5\u770b\u7cfb\u7edfUSB\u8bbe\u5907\u4fe1\u606f lspci -tv \u67e5\u770b\u7cfb\u7edfPCI\u8bbe\u5907\u4fe1\u606f lsmod \u67e5\u770b\u5df2\u52a0\u8f7d\u7684\u7cfb\u7edf\u6a21\u5757 grep MemTotal /proc/meminfo \u67e5\u770b\u5185\u5b58\u603b\u91cf grep MemFree /proc/meminfo \u67e5\u770b\u7a7a\u95f2\u5185\u5b58\u91cf free -m \u67e5\u770b\u5185\u5b58\u2f64\u91cf\u548c\u4ea4\u6362\u533a\u2f64\u91cf date \u663e\u793a\u7cfb\u7edf\u2f47\u671f\u65f6\u95f4 cal 2021 \u663e\u793a2021\u2f47\u5386\u8868 top \u52a8\u6001\u663e\u793acpu/\u5185\u5b58/\u8fdb\u7a0b\u7b49\u60c5\u51b5 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd \u78c1\u76d8\u548c\u5206\u533a \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 fdisk -l \u67e5\u770b\u6240\u6709\u78c1\u76d8\u5206\u533a swapon -s \u67e5\u770b\u6240\u6709\u4ea4\u6362\u5206\u533a df -h \u67e5\u770b\u78c1\u76d8\u4f7f\u2f64\u60c5\u51b5\u53ca\u6302\u8f7d\u70b9 df -hl \u540c\u4e0a du -sh /dir \u67e5\u770b\u6307\u5b9a\u67d0\u4e2a\u2f6c\u5f55\u7684\u2f24\u2f29 du -sk * | sort -rn \u4ece\u2fbc\u5230\u4f4e\u4f9d\u6b21\u663e\u793a\u2f42\u4ef6\u548c\u2f6c\u5f55\u2f24\u2f29 mount /dev/hda2 /mnt/hda2 \u6302\u8f7dhda2\u76d8 mount -t ntfs /dev/sdc1 /mnt/usbhd1 \u6307\u5b9a\u2f42\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6302\u8f7d\uff08\u5982ntfs\uff09 mount -o loop xxx.iso /mnt/cdrom \u6302 \u8f7d iso \u2f42 \u4ef6 umount -v /dev/sda1 \u901a\u8fc7\u8bbe\u5907\u540d\u5378\u8f7d umount -v /mnt/mymnt \u901a\u8fc7\u6302\u8f7d\u70b9\u5378\u8f7d fuser -km /mnt/hda1 \u5f3a\u5236\u5378\u8f7d(\u614e\u2f64) \u2f64\u6237\u548c\u2f64\u6237\u7ec4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 useradd codesheep \u521b\u5efa\u2f64\u6237 userdel -r codesheep \u5220\u9664\u2f64\u6237 usermod -g group_name user_name \u4fee\u6539\u2f64\u6237\u7684\u7ec4 usermod -aG group_name user_name \u5c06\u2f64\u6237\u6dfb\u52a0\u5230\u7ec4 usermod -s /bin/ksh -d /home/codepig \u2013g dev codesheep \u4fee\u6539\u2f64\u6237codesheep\u7684\u767b\u5f55Shell\u3001\u4e3b\u2f6c\u5f55\u4ee5\u53ca\u2f64\u6237\u7ec4 groups test \u67e5\u770btest\u2f64\u6237\u6240\u5728\u7684\u7ec4 groupadd group_name \u521b\u5efa\u2f64\u6237\u7ec4 groupdel group_name \u5220\u9664\u2f64\u6237\u7ec4 groupmod -n new_name old_name \u91cd\u547d\u540d\u2f64\u6237\u7ec4 su - user_name su - user_name passwd \u4fee\u6539\u2f1d\u4ee4 passwd codesheep \u4fee\u6539\u67d0\u2f64\u6237\u7684\u2f1d\u4ee4 w \u67e5\u770b\u6d3b\u52a8\u2f64\u6237 id codesheep \u67e5\u770b\u6307\u5b9a\u2f64\u6237codesheep\u4fe1\u606f last \u67e5\u770b\u2f64\u6237\u767b\u5f55\u2f47\u5fd7 crontab -l \u67e5\u770b\u5f53\u524d\u2f64\u6237\u7684\u8ba1\u5212\u4efb\u52a1 cut -d: -f1 /etc/passwd \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u2f64\u6237 cut -d: -f1 /etc/group \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u7ec4 \u2f79\u7edc\u548c\u8fdb\u7a0b\u7ba1\u7406 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 ifconfig \u67e5\u770b\u2f79\u7edc\u63a5\u2f1d\u5c5e\u6027 ifconfig eth0 \u67e5\u770b\u67d0\u2f79\u5361\u7684\u914d\u7f6e route -n \u67e5\u770b\u8def\u7531\u8868 netstat -lntp \u67e5\u770b\u6240\u6709\u76d1\u542c\u7aef\u2f1d netstat -antp \u67e5\u770b\u5df2\u7ecf\u5efa\u2f74\u7684TCP\u8fde\u63a5 netstat -lutp \u67e5\u770bTCP/UDP\u7684\u72b6\u6001\u4fe1\u606f ifup eth0 \u542f\u2f64eth0\u2f79\u7edc\u8bbe\u5907 ifdown eth0 \u7981\u2f64eth0\u2f79\u7edc\u8bbe\u5907 iptables -L \u67e5\u770biptables\u89c4\u5219 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 \u914d\u7f6eip\u5730\u5740 dhclient eth0 \u4ee5dhcp\u6a21\u5f0f\u542f\u2f64eth0 route add -net 0/0 gw Gateway_IP \u914d\u7f6e\u9ed8\u8ba4\u2f79\u5173 route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 \u914d\u7f6e\u9759\u6001\u8def\u7531\u5230\u8fbe\u2f79\u7edc'192.168.0.0/16' route del 0/0 gw Gateway_IP \u5220\u9664\u9759\u6001\u8def\u7531 hostname \u67e5\u770b\u4e3b\u673a\u540d host www.baidu.com \u89e3\u6790\u4e3b\u673a\u540d nslookup www.baidu.com \u67e5\u8be2DNS\u8bb0\u5f55\uff0c\u67e5\u770b\u57df\u540d\u89e3\u6790\u662f\u5426\u6b63\u5e38 ps -ef \u67e5\u770b\u6240\u6709\u8fdb\u7a0b ps -ef | grep codesheep \u8fc7\u6ee4\u51fa\u4f60\u9700\u8981\u7684\u8fdb\u7a0b kill -s name kill\u6307\u5b9a\u540d\u79f0\u7684\u8fdb\u7a0b kill -s pid kill\u6307\u5b9apid\u7684\u8fdb\u7a0b top \u5b9e\u65f6\u663e\u793a\u8fdb\u7a0b\u72b6\u6001 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat iostat sar -u 1 10 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd \u5e38\u2ec5\u7cfb\u7edf\u670d\u52a1\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 chkconfig --list \u5217\u51fa\u7cfb\u7edf\u670d\u52a1 service <\u670d\u52a1\u540d> status \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> start \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> stop \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> restart \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl status <\u670d\u52a1\u540d> \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 systemctl start <\u670d\u52a1\u540d> \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 systemctl stop <\u670d\u52a1\u540d> \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 systemctl restart <\u670d\u52a1\u540d> \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl enable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8 systemctl disable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8 \u2f42\u4ef6\u548c\u2f6c\u5f55\u64cd\u4f5c \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cd <\u2f6c\u5f55\u540d> \u8fdb\u2f0a\u67d0\u4e2a\u2f6c\u5f55 cd .. \u56de\u4e0a\u7ea7\u2f6c\u5f55 cd ../.. \u56de\u4e0a\u4e24\u7ea7\u2f6c\u5f55 cd \u8fdb\u4e2a\u2f08\u4e3b\u2f6c\u5f55 cd - \u56de\u4e0a\u2f00\u6b65\u6240\u5728\u2f6c\u5f55 pwd \u663e\u793a\u5f53\u524d\u8def\u5f84 ls \u67e5\u770b\u2f42\u4ef6\u2f6c\u5f55\u5217\u8868 ls -F \u67e5\u770b\u2f6c\u5f55\u4e2d\u5185\u5bb9\uff08\u663e\u793a\u662f\u2f42\u4ef6\u8fd8\u662f\u2f6c\u5f55\uff09 ls -l \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868 ls -a \u67e5\u770b\u9690\u85cf\u2f42\u4ef6 ls -lh \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868\uff08\u589e\u5f3a\u2f42\u4ef6\u2f24\u2f29\u6613\u8bfb\u6027\uff09 ls -lSr \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u5217\u8868\uff08\u4ee5\u2f42\u4ef6\u2f24\u2f29\u5347\u5e8f\u67e5\u770b\uff09 tree \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u6811\u5f62\u7ed3\u6784 mkdir <\u2f6c\u5f55\u540d> \u521b\u5efa\u2f6c\u5f55 mkdir dir1 dir2 \u540c\u65f6\u521b\u5efa\u4e24\u4e2a\u2f6c\u5f55 mkdir -p /tmp/dir1/dir2 \u521b\u5efa\u2f6c\u5f55\u6811 rm -f file1 \u5220\u9664'file1'\u2f42\u4ef6 rmdir dir1 \u5220\u9664'dir1'\u2f6c\u5f55 rm -rf dir1 \u5220\u9664'dir1'\u2f6c\u5f55\u548c\u5176\u5185\u5bb9 rm -rf dir1 dir2 \u540c\u65f6\u5220\u9664\u4e24\u4e2a\u2f6c\u5f55\u53ca\u5176\u5185\u5bb9 mv old_dir new_dir \u91cd\u547d\u540d/\u79fb\u52a8\u2f6c\u5f55 cp file1 file2 \u590d\u5236\u2f42\u4ef6 cp dir/* . \u590d\u5236\u67d0\u2f6c\u5f55\u4e0b\u7684\u6240\u6709\u2f42\u4ef6\u2f84\u5f53\u524d\u2f6c\u5f55 cp -a dir1 dir2 \u590d\u5236\u2f6c\u5f55 cp -a /tmp/dir1 . \u590d\u5236\u2f00\u4e2a\u2f6c\u5f55\u2f84\u5f53\u524d\u2f6c\u5f55 ln -s file1 link1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u8f6f\u94fe\u63a5 ln file1 lnk1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u7269\u7406\u94fe\u63a5 find / -name file1 \u4ece\u8ddf\u2f6c\u5f55\u5f00\u59cb\u641c\u7d22\u2f42\u4ef6/\u2f6c\u5f55 find / -user user1 \u641c\u7d22\u2f64\u6237user1\u7684\u2f42\u4ef6/\u2f6c\u5f55 find /dir -name *.bin \u5728\u2f6c\u5f55/dir\u4e2d\u641c\u5e26\u6709.bin\u540e\u7f00\u7684\u2f42\u4ef6 locate <\u5173\u952e\u8bcd> \u5feb\u901f\u5b9a\u4f4d\u2f42\u4ef6 locate *.mp4 \u5bfb\u627e.mp4\u7ed3\u5c3e\u7684\u2f42\u4ef6 whereis <\u5173\u952e\u8bcd> \u663e\u793a\u67d0\u2f06\u8fdb\u5236\u2f42\u4ef6/\u53ef\u6267\u2f8f\u2f42\u4ef6\u7684\u8def\u5f84 which <\u5173\u952e\u8bcd> \u67e5\u627e\u7cfb\u7edf\u2f6c\u5f55\u4e0b\u67d0\u7684\u2f06\u8fdb\u5236\u2f42\u4ef6 chmod ugo+rwx dir1 \u8bbe\u7f6e\u2f6c\u5f55\u6240\u6709\u8005(u)\u3001\u7fa4\u7ec4(g)\u53ca\u5176\u4ed6\u2f08(o)\u7684\u8bfb\uff08r\uff09\u5199(w)\u6267\u2f8f(x)\u6743\u9650 chmod go-rwx dir1 \u79fb\u9664\u7fa4\u7ec4(g)\u4e0e\u5176\u4ed6\u2f08(o)\u5bf9\u2f6c\u5f55\u7684\u8bfb\u5199\u6267\u2f8f\u6743\u9650 chown user1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u8005\u5c5e\u6027 chown -R user1 dir1 \u6539\u53d8\u2f6c\u5f55\u7684\u6240\u6709\u8005\u5c5e\u6027 chgrp group1 file1 \u6539\u53d8\u2f42\u4ef6\u7fa4\u7ec4 chown user1:group1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u2f08\u548c\u7fa4\u7ec4 \u2f42\u4ef6\u67e5\u770b\u548c\u5904\u7406 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cat file1 \u67e5\u770b\u2f42\u4ef6\u5185\u5bb9 cat -n file1 \u67e5\u770b\u5185\u5bb9\u5e76\u6807\u793a\u2f8f\u6570 tac file1 \u4ece\u6700\u540e\u2f00\u2f8f\u5f00\u59cb\u53cd\u770b\u2f42\u4ef6\u5185\u5bb9 more file1 more file1 less file1 \u7c7b\u4f3cmore\u547d\u4ee4\uff0c\u4f46\u5141\u8bb8\u53cd\u5411\u64cd\u4f5c head -2 file1 \u67e5\u770b\u2f42\u4ef6\u524d\u4e24\u2f8f tail -2 file1 \u67e5\u770b\u2f42\u4ef6\u540e\u4e24\u2f8f tail -f /log/msg \u5b9e\u65f6\u67e5\u770b\u6dfb\u52a0\u5230\u2f42\u4ef6\u4e2d\u7684\u5185\u5bb9 grep codesheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u5173\u952e\u8bcdcodesheep grep ^sheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u4ee5sheep\u5f00\u5934\u7684\u5185\u5bb9 grep [0-9] hello.txt \u9009\u62e9hello.txt\u2f42\u4ef6\u4e2d\u6240\u6709\u5305\u542b\u6570\u5b57\u7684\u2f8f sed 's/s1/s2/g' hello.txt \u5c06hello.txt\u2f42\u4ef6\u4e2d\u7684s1\u66ff\u6362\u6210s2 sed '/^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u7a7a\u2f69\u2f8f sed '/ *#/d; /^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u6ce8\u91ca\u548c\u7a7a\u2f69\u2f8f sed -e '1d' hello.txt \u4ece\u2f42\u4ef6hello.txt \u4e2d\u6392\u9664\u7b2c\u2f00\u2f8f sed -n '/s1/p' hello.txt \u67e5\u770b\u53ea\u5305\u542b\u5173\u952e\u8bcd\"s1\"\u7684\u2f8f sed -e 's/ *$//' hello.txt \u5220\u9664\u6bcf\u2f00\u2f8f\u6700\u540e\u7684\u7a7a\u2f69\u5b57\u7b26 sed -e 's/s1//g' hello.txt \u4ece\u2f42\u6863\u4e2d\u53ea\u5220\u9664\u8bcd\u6c47s1\u5e76\u4fdd\u7559\u5269\u4f59\u5168\u90e8 sed -n '1,5p;5q' hello.txt \u67e5\u770b\u4ece\u7b2c\u2f00\u2f8f\u5230\u7b2c5\u2f8f\u5185\u5bb9 sed -n '5p;5q' hello.txt \u67e5\u770b\u7b2c5\u2f8f paste file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9 paste -d '+' file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9\uff0c\u4e2d\u95f4\u2f64\"+\"\u533a\u5206 sort file1 file2 \u6392\u5e8f\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9 comm -1 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file1'\u6240\u542b\u5185\u5bb9) comm -2 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file2'\u6240\u542b\u5185\u5bb9 comm -3 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664\u4e24\u2f42\u4ef6\u5171\u6709\u90e8\u5206) \u6253\u5305\u548c\u89e3\u538b \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 zip xxx.zip file \u538b\u7f29\u2f84zip\u5305 zip -r xxx.zip file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u538b\u6210zip\u5305 unzip xxx.zip \u89e3\u538bzip\u5305 tar -cvf xxx.tar file \u521b\u5efa\u2fae\u538b\u7f29tar\u5305 tar -cvf xxx.tar file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u6253tar\u5305 tar -tf xxx.tar \u67e5\u770btar\u5305\u7684\u5185\u5bb9 tar -xvf xxx.tar \u89e3\u538btar\u5305 tar -xvf xxx.tar -C /dir \u5c06tar\u5305\u89e3\u538b\u2f84\u6307\u5b9a\u2f6c\u5f55 tar -cvfj xxx.tar.bz2 dir \u521b\u5efabz2\u538b\u7f29\u5305 tar -jxvf xxx.tar.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 tar -cvfz xxx.tar.gz dir \u521b\u5efagzip\u538b\u7f29\u5305 tar -zxvf xxx.tar.gz \u89e3\u538bgzip\u538b\u7f29\u5305 bunzip2 xxx.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 bzip2 filename \u538b\u7f29\u2f42\u4ef6 gunzip xxx.gz \u89e3\u538bgzip\u538b\u7f29\u5305 gzip filename \u538b\u7f29\u2f42\u4ef6 gzip -9 filename \u6700\u2f24\u7a0b\u5ea6\u538b\u7f29 RPM\u5305\u7ba1\u7406\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 rpm -qa \u67e5\u770b\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -q pkg_name \u67e5\u8be2\u67d0\u4e2arpm\u5305 rpm -q --whatprovides xxx \u663e\u793axxx\u529f\u80fd\u662f\u7531\u54ea\u4e2a\u5305\u63d0\u4f9b\u7684 rpm -q --whatrequires xxx \u663e\u793axxx\u529f\u80fd\u88ab\u54ea\u4e2a\u7a0b\u5e8f\u5305\u4f9d\u8d56\u7684 rpm -q --changelog xxx \u663e\u793axxx\u5305\u7684\u66f4\u6539\u8bb0\u5f55 rpm -qi pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u7684\u8be6\u7ec6\u4fe1\u606f rpm -qd pkg_name \u67e5\u8be2\u2f00\u4e2a\u5305\u6240\u63d0\u4f9b\u7684\u2f42\u6863 rpm -qc pkg_name \u67e5\u770b\u5df2\u5b89\u88c5rpm\u5305\u63d0\u4f9b\u7684\u914d\u7f6e\u2f42\u4ef6 rpm -ql pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u5b89\u88c5\u4e86\u54ea\u4e9b\u2f42\u4ef6 rpm -qf filename \u67e5\u770b\u67d0\u4e2a\u2f42\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305 rpm -qR pkg_name \u67e5\u8be2\u5305\u7684\u4f9d\u8d56\u5173\u7cfb rpm -ivh xxx.rpm \u5b89\u88c5rpm\u5305 rpm -ivh --test xxx.rpm \u6d4b\u8bd5\u5b89\u88c5rpm\u5305 rpm -ivh --nodeps xxx.rpm \u5b89\u88c5rpm\u5305\u65f6\u5ffd\u7565\u4f9d\u8d56\u5173\u7cfb rpm -e xxx \u5378\u8f7d\u7a0b\u5e8f\u5305 rpm -Fvh pkg_name \u5347\u7ea7\u786e\u5b9a\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -Uvh pkg_name \u5347\u7ea7rpm\u5305(\u82e5\u672a\u5b89\u88c5\u5219\u4f1a\u5b89\u88c5) rpm -V pkg_name RPM\u5305\u8be6\u7ec6\u4fe1\u606f\u6821\u9a8c YUM\u5305\u7ba1\u7406\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 yum repolist enabled \u663e\u793a\u53ef\u2f64\u7684\u6e90\u4ed3\u5e93 yum search pkg_name \u641c\u7d22\u8f6f\u4ef6\u5305 yum install pkg_name \u4e0b\u8f7d\u5e76\u5b89\u88c5\u8f6f\u4ef6\u5305 yum install --downloadonly pkg_name \u53ea \u4e0b \u8f7d \u4e0d \u5b89 \u88c5 yum list \u663e\u793a\u6240\u6709\u7a0b\u5e8f\u5305 yum list installed \u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u5df2\u5b89\u88c5\u5305 yum list updates \u67e5\u770b\u53ef\u4ee5\u66f4\u65b0\u7684\u5305\u5217\u8868 yum check-update \u67e5\u770b\u53ef\u5347\u7ea7\u7684\u8f6f\u4ef6\u5305 yum update \u66f4\u65b0\u6240\u6709\u8f6f\u4ef6\u5305 yum update pkg_name \u5347\u7ea7\u6307\u5b9a\u8f6f\u4ef6\u5305 yum deplist pkg_name \u5217\u51fa\u8f6f\u4ef6\u5305\u4f9d\u8d56\u5173\u7cfb yum remove pkg_name \u5220\u9664\u8f6f\u4ef6\u5305 yum clean all \u6e05\u9664\u7f13\u5b58 yum clean packages \u6e05\u9664\u7f13\u5b58\u7684\u8f6f\u4ef6\u5305 yum clean headers \u6e05\u9664\u7f13\u5b58\u7684header DPKG\u5305\u7ba1\u7406\u547d\u4ee4 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 dpkg -c xxx.deb \u5217\u51fadeb\u5305\u7684\u5185\u5bb9 dpkg -i xxx.deb \u5b89\u88c5/\u66f4\u65b0deb\u5305 dpkg -r pkg_name \u79fb\u9664deb\u5305 dpkg -P pkg_name \u79fb\u9664deb\u5305(\u4e0d\u4fdd\u7559\u914d\u7f6e) dpkg -l \u67e5\u770b\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5deb\u5305 dpkg -l pkg_name \u663e\u793a\u5305\u7684\u2f24\u81f4\u4fe1\u606f dpkg -L pkg_name \u67e5\u770bdeb\u5305\u5b89\u88c5\u7684\u2f42\u4ef6 dpkg -s pkg_name \u67e5\u770b\u5305\u7684\u8be6\u7ec6\u4fe1\u606f dpkg \u2013unpack xxx.deb \u89e3\u5f00deb\u5305\u7684\u5185\u5bb9 APT\u8f6f\u4ef6\u2f2f\u5177 \u00b6 \u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 apt-cache search pkg_name \u641c\u7d22\u7a0b\u5e8f\u5305 apt-cache show pkg_name \u83b7\u53d6\u5305\u7684\u6982\u89c8\u4fe1\u606f apt-get install pkg_name \u5b89\u88c5/\u5347\u7ea7\u8f6f\u4ef6\u5305 apt-get purge pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u5305\u62ec\u914d\u7f6e\uff09 apt-get remove pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u4e0d\u5305\u62ec\u914d\u7f6e\uff09 apt-get update \u66f4\u65b0\u5305\u7d22\u5f15\u4fe1\u606f apt-get upgrade \u66f4\u65b0\u5df2\u5b89\u88c5\u8f6f\u4ef6\u5305 apt-get clean \u6e05\u7406\u7f13\u5b58","title":"\u5173\u673a/\u91cd\u542f/\u6ce8\u9500"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_1","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 shutdown -h now \u5373\u523b\u5173\u673a shutdown -h 10 10\u5206\u949f\u540e\u5173\u673a shutdown -h 11:00 11\uff1a00\u5173\u673a shutdown -h +10 \u9884\u5b9a\u65f6\u95f4\u5173\u673a\uff0810\u5206\u949f\u540e\uff09 shutdown -c \u53d6\u6d88\u6307\u5b9a\u65f6\u95f4\u5173\u673a shutdown -r now \u91cd\u542f shutdown -r 10 10\u5206\u949f\u4e4b\u540e\u91cd\u542f shutdown -r 11:00 \u5b9a\u65f6\u91cd\u542f reboot \u91cd\u542f init 6 \u91cd\u542f init 0 \u2f74\u523b\u5173\u673a telinit 0 \u5173\u673a poweroff \u2f74\u523b\u5173\u673a halt \u5173\u673a sync buff\u6570\u636e\u540c\u6b65\u5230\u78c1\u76d8 logout \u9000\u51fa\u767b\u5f55Shell","title":"\u5173\u673a/\u91cd\u542f/\u6ce8\u9500"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_2","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 uname -a \u67e5\u770b\u5185\u6838/OS/CPU\u4fe1\u606f uname -r \u67e5\u770b\u5185\u6838\u7248\u672c uname -m \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 arch \u67e5\u770b\u5904\u7406\u5668\u67b6\u6784 hostname \u67e5\u770b\u8ba1\u7b97\u673a\u540d who \u663e\u793a\u5f53\u524d\u767b\u5f55\u7cfb\u7edf\u7684\u2f64\u6237 who am i \u663e\u793a\u767b\u5f55\u65f6\u7684\u2f64\u6237\u540d whoami \u663e\u793a\u5f53\u524d\u2f64\u6237\u540d cat /proc/version \u67e5\u770blinux\u7248\u672c\u4fe1\u606f cat /proc/cpuinfo \u67e5\u770bCPU\u4fe1\u606f cat /proc/interrupts \u67e5\u770b\u4e2d\u65ad cat /proc/loadavg \u67e5\u770b\u7cfb\u7edf\u8d1f\u8f7d uptime \u67e5\u770b\u7cfb\u7edf\u8fd0\u2f8f\u65f6\u95f4\u3001\u2f64\u6237\u6570\u3001\u8d1f\u8f7d env \u67e5\u770b\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf lsusb -tv \u67e5\u770b\u7cfb\u7edfUSB\u8bbe\u5907\u4fe1\u606f lspci -tv \u67e5\u770b\u7cfb\u7edfPCI\u8bbe\u5907\u4fe1\u606f lsmod \u67e5\u770b\u5df2\u52a0\u8f7d\u7684\u7cfb\u7edf\u6a21\u5757 grep MemTotal /proc/meminfo \u67e5\u770b\u5185\u5b58\u603b\u91cf grep MemFree /proc/meminfo \u67e5\u770b\u7a7a\u95f2\u5185\u5b58\u91cf free -m \u67e5\u770b\u5185\u5b58\u2f64\u91cf\u548c\u4ea4\u6362\u533a\u2f64\u91cf date \u663e\u793a\u7cfb\u7edf\u2f47\u671f\u65f6\u95f4 cal 2021 \u663e\u793a2021\u2f47\u5386\u8868 top \u52a8\u6001\u663e\u793acpu/\u5185\u5b58/\u8fdb\u7a0b\u7b49\u60c5\u51b5 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u770bio\u8bfb\u5199/cpu\u4f7f\u2f64\u60c5\u51b5 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd","title":"\u7cfb\u7edf\u4fe1\u606f\u548c\u6027\u80fd\u67e5\u770b"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_3","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 fdisk -l \u67e5\u770b\u6240\u6709\u78c1\u76d8\u5206\u533a swapon -s \u67e5\u770b\u6240\u6709\u4ea4\u6362\u5206\u533a df -h \u67e5\u770b\u78c1\u76d8\u4f7f\u2f64\u60c5\u51b5\u53ca\u6302\u8f7d\u70b9 df -hl \u540c\u4e0a du -sh /dir \u67e5\u770b\u6307\u5b9a\u67d0\u4e2a\u2f6c\u5f55\u7684\u2f24\u2f29 du -sk * | sort -rn \u4ece\u2fbc\u5230\u4f4e\u4f9d\u6b21\u663e\u793a\u2f42\u4ef6\u548c\u2f6c\u5f55\u2f24\u2f29 mount /dev/hda2 /mnt/hda2 \u6302\u8f7dhda2\u76d8 mount -t ntfs /dev/sdc1 /mnt/usbhd1 \u6307\u5b9a\u2f42\u4ef6\u7cfb\u7edf\u7c7b\u578b\u6302\u8f7d\uff08\u5982ntfs\uff09 mount -o loop xxx.iso /mnt/cdrom \u6302 \u8f7d iso \u2f42 \u4ef6 umount -v /dev/sda1 \u901a\u8fc7\u8bbe\u5907\u540d\u5378\u8f7d umount -v /mnt/mymnt \u901a\u8fc7\u6302\u8f7d\u70b9\u5378\u8f7d fuser -km /mnt/hda1 \u5f3a\u5236\u5378\u8f7d(\u614e\u2f64)","title":"\u78c1\u76d8\u548c\u5206\u533a"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_4","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 useradd codesheep \u521b\u5efa\u2f64\u6237 userdel -r codesheep \u5220\u9664\u2f64\u6237 usermod -g group_name user_name \u4fee\u6539\u2f64\u6237\u7684\u7ec4 usermod -aG group_name user_name \u5c06\u2f64\u6237\u6dfb\u52a0\u5230\u7ec4 usermod -s /bin/ksh -d /home/codepig \u2013g dev codesheep \u4fee\u6539\u2f64\u6237codesheep\u7684\u767b\u5f55Shell\u3001\u4e3b\u2f6c\u5f55\u4ee5\u53ca\u2f64\u6237\u7ec4 groups test \u67e5\u770btest\u2f64\u6237\u6240\u5728\u7684\u7ec4 groupadd group_name \u521b\u5efa\u2f64\u6237\u7ec4 groupdel group_name \u5220\u9664\u2f64\u6237\u7ec4 groupmod -n new_name old_name \u91cd\u547d\u540d\u2f64\u6237\u7ec4 su - user_name su - user_name passwd \u4fee\u6539\u2f1d\u4ee4 passwd codesheep \u4fee\u6539\u67d0\u2f64\u6237\u7684\u2f1d\u4ee4 w \u67e5\u770b\u6d3b\u52a8\u2f64\u6237 id codesheep \u67e5\u770b\u6307\u5b9a\u2f64\u6237codesheep\u4fe1\u606f last \u67e5\u770b\u2f64\u6237\u767b\u5f55\u2f47\u5fd7 crontab -l \u67e5\u770b\u5f53\u524d\u2f64\u6237\u7684\u8ba1\u5212\u4efb\u52a1 cut -d: -f1 /etc/passwd \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u2f64\u6237 cut -d: -f1 /etc/group \u67e5\u770b\u7cfb\u7edf\u6240\u6709\u7ec4","title":"\u2f64\u6237\u548c\u2f64\u6237\u7ec4"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_5","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 ifconfig \u67e5\u770b\u2f79\u7edc\u63a5\u2f1d\u5c5e\u6027 ifconfig eth0 \u67e5\u770b\u67d0\u2f79\u5361\u7684\u914d\u7f6e route -n \u67e5\u770b\u8def\u7531\u8868 netstat -lntp \u67e5\u770b\u6240\u6709\u76d1\u542c\u7aef\u2f1d netstat -antp \u67e5\u770b\u5df2\u7ecf\u5efa\u2f74\u7684TCP\u8fde\u63a5 netstat -lutp \u67e5\u770bTCP/UDP\u7684\u72b6\u6001\u4fe1\u606f ifup eth0 \u542f\u2f64eth0\u2f79\u7edc\u8bbe\u5907 ifdown eth0 \u7981\u2f64eth0\u2f79\u7edc\u8bbe\u5907 iptables -L \u67e5\u770biptables\u89c4\u5219 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 \u914d\u7f6eip\u5730\u5740 dhclient eth0 \u4ee5dhcp\u6a21\u5f0f\u542f\u2f64eth0 route add -net 0/0 gw Gateway_IP \u914d\u7f6e\u9ed8\u8ba4\u2f79\u5173 route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 \u914d\u7f6e\u9759\u6001\u8def\u7531\u5230\u8fbe\u2f79\u7edc'192.168.0.0/16' route del 0/0 gw Gateway_IP \u5220\u9664\u9759\u6001\u8def\u7531 hostname \u67e5\u770b\u4e3b\u673a\u540d host www.baidu.com \u89e3\u6790\u4e3b\u673a\u540d nslookup www.baidu.com \u67e5\u8be2DNS\u8bb0\u5f55\uff0c\u67e5\u770b\u57df\u540d\u89e3\u6790\u662f\u5426\u6b63\u5e38 ps -ef \u67e5\u770b\u6240\u6709\u8fdb\u7a0b ps -ef | grep codesheep \u8fc7\u6ee4\u51fa\u4f60\u9700\u8981\u7684\u8fdb\u7a0b kill -s name kill\u6307\u5b9a\u540d\u79f0\u7684\u8fdb\u7a0b kill -s pid kill\u6307\u5b9apid\u7684\u8fdb\u7a0b top \u5b9e\u65f6\u663e\u793a\u8fdb\u7a0b\u72b6\u6001 vmstat 1 20 \u6bcf1\u79d2\u91c7\u2f00\u6b21\u7cfb\u7edf\u72b6\u6001\uff0c\u91c720\u6b21 iostat iostat sar -u 1 10 \u67e5\u8be2cpu\u4f7f\u2f64\u60c5\u51b5\uff081\u79d2\u2f00\u6b21\uff0c\u517110\u6b21\uff09 sar -d 1 10 \u67e5\u8be2\u78c1\u76d8\u6027\u80fd","title":"\u2f79\u7edc\u548c\u8fdb\u7a0b\u7ba1\u7406"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_6","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 chkconfig --list \u5217\u51fa\u7cfb\u7edf\u670d\u52a1 service <\u670d\u52a1\u540d> status \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> start \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> stop \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 service <\u670d\u52a1\u540d> restart \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl status <\u670d\u52a1\u540d> \u67e5\u770b\u67d0\u4e2a\u670d\u52a1 systemctl start <\u670d\u52a1\u540d> \u542f\u52a8\u67d0\u4e2a\u670d\u52a1 systemctl stop <\u670d\u52a1\u540d> \u7ec8\u2f4c\u67d0\u4e2a\u670d\u52a1 systemctl restart <\u670d\u52a1\u540d> \u91cd\u542f\u67d0\u4e2a\u670d\u52a1 systemctl enable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8 systemctl disable <\u670d\u52a1\u540d> \u5173\u95ed\u2f83\u542f\u52a8","title":"\u5e38\u2ec5\u7cfb\u7edf\u670d\u52a1\u547d\u4ee4"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_7","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cd <\u2f6c\u5f55\u540d> \u8fdb\u2f0a\u67d0\u4e2a\u2f6c\u5f55 cd .. \u56de\u4e0a\u7ea7\u2f6c\u5f55 cd ../.. \u56de\u4e0a\u4e24\u7ea7\u2f6c\u5f55 cd \u8fdb\u4e2a\u2f08\u4e3b\u2f6c\u5f55 cd - \u56de\u4e0a\u2f00\u6b65\u6240\u5728\u2f6c\u5f55 pwd \u663e\u793a\u5f53\u524d\u8def\u5f84 ls \u67e5\u770b\u2f42\u4ef6\u2f6c\u5f55\u5217\u8868 ls -F \u67e5\u770b\u2f6c\u5f55\u4e2d\u5185\u5bb9\uff08\u663e\u793a\u662f\u2f42\u4ef6\u8fd8\u662f\u2f6c\u5f55\uff09 ls -l \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868 ls -a \u67e5\u770b\u9690\u85cf\u2f42\u4ef6 ls -lh \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u8be6\u60c5\u5217\u8868\uff08\u589e\u5f3a\u2f42\u4ef6\u2f24\u2f29\u6613\u8bfb\u6027\uff09 ls -lSr \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u5217\u8868\uff08\u4ee5\u2f42\u4ef6\u2f24\u2f29\u5347\u5e8f\u67e5\u770b\uff09 tree \u67e5\u770b\u2f42\u4ef6\u548c\u2f6c\u5f55\u7684\u6811\u5f62\u7ed3\u6784 mkdir <\u2f6c\u5f55\u540d> \u521b\u5efa\u2f6c\u5f55 mkdir dir1 dir2 \u540c\u65f6\u521b\u5efa\u4e24\u4e2a\u2f6c\u5f55 mkdir -p /tmp/dir1/dir2 \u521b\u5efa\u2f6c\u5f55\u6811 rm -f file1 \u5220\u9664'file1'\u2f42\u4ef6 rmdir dir1 \u5220\u9664'dir1'\u2f6c\u5f55 rm -rf dir1 \u5220\u9664'dir1'\u2f6c\u5f55\u548c\u5176\u5185\u5bb9 rm -rf dir1 dir2 \u540c\u65f6\u5220\u9664\u4e24\u4e2a\u2f6c\u5f55\u53ca\u5176\u5185\u5bb9 mv old_dir new_dir \u91cd\u547d\u540d/\u79fb\u52a8\u2f6c\u5f55 cp file1 file2 \u590d\u5236\u2f42\u4ef6 cp dir/* . \u590d\u5236\u67d0\u2f6c\u5f55\u4e0b\u7684\u6240\u6709\u2f42\u4ef6\u2f84\u5f53\u524d\u2f6c\u5f55 cp -a dir1 dir2 \u590d\u5236\u2f6c\u5f55 cp -a /tmp/dir1 . \u590d\u5236\u2f00\u4e2a\u2f6c\u5f55\u2f84\u5f53\u524d\u2f6c\u5f55 ln -s file1 link1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u8f6f\u94fe\u63a5 ln file1 lnk1 \u521b\u5efa\u6307\u5411\u2f42\u4ef6/\u2f6c\u5f55\u7684\u7269\u7406\u94fe\u63a5 find / -name file1 \u4ece\u8ddf\u2f6c\u5f55\u5f00\u59cb\u641c\u7d22\u2f42\u4ef6/\u2f6c\u5f55 find / -user user1 \u641c\u7d22\u2f64\u6237user1\u7684\u2f42\u4ef6/\u2f6c\u5f55 find /dir -name *.bin \u5728\u2f6c\u5f55/dir\u4e2d\u641c\u5e26\u6709.bin\u540e\u7f00\u7684\u2f42\u4ef6 locate <\u5173\u952e\u8bcd> \u5feb\u901f\u5b9a\u4f4d\u2f42\u4ef6 locate *.mp4 \u5bfb\u627e.mp4\u7ed3\u5c3e\u7684\u2f42\u4ef6 whereis <\u5173\u952e\u8bcd> \u663e\u793a\u67d0\u2f06\u8fdb\u5236\u2f42\u4ef6/\u53ef\u6267\u2f8f\u2f42\u4ef6\u7684\u8def\u5f84 which <\u5173\u952e\u8bcd> \u67e5\u627e\u7cfb\u7edf\u2f6c\u5f55\u4e0b\u67d0\u7684\u2f06\u8fdb\u5236\u2f42\u4ef6 chmod ugo+rwx dir1 \u8bbe\u7f6e\u2f6c\u5f55\u6240\u6709\u8005(u)\u3001\u7fa4\u7ec4(g)\u53ca\u5176\u4ed6\u2f08(o)\u7684\u8bfb\uff08r\uff09\u5199(w)\u6267\u2f8f(x)\u6743\u9650 chmod go-rwx dir1 \u79fb\u9664\u7fa4\u7ec4(g)\u4e0e\u5176\u4ed6\u2f08(o)\u5bf9\u2f6c\u5f55\u7684\u8bfb\u5199\u6267\u2f8f\u6743\u9650 chown user1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u8005\u5c5e\u6027 chown -R user1 dir1 \u6539\u53d8\u2f6c\u5f55\u7684\u6240\u6709\u8005\u5c5e\u6027 chgrp group1 file1 \u6539\u53d8\u2f42\u4ef6\u7fa4\u7ec4 chown user1:group1 file1 \u6539\u53d8\u2f42\u4ef6\u7684\u6240\u6709\u2f08\u548c\u7fa4\u7ec4","title":"\u2f42\u4ef6\u548c\u2f6c\u5f55\u64cd\u4f5c"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_8","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 cat file1 \u67e5\u770b\u2f42\u4ef6\u5185\u5bb9 cat -n file1 \u67e5\u770b\u5185\u5bb9\u5e76\u6807\u793a\u2f8f\u6570 tac file1 \u4ece\u6700\u540e\u2f00\u2f8f\u5f00\u59cb\u53cd\u770b\u2f42\u4ef6\u5185\u5bb9 more file1 more file1 less file1 \u7c7b\u4f3cmore\u547d\u4ee4\uff0c\u4f46\u5141\u8bb8\u53cd\u5411\u64cd\u4f5c head -2 file1 \u67e5\u770b\u2f42\u4ef6\u524d\u4e24\u2f8f tail -2 file1 \u67e5\u770b\u2f42\u4ef6\u540e\u4e24\u2f8f tail -f /log/msg \u5b9e\u65f6\u67e5\u770b\u6dfb\u52a0\u5230\u2f42\u4ef6\u4e2d\u7684\u5185\u5bb9 grep codesheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u5173\u952e\u8bcdcodesheep grep ^sheep hello.txt \u5728\u2f42\u4ef6hello.txt\u4e2d\u67e5\u627e\u4ee5sheep\u5f00\u5934\u7684\u5185\u5bb9 grep [0-9] hello.txt \u9009\u62e9hello.txt\u2f42\u4ef6\u4e2d\u6240\u6709\u5305\u542b\u6570\u5b57\u7684\u2f8f sed 's/s1/s2/g' hello.txt \u5c06hello.txt\u2f42\u4ef6\u4e2d\u7684s1\u66ff\u6362\u6210s2 sed '/^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u7a7a\u2f69\u2f8f sed '/ *#/d; /^$/d' hello.txt \u4ecehello.txt\u2f42\u4ef6\u4e2d\u5220\u9664\u6240\u6709\u6ce8\u91ca\u548c\u7a7a\u2f69\u2f8f sed -e '1d' hello.txt \u4ece\u2f42\u4ef6hello.txt \u4e2d\u6392\u9664\u7b2c\u2f00\u2f8f sed -n '/s1/p' hello.txt \u67e5\u770b\u53ea\u5305\u542b\u5173\u952e\u8bcd\"s1\"\u7684\u2f8f sed -e 's/ *$//' hello.txt \u5220\u9664\u6bcf\u2f00\u2f8f\u6700\u540e\u7684\u7a7a\u2f69\u5b57\u7b26 sed -e 's/s1//g' hello.txt \u4ece\u2f42\u6863\u4e2d\u53ea\u5220\u9664\u8bcd\u6c47s1\u5e76\u4fdd\u7559\u5269\u4f59\u5168\u90e8 sed -n '1,5p;5q' hello.txt \u67e5\u770b\u4ece\u7b2c\u2f00\u2f8f\u5230\u7b2c5\u2f8f\u5185\u5bb9 sed -n '5p;5q' hello.txt \u67e5\u770b\u7b2c5\u2f8f paste file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9 paste -d '+' file1 file2 \u5408\u5e76\u4e24\u4e2a\u2f42\u4ef6\u6216\u4e24\u680f\u7684\u5185\u5bb9\uff0c\u4e2d\u95f4\u2f64\"+\"\u533a\u5206 sort file1 file2 \u6392\u5e8f\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9 comm -1 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file1'\u6240\u542b\u5185\u5bb9) comm -2 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664'file2'\u6240\u542b\u5185\u5bb9 comm -3 file1 file2 \u2f50\u8f83\u4e24\u4e2a\u2f42\u4ef6\u7684\u5185\u5bb9(\u53bb\u9664\u4e24\u2f42\u4ef6\u5171\u6709\u90e8\u5206)","title":"\u2f42\u4ef6\u67e5\u770b\u548c\u5904\u7406"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#_9","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 zip xxx.zip file \u538b\u7f29\u2f84zip\u5305 zip -r xxx.zip file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u538b\u6210zip\u5305 unzip xxx.zip \u89e3\u538bzip\u5305 tar -cvf xxx.tar file \u521b\u5efa\u2fae\u538b\u7f29tar\u5305 tar -cvf xxx.tar file1 file2 dir1 \u5c06\u591a\u4e2a\u2f42\u4ef6+\u2f6c\u5f55\u6253tar\u5305 tar -tf xxx.tar \u67e5\u770btar\u5305\u7684\u5185\u5bb9 tar -xvf xxx.tar \u89e3\u538btar\u5305 tar -xvf xxx.tar -C /dir \u5c06tar\u5305\u89e3\u538b\u2f84\u6307\u5b9a\u2f6c\u5f55 tar -cvfj xxx.tar.bz2 dir \u521b\u5efabz2\u538b\u7f29\u5305 tar -jxvf xxx.tar.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 tar -cvfz xxx.tar.gz dir \u521b\u5efagzip\u538b\u7f29\u5305 tar -zxvf xxx.tar.gz \u89e3\u538bgzip\u538b\u7f29\u5305 bunzip2 xxx.bz2 \u89e3\u538bbz2\u538b\u7f29\u5305 bzip2 filename \u538b\u7f29\u2f42\u4ef6 gunzip xxx.gz \u89e3\u538bgzip\u538b\u7f29\u5305 gzip filename \u538b\u7f29\u2f42\u4ef6 gzip -9 filename \u6700\u2f24\u7a0b\u5ea6\u538b\u7f29","title":"\u6253\u5305\u548c\u89e3\u538b"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#rpm","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 rpm -qa \u67e5\u770b\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -q pkg_name \u67e5\u8be2\u67d0\u4e2arpm\u5305 rpm -q --whatprovides xxx \u663e\u793axxx\u529f\u80fd\u662f\u7531\u54ea\u4e2a\u5305\u63d0\u4f9b\u7684 rpm -q --whatrequires xxx \u663e\u793axxx\u529f\u80fd\u88ab\u54ea\u4e2a\u7a0b\u5e8f\u5305\u4f9d\u8d56\u7684 rpm -q --changelog xxx \u663e\u793axxx\u5305\u7684\u66f4\u6539\u8bb0\u5f55 rpm -qi pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u7684\u8be6\u7ec6\u4fe1\u606f rpm -qd pkg_name \u67e5\u8be2\u2f00\u4e2a\u5305\u6240\u63d0\u4f9b\u7684\u2f42\u6863 rpm -qc pkg_name \u67e5\u770b\u5df2\u5b89\u88c5rpm\u5305\u63d0\u4f9b\u7684\u914d\u7f6e\u2f42\u4ef6 rpm -ql pkg_name \u67e5\u770b\u2f00\u4e2a\u5305\u5b89\u88c5\u4e86\u54ea\u4e9b\u2f42\u4ef6 rpm -qf filename \u67e5\u770b\u67d0\u4e2a\u2f42\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305 rpm -qR pkg_name \u67e5\u8be2\u5305\u7684\u4f9d\u8d56\u5173\u7cfb rpm -ivh xxx.rpm \u5b89\u88c5rpm\u5305 rpm -ivh --test xxx.rpm \u6d4b\u8bd5\u5b89\u88c5rpm\u5305 rpm -ivh --nodeps xxx.rpm \u5b89\u88c5rpm\u5305\u65f6\u5ffd\u7565\u4f9d\u8d56\u5173\u7cfb rpm -e xxx \u5378\u8f7d\u7a0b\u5e8f\u5305 rpm -Fvh pkg_name \u5347\u7ea7\u786e\u5b9a\u5df2\u5b89\u88c5\u7684rpm\u5305 rpm -Uvh pkg_name \u5347\u7ea7rpm\u5305(\u82e5\u672a\u5b89\u88c5\u5219\u4f1a\u5b89\u88c5) rpm -V pkg_name RPM\u5305\u8be6\u7ec6\u4fe1\u606f\u6821\u9a8c","title":"RPM\u5305\u7ba1\u7406\u547d\u4ee4"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#yum","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 yum repolist enabled \u663e\u793a\u53ef\u2f64\u7684\u6e90\u4ed3\u5e93 yum search pkg_name \u641c\u7d22\u8f6f\u4ef6\u5305 yum install pkg_name \u4e0b\u8f7d\u5e76\u5b89\u88c5\u8f6f\u4ef6\u5305 yum install --downloadonly pkg_name \u53ea \u4e0b \u8f7d \u4e0d \u5b89 \u88c5 yum list \u663e\u793a\u6240\u6709\u7a0b\u5e8f\u5305 yum list installed \u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u5df2\u5b89\u88c5\u5305 yum list updates \u67e5\u770b\u53ef\u4ee5\u66f4\u65b0\u7684\u5305\u5217\u8868 yum check-update \u67e5\u770b\u53ef\u5347\u7ea7\u7684\u8f6f\u4ef6\u5305 yum update \u66f4\u65b0\u6240\u6709\u8f6f\u4ef6\u5305 yum update pkg_name \u5347\u7ea7\u6307\u5b9a\u8f6f\u4ef6\u5305 yum deplist pkg_name \u5217\u51fa\u8f6f\u4ef6\u5305\u4f9d\u8d56\u5173\u7cfb yum remove pkg_name \u5220\u9664\u8f6f\u4ef6\u5305 yum clean all \u6e05\u9664\u7f13\u5b58 yum clean packages \u6e05\u9664\u7f13\u5b58\u7684\u8f6f\u4ef6\u5305 yum clean headers \u6e05\u9664\u7f13\u5b58\u7684header","title":"YUM\u5305\u7ba1\u7406\u547d\u4ee4"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#dpkg","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 dpkg -c xxx.deb \u5217\u51fadeb\u5305\u7684\u5185\u5bb9 dpkg -i xxx.deb \u5b89\u88c5/\u66f4\u65b0deb\u5305 dpkg -r pkg_name \u79fb\u9664deb\u5305 dpkg -P pkg_name \u79fb\u9664deb\u5305(\u4e0d\u4fdd\u7559\u914d\u7f6e) dpkg -l \u67e5\u770b\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5deb\u5305 dpkg -l pkg_name \u663e\u793a\u5305\u7684\u2f24\u81f4\u4fe1\u606f dpkg -L pkg_name \u67e5\u770bdeb\u5305\u5b89\u88c5\u7684\u2f42\u4ef6 dpkg -s pkg_name \u67e5\u770b\u5305\u7684\u8be6\u7ec6\u4fe1\u606f dpkg \u2013unpack xxx.deb \u89e3\u5f00deb\u5305\u7684\u5185\u5bb9","title":"DPKG\u5305\u7ba1\u7406\u547d\u4ee4"},{"location":"%E6%96%87%E4%BB%B6/Linux%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/#apt","text":"\u5e38\u7528\u547d\u4ee4 \u4f5c\u7528 apt-cache search pkg_name \u641c\u7d22\u7a0b\u5e8f\u5305 apt-cache show pkg_name \u83b7\u53d6\u5305\u7684\u6982\u89c8\u4fe1\u606f apt-get install pkg_name \u5b89\u88c5/\u5347\u7ea7\u8f6f\u4ef6\u5305 apt-get purge pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u5305\u62ec\u914d\u7f6e\uff09 apt-get remove pkg_name \u5378\u8f7d\u8f6f\u4ef6\uff08\u4e0d\u5305\u62ec\u914d\u7f6e\uff09 apt-get update \u66f4\u65b0\u5305\u7d22\u5f15\u4fe1\u606f apt-get upgrade \u66f4\u65b0\u5df2\u5b89\u88c5\u8f6f\u4ef6\u5305 apt-get clean \u6e05\u7406\u7f13\u5b58","title":"APT\u8f6f\u4ef6\u2f2f\u5177"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/","text":"\u57fa\u672c\u64cd\u4f5c \u00b6 /* Windows\u670d\u52a1 */ -- \u542f\u52a8MySQL net start mysql -- \u521b\u5efaWindows\u670d\u52a1 sc create mysql binPath = mysqld_bin_path ( \u6ce8\u610f\uff1a\u7b49\u53f7\u4e0e\u503c\u4e4b\u95f4\u6709\u7a7a\u683c ) /* \u8fde\u63a5\u4e0e\u65ad\u5f00\u670d\u52a1\u5668 */ mysql - h \u5730\u5740 - P \u7aef\u53e3 - u \u7528\u6237\u540d - p \u5bc6\u7801 SHOW PROCESSLIST -- \u663e\u793a\u54ea\u4e9b\u7ebf\u7a0b\u6b63\u5728\u8fd0\u884c SHOW VARIABLES -- \u663e\u793a\u7cfb\u7edf\u53d8\u91cf\u4fe1\u606f \u6570\u636e\u5e93\u64cd\u4f5c \u00b6 /* \u6570\u636e\u5e93\u64cd\u4f5c */ --------------------- -- \u67e5\u770b\u5f53\u524d\u6709\u54ea\u4e9b\u6570\u636e\u5e93 show databases ; -- \u67e5\u770b\u5f53\u524d\u6570\u636e\u5e93 select database (); -- \u00b7\u00b7select \u4e00\u822c\u90fd\u662f\u64cd\u4f5c\u51fd\u6570 \u7c7b\u4f3c\u7684\u5982\u4e0b\uff1a -- \u663e\u793a\u5f53\u524d\u65f6\u95f4\u3001\u7528\u6237\u3001\u6570\u636e\u5e93\u7248\u672c select now (); select user (); select version (); -- \u5efa\u7acb\u4e00\u4e2a\u6570\u636e\u5e93 create database [ if not exists ] nba charset = utf8 ; -- \u67e5\u770b\u5f53\u524d\u5e93\u7684\u521b\u5efa\u4fe1\u606f show create database nbateam ; -- \u5220\u9664\u5e93 drop database [ if exists ] nbateam ; -- \u9009\u53d6\u6570\u636e\u5e93 use nbateam ; \u8868\u7684\u64cd\u4f5c \u00b6 /* \u8868\u64cd\u4f5c */ -- \u67e5\u770b\u5f53\u524d\u6570\u636e\u5e93\u4e0b\u6709\u54ea\u4e9b\u8868 show tables ; -- \u5efa\u7acb\u4e00\u4e2a\u8868 create [ temporary ] table [ if not exists ] [ \u5e93\u540d . ] GSW ( \u8868\u7684\u7ed3\u6784\u5b9a\u4e49 ) [ \u8868\u9009\u9879 ] -- \u5b9e\u4f8b create table GSW ( id int unsigned not null primary key auto_increment , name varchar ( 30 ) not null , age tinyint unsigned not null , num int unsigned not null , position varchar ( 3 ) not null , high int unsigned not null , weight int unsigned not null , birthday date default '2000-01-01' , salary int unsigned not null , is_old bit default 1 ); -- \u8868\u9009\u9879 -- \u5b57\u7b26\u96c6 charset = utf8 ( \u9ed8\u8ba4latin ) -- \u5b58\u50a8\u5f15\u64ce engine = InnoDB \u8868\u5728\u7ba1\u7406\u6570\u636e\u65f6\u91c7\u7528\u7684\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7ed3\u6784\u4e0d\u540c\u4f1a\u5bfc\u81f4\u5904\u7406\u65b9\u5f0f\u3001\u63d0\u4f9b\u7684\u7279\u6027\u64cd\u4f5c\u7b49\u4e0d\u540c \u5e38\u89c1\u7684\u5f15\u64ce\uff1aInnoDB MyISAM Memory / Heap BDB Merge Example CSV MaxDB Archive \u4e0d\u540c\u7684\u5f15\u64ce\u5728\u4fdd\u5b58\u8868\u7684\u7ed3\u6784\u548c\u6570\u636e\u65f6\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u5f0f MyISAM\u8868\u6587\u4ef6\u542b\u4e49\uff1a . frm\u8868\u5b9a\u4e49\uff0c . MYD\u8868\u6570\u636e\uff0c . MYI\u8868\u7d22\u5f15 InnoDB\u8868\u6587\u4ef6\u542b\u4e49\uff1a . frm\u8868\u5b9a\u4e49\uff0c\u8868\u7a7a\u95f4\u6570\u636e\u548c\u65e5\u5fd7\u6587\u4ef6 SHOW ENGINES -- \u663e\u793a\u5b58\u50a8\u5f15\u64ce\u7684\u72b6\u6001\u4fe1\u606f SHOW ENGINE \u5f15\u64ce\u540d { LOGS | STATUS } -- \u663e\u793a\u5b58\u50a8\u5f15\u64ce\u7684\u65e5\u5fd7\u6216\u72b6\u6001\u4fe1\u606f -- \u81ea\u589e\u8d77\u59cb\u6570 auto_increment = \u884c\u6570 -- \u6570\u636e\u6587\u4ef6\u76ee\u5f55 data directory = '\u76ee\u5f55' -- \u7d22\u5f15\u6587\u4ef6\u76ee\u5f55 index directory = '\u76ee\u5f55' -- \u8868\u6ce8\u91ca comment = 'string' -- \u5206\u533a\u9009\u9879 partition by ....( \u89c1\u624b\u518c ) -- \u67e5\u770b\u8868 show tables [ like 'pattern' ] ; show tables from \u5e93\u540d\uff1b -- \u67e5\u770b\u8868\u673a\u6784 show create table \u8868\u540d desc \u8868\u540d / describe \u00b7\u00b7 / explain \u00b7\u00b7 / show columns from \u00b7\u00b7 [ like 'pattern' ] show table status [ from db_name ] [ like 'pattern' ] -- \u4fee\u6539\u8868 \u4fee\u6539\u8868\u90fd\u662falter table -- \u4fee\u6539\u8868\u672c\u8eab\u7684\u9009\u9879 alter table \u00b7\u00b7 \u8868\u7684\u9009\u9879 eg : alter table \u00b7\u00b7 engine = myisam ; -- \u6dfb\u52a0\u5b57\u6bb5 alter table \u00b7\u00b7 add \u5217\u540d \u7c7b\u578b -- \u4fee\u6539\u5b57\u6bb5\uff1a\u4e0d\u91cd\u547d\u540d alter table \u00b7\u00b7 modify \u5217\u540d \u7c7b\u578b\u53ca\u7ea6\u675f -- \u4fee\u6539\u5b57\u6bb5\u6bb5\uff1a\u91cd\u547d\u540d alter table \u00b7\u00b7 change \u539f\u540d \u65b0\u540d \u7c7b\u578b\u53ca\u7ea6\u675f -- \u5220\u9664\u5b57\u6bb5 alter table \u00b7\u00b7 drop \u5b57\u6bb5\u540d -- \u5bf9\u8868\u8fdb\u884c\u91cd\u547d\u540d rename table \u00b7\u00b7 to \u65b0\u8868\u540d rename table \u00b7\u00b7 to \u5e93\u540d . \u8868\u540d ( \u5c06\u8868\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u6570\u636e\u5e93 ) -- rename \u53ef\u4ee5\u4ea4\u6362\u4e24\u4e2a\u8868\u540d -- \u5220\u9664\u8868 drop table [ if exists ] \u00b7\u00b7 -- \u6e05\u7a7a\u8868\u6570\u636e truncate [ table ] \u00b7\u00b7 -- \u590d\u5236\u8868\u7ed3\u6784 create table \u65b0\u8868 like \u00b7\u00b7 -- \u590d\u5236\u8868\u7ed3\u6784\u548c\u6570\u636e create table \u65b0\u8868 [ as ] select * from \u8981\u590d\u5236\u7684\u8868\u540d -- \u68c0\u67e5\u8868\u662f\u5426\u6709\u9519\u8bef CHECK TABLE tbl_name [ , tbl_name ] ... [ option ] ... -- \u4f18\u5316\u8868 OPTIMIZE [ LOCAL | NO_WRITE_TO_BINLOG ] TABLE tbl_name [ , tbl_name ] ... -- \u4fee\u590d\u8868 REPAIR [ LOCAL | NO_WRITE_TO_BINLOG ] TABLE tbl_name [ , tbl_name ] ... [ QUICK ] [ EXTENDED ] [ USE_FRM ] -- \u5206\u6790\u8868 ANALYZE [ LOCAL | NO_WRITE_TO_BINLOG ] TABLE tbl_name [ , tbl_name ] ... \u6570\u636e\u64cd\u4f5c \u00b6 /* \u6570\u636e\u64cd\u4f5c */ -- \u589e insert [ into ] \u00b7\u00b7 [ ( \u5b57\u6bb5\u5217\u8868 ) ] values ( \u503c\u5217\u8868 ) [ , ( \u503c\u5217\u8868 ) \uff0c ... ] -- replace \u548c insert \u5b8c\u5168\u4e00\u81f4\uff0c\u53ef\u4e92\u6362 insert [ into ] \u00b7\u00b7 set \u5b57\u6bb5\u540d = \u503c [ , \u5b57\u6bb5\u540d = \u503c\uff0c ... ] -- \u67e5 SELECT \u5b57\u6bb5\u5217\u8868 FROM \u8868\u540d [ \u5176\u4ed6\u5b50\u53e5 ] -- \u53ef\u6765\u81ea\u591a\u4e2a\u8868\u7684\u591a\u4e2a\u5b57\u6bb5 -- \u5176\u4ed6\u5b50\u53e5\u53ef\u4ee5\u4e0d\u4f7f\u7528 -- \u5b57\u6bb5\u5217\u8868\u53ef\u4ee5\u7528*\u4ee3\u66ff\uff0c\u8868\u793a\u6240\u6709\u5b57\u6bb5 -- \u5220 delete from \u8868\u540d [ \u5176\u4ed6\u5b50\u53e5 ] \u5982\u65e0\u6761\u4ef6\u5b50\u53e5\uff0c\u5219\u5168\u90e8\u5220\u9664 -- \u6539 update \u00b7\u00b7 set \u5b57\u6bb5\u540d = \u65b0\u503c [ , \u5b57\u6bb5\u540d = \u65b0\u503c ... ] [ \u66f4\u65b0\u6761\u4ef6 ] -- \u6570\u636e\u5b9e\u4f8b insert into GSW values ( 0 , 'Stephen_Curry' , 31 , 30 , 'PG' , 191 , 190 , '1988-3-14' , 4023 , 1 ), ( 0 , 'Klay_Thompson' , 29 , 11 , 'SG' , 201 , 215 , '1990-02-08' , 3274 , 1 ), ( 0 , \"D'Angelo_Russell\" , 23 , 7 , 'PG' , 196 , 195 , '1996-02-23' , 2728 , 0 ), ( 0 , 'Draymond_Green' , 29 , 23 , 'SF' , 201 , 230 , '1990-03-04' , 1854 , 1 ), ( 0 , 'Willie_Cauley_Stein' , 26 , 0 , 'C' , 213 , 240 , '1993-08-18' , 470 , 0 ), ( 0 , 'Kevon_Looney' , 23 , 5 , 'C' , 206 , 220 , '1996-02-06' , 462 , 1 ), ( 0 , 'Alec_Burks' , 28 , 35 , 'SG' , 198 , 214 , '1991-07-20' , 232 , 0 ), ( 0 , 'Jordan_Poole' , 20 , 3 , 'PG' , 196 , 194 , '1999-06-19' , 196 , 0 ), ( 0 , 'Jacob_Evans' , 22 , 10 , 'PG' , 198 , 210 , '1997-6-18' , 192 , 0 ), ( 0 , 'Omari_Spellman' , 22 , 21 , 'SF' , 206 , 245 , '1997-07-21' , 190 , 0 ), ( 0 , 'Glenn_Robinson' , 25 , 22 , 'SF' , 198 , 222 , '1994-01-08' , 188 , 0 ), ( 0 , 'Alfonzo_Mckinnie' , 27 , 28 , 'SF' , 203 , 215 , '1992-09-17' , 142 , 1 ), ( 0 , 'Alen_Smailagic' , 19 , 6 , 'PF' , 208 , 216 , '2000-08-18' , 89 , 0 ), ( 0 , 'Marcus_Derrickson' , 23 , 32 , 'SF' , 201 , 249 , '1996-02-01' , 7 , 0 ), ( 0 , 'Damion_Lee' , 27 , 1 , 'SG' , 198 , 210 , '1992-10-21' , 7 , 1 ), ( 0 , 'Xuyang_Xia' , 18 , 21 , 'SG' , 180 , 148 , '2000-10-04' , 0 , 0 ); -- \u6570\u636e\u5907\u4efd mysqldump - uroot - p \u6570\u636e\u5e93\u540d > ( \u91cd\u5b9a\u5411\u7b26\uff0c\u5bfc\u5165\u6570\u636e ) python . slq ; -- \u6570\u636e\u6062\u590d \u8fde\u63a5mysql\uff0c\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93 \u9000\u51fa\u8fde\u63a5\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4 mysql - uroot - p \u65b0\u6570\u636e\u5e93\u5e93\u540d < python . sql ; \u67e5\u8be2\u4e13\u9898 \u00b6 -- \u6761\u4ef6\u67e5\u8be2 -- \u903b\u8f91\u8fd0\u7b97\u7b26 (and, or, not) -- \u6a21\u7cca\u67e5\u8be2 -- like -- %\u66ff\u6362\u4e00\u4e2a\u6216\u591a\u4e2a\uff080\u4e2a\u4e5f\u884c\uff09 -- _\u66ff\u6362\u4e00\u4e2a -- rlike \u6b63\u5219 -- \u8303\u56f4\u67e5\u8be2 -- (in, not in, between ... and, not between ... and ) select age from GSW where age [ not ] in ( 34 , 32 , 23 ) select age from GSW where age [ not ] between 18 and 28 -- \u7a7a\u5224\u65ad -- is null, is not null -- \u6392\u5e8f -- order by \u5b57\u6bb5(\u591a\u4e2a\u5b57\u6bb5) -- asc \u5347\u5e8f(\u9ed8\u8ba4) -- desc \u964d\u5e8f -- \u805a\u5408\u51fd\u6570 -- \u603b\u6570count -- max -- min -- avg -- sum -- round -- \u5206\u7ec4(\u548c\u805a\u5408\u51fd\u6570\u4e00\u8d77\u4f7f\u7528) -- group by -- eg:select position, count(*) from GSW group by position; group by \u540e\u9762\u7684\u5b57\u6bb5\u4e3a\u533a\u5206\u4f9d\u636e\uff0c\u5728select\u540e\u9762\u53ea\u80fd\u63a5\u8be5\u5b57\u6bb5 -- group_concat() (\u62ec\u53f7\u91cc\u9762\u4e3a\u60f3\u67e5\u8be2\u7684\u5b57\u6bb5\u4fe1\u606f) -- \u67e5\u770b\u7ec4\uff08\u8868\uff09\u91cc\u4fe1\u606f -- having -- \u5728\u65b0\u67e5\u8be2\u7684\u8868\u51fa\u6765\u540e\uff0chaving\u540e\u4e3a\u9644\u52a0\u6761\u4ef6\uff0c\u540cwhere\u7684\u7b5b\u9009\u529f\u80fd having \u7684\u9644\u52a0\u6761\u4ef6\u5fc5\u987b\u4e3a\u65b0\u8868\u7684\u5b57\u6bb5 -- \u5206\u9875 -- limit start, count (\u5fc5\u987b\u4e3a\u6570\uff0c\u4e0d\u53ef\u4ee5\u4e3a\u8868\u8fbe\u5f0f) ( 0 , n ) ( n , n ) ( 2n , n ).... #limit \u5fc5\u987b\u5728\u8bed\u53e5\u6700\u540e -- \u94fe\u63a5\u67e5\u8be2\uff08\u591a\u4e2a\u8868\u5408\u5e76\u6570\u636e\uff09 -- inner join ... on select * from GSW inner join status ; \u4e0d\u7528on\u6761\u4ef6\u7684\u8bdd\u4f1a\u51fa\u73b0\u91cd\u590d\u6570\u636e\uff0c\u65e0\u6cd5\u5bf9\u5e94 -- \u67e5\u8be2 select * from GSW as g inner join status as s on g . play_id = s . id ; select g . * , s . name from GSW as g inner join status as s on g . play_id = s . id ; -- left join select * from GSW as g left join status as s on g . play_id = s . id ; \u4ee5\u5de6\u8868\u4e3a\u57fa\u51c6\uff0c\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\u5219\u4e3anull -- \u81ea\u8fde\u63a5 \u628a\u4e00\u4e2a\u8868\u7528\u4e24\u4e2a\u522b\u540d\u5f53\u4e24\u4e2a\u8868\u7528 \u89c6\u56fe \u00b6 -- \u521b\u5efa\u4e00\u4e2a\u89c6\u56fe create view \u89c6\u56fe\u540d ( \u6700\u597d\u4ee5v\u5f00\u5934 ) as select \u8bed\u53e5 \u89c6\u56fe\u662f\u4e00\u4e2a\u865a\u62df\u7684\u8868\uff0c\u67e5\u8be2\u7528\uff0c\u7528\u65f6\u5219\u6267\u884c\u76f8\u5e94\u7684sql\u8bed\u53e5 \u67e5\u770b\u53ea\u9700select * from \u89c6\u56fe\u540d eg : create view v_GSW_old as select * from GSW where is_old = 1 ; -- \u5220\u9664\u89c6\u56fe drop view \u89c6\u56fe\u540d \u4e8b\u52a1 \u00b6 -- \u56db\u5927\u7279\u6027(ACID) -- \u539f\u5b50\u6027(Atomicity) -- \u4e00\u81f4\u6027(Consistency) -- \u9694\u79bb\u6027(Isolation) -- \u6301\u4e45\u6027(Durability) -- \u5f00\u542f\u4e8b\u52a1 begin \u6216 start transaction ; -- \u63d0\u4ea4\u4e8b\u52a1 commit \uff1b -- \u56de\u6eda\u4e8b\u52a1 rollback \uff1b \u7d22\u5f15 \u00b6 -- \u67e5\u770b\u7d22\u5f15 show index from \u8868\u540d -- \u5efa\u7acb\u7d22\u5f15 create index \u7d22\u5f15\u540d on \u8868\u540d ( \u5b57\u6bb5\u540d\u79f0 ( \u957f\u5ea6 )) \u5982\u679c\u6307\u5b9a\u5b57\u6bb5\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u9700\u6307\u5b9a\u957f\u5ea6\uff0c\u5efa\u8bae\u4e00\u81f4 \u82e5\u4e0d\u662f\uff0c\u5219\u4e0d\u9700\u8981 eg : create index player_search on GSW ( name ( 30 )); -- \u5220\u9664\u7d22\u5f15 drop index \u7d22\u5f15\u540d\u79f0 on \u8868\u540d -- \u67e5\u8be2 -- \u5f00\u542f\u8fd0\u884c\u65f6\u95f4\u76d1\u6d4b set profiling = 1 ; -- \u67e5\u770b\u6267\u884c\u65f6\u95f4 show profiles ; \u8d26\u6237\u7ba1\u7406 \u00b6 -- \u521b\u5efa\u7528\u6237 \u5148root\u8d26\u6237\u767b\u5f55\uff0c\u518d\u521b\u5efa grant \u6743\u9650\u5217\u8868 on \u6570\u636e\u5e93 to '\u7528\u6237\u540d' @'\u8bbf\u95ee\u4e3b\u673a' identified by '\u5bc6\u7801' ; -- \u67e5\u770b\u7528\u6237\u6709\u54ea\u4e9b\u6743\u9650 show grants for \u7528\u6237\u540d @ \u8bbf\u95ee\u4e3b\u673a -- \u4fee\u6539\u6743\u9650 grant \u6743\u9650\u540d\u79f0 on \u6570\u636e\u5e93 to \u8d26\u6237 @ \u4e3b\u673a with grant option ; \u4e4b\u540e\u5237\u65b0\u6743\u9650 flush privileges \u4f7f\u6743\u9650\u751f\u6548 -- \u4fee\u6539\u5bc6\u7801 \u4f7f\u7528root\u767b\u5f55\uff0c\u4fee\u6539mysql\u6570\u636e\u5e93\u4e2d\u7684user\u8868 -- \u4f7f\u7528password()\u51fd\u6570\u52a0\u5bc6 update user set authentication_string = password ( '\u65b0\u5bc6\u7801' ) where user = '\u7528\u6237\u540d' \u4e4b\u540e\u5237\u65b0\u6743\u9650 flush privileges -- \u5220\u9664\u7528\u6237 drop user '\u7528\u6237\u540d' @'\u4e3b\u673a[\u5982(%)]' ; -- \u8fdc\u7a0b\u8fde\u63a5\u614e\u7528\uff0c\u7528\u65f6\u518d\u67e5\u8d44\u6599 \u4e3b\u4ece\u6570\u636e\u5e93 \u00b6 Python\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92 \u00b6 from pymysql import * def main (): #\u521b\u5efaConnection\u8fde\u63a5 conn = Connect ( host = 'localhost' , port = 3306 , user = 'root' , \\ password = 'x1048844361' , database = 'nbateam' , charset = 'utf8' ) #\u83b7\u5f97cursor\u5bf9\u8c61 cs1 = conn . cursor () #\u6267\u884cselect\u8bed\u53e5\uff0c\u5e76\u8fd4\u56de\u53d7\u5f71\u54cd\u7684\u884c\u6570\uff1a\u67e5\u8be2\u4e00\u6761\u6570\u636e #execute\u4f1a\u8fd4\u56de\u751f\u6548\u884c\u6570 count = cs1 . execute ( 'select id,name from GSW where is_old=1' ) #\u6253\u5370\u53d7\u5f71\u54cd\u7684\u884c\u6570 print ( '\u67e5\u8be2\u5230 %d \u6761\u6570\u636e:' % count ) for i in range ( count ): #\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c #fetchall() fetchmany(\u6570\u91cf) fetchone() \u8fd4\u56de\u5143\u7ec4 #\u6e38\u6807\u81ea\u52a8\u79fb\u52a8 result = cs1 . fetchone () #\u6253\u5370\u67e5\u8be2\u7684\u7ed3\u679c print ( result ) #\u5173\u95edcursor\u5bf9\u8c61 #conn\u5148\u5f00\u540e\u5173 cs1 . close () conn . close () if __name__ == '__main__' : main ()","title":"SQL\u5b9e\u6218"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_1","text":"/* Windows\u670d\u52a1 */ -- \u542f\u52a8MySQL net start mysql -- \u521b\u5efaWindows\u670d\u52a1 sc create mysql binPath = mysqld_bin_path ( \u6ce8\u610f\uff1a\u7b49\u53f7\u4e0e\u503c\u4e4b\u95f4\u6709\u7a7a\u683c ) /* \u8fde\u63a5\u4e0e\u65ad\u5f00\u670d\u52a1\u5668 */ mysql - h \u5730\u5740 - P \u7aef\u53e3 - u \u7528\u6237\u540d - p \u5bc6\u7801 SHOW PROCESSLIST -- \u663e\u793a\u54ea\u4e9b\u7ebf\u7a0b\u6b63\u5728\u8fd0\u884c SHOW VARIABLES -- \u663e\u793a\u7cfb\u7edf\u53d8\u91cf\u4fe1\u606f","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_2","text":"/* \u6570\u636e\u5e93\u64cd\u4f5c */ --------------------- -- \u67e5\u770b\u5f53\u524d\u6709\u54ea\u4e9b\u6570\u636e\u5e93 show databases ; -- \u67e5\u770b\u5f53\u524d\u6570\u636e\u5e93 select database (); -- \u00b7\u00b7select \u4e00\u822c\u90fd\u662f\u64cd\u4f5c\u51fd\u6570 \u7c7b\u4f3c\u7684\u5982\u4e0b\uff1a -- \u663e\u793a\u5f53\u524d\u65f6\u95f4\u3001\u7528\u6237\u3001\u6570\u636e\u5e93\u7248\u672c select now (); select user (); select version (); -- \u5efa\u7acb\u4e00\u4e2a\u6570\u636e\u5e93 create database [ if not exists ] nba charset = utf8 ; -- \u67e5\u770b\u5f53\u524d\u5e93\u7684\u521b\u5efa\u4fe1\u606f show create database nbateam ; -- \u5220\u9664\u5e93 drop database [ if exists ] nbateam ; -- \u9009\u53d6\u6570\u636e\u5e93 use nbateam ;","title":"\u6570\u636e\u5e93\u64cd\u4f5c"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_3","text":"/* \u8868\u64cd\u4f5c */ -- \u67e5\u770b\u5f53\u524d\u6570\u636e\u5e93\u4e0b\u6709\u54ea\u4e9b\u8868 show tables ; -- \u5efa\u7acb\u4e00\u4e2a\u8868 create [ temporary ] table [ if not exists ] [ \u5e93\u540d . ] GSW ( \u8868\u7684\u7ed3\u6784\u5b9a\u4e49 ) [ \u8868\u9009\u9879 ] -- \u5b9e\u4f8b create table GSW ( id int unsigned not null primary key auto_increment , name varchar ( 30 ) not null , age tinyint unsigned not null , num int unsigned not null , position varchar ( 3 ) not null , high int unsigned not null , weight int unsigned not null , birthday date default '2000-01-01' , salary int unsigned not null , is_old bit default 1 ); -- \u8868\u9009\u9879 -- \u5b57\u7b26\u96c6 charset = utf8 ( \u9ed8\u8ba4latin ) -- \u5b58\u50a8\u5f15\u64ce engine = InnoDB \u8868\u5728\u7ba1\u7406\u6570\u636e\u65f6\u91c7\u7528\u7684\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7ed3\u6784\u4e0d\u540c\u4f1a\u5bfc\u81f4\u5904\u7406\u65b9\u5f0f\u3001\u63d0\u4f9b\u7684\u7279\u6027\u64cd\u4f5c\u7b49\u4e0d\u540c \u5e38\u89c1\u7684\u5f15\u64ce\uff1aInnoDB MyISAM Memory / Heap BDB Merge Example CSV MaxDB Archive \u4e0d\u540c\u7684\u5f15\u64ce\u5728\u4fdd\u5b58\u8868\u7684\u7ed3\u6784\u548c\u6570\u636e\u65f6\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u5f0f MyISAM\u8868\u6587\u4ef6\u542b\u4e49\uff1a . frm\u8868\u5b9a\u4e49\uff0c . MYD\u8868\u6570\u636e\uff0c . MYI\u8868\u7d22\u5f15 InnoDB\u8868\u6587\u4ef6\u542b\u4e49\uff1a . frm\u8868\u5b9a\u4e49\uff0c\u8868\u7a7a\u95f4\u6570\u636e\u548c\u65e5\u5fd7\u6587\u4ef6 SHOW ENGINES -- \u663e\u793a\u5b58\u50a8\u5f15\u64ce\u7684\u72b6\u6001\u4fe1\u606f SHOW ENGINE \u5f15\u64ce\u540d { LOGS | STATUS } -- \u663e\u793a\u5b58\u50a8\u5f15\u64ce\u7684\u65e5\u5fd7\u6216\u72b6\u6001\u4fe1\u606f -- \u81ea\u589e\u8d77\u59cb\u6570 auto_increment = \u884c\u6570 -- \u6570\u636e\u6587\u4ef6\u76ee\u5f55 data directory = '\u76ee\u5f55' -- \u7d22\u5f15\u6587\u4ef6\u76ee\u5f55 index directory = '\u76ee\u5f55' -- \u8868\u6ce8\u91ca comment = 'string' -- \u5206\u533a\u9009\u9879 partition by ....( \u89c1\u624b\u518c ) -- \u67e5\u770b\u8868 show tables [ like 'pattern' ] ; show tables from \u5e93\u540d\uff1b -- \u67e5\u770b\u8868\u673a\u6784 show create table \u8868\u540d desc \u8868\u540d / describe \u00b7\u00b7 / explain \u00b7\u00b7 / show columns from \u00b7\u00b7 [ like 'pattern' ] show table status [ from db_name ] [ like 'pattern' ] -- \u4fee\u6539\u8868 \u4fee\u6539\u8868\u90fd\u662falter table -- \u4fee\u6539\u8868\u672c\u8eab\u7684\u9009\u9879 alter table \u00b7\u00b7 \u8868\u7684\u9009\u9879 eg : alter table \u00b7\u00b7 engine = myisam ; -- \u6dfb\u52a0\u5b57\u6bb5 alter table \u00b7\u00b7 add \u5217\u540d \u7c7b\u578b -- \u4fee\u6539\u5b57\u6bb5\uff1a\u4e0d\u91cd\u547d\u540d alter table \u00b7\u00b7 modify \u5217\u540d \u7c7b\u578b\u53ca\u7ea6\u675f -- \u4fee\u6539\u5b57\u6bb5\u6bb5\uff1a\u91cd\u547d\u540d alter table \u00b7\u00b7 change \u539f\u540d \u65b0\u540d \u7c7b\u578b\u53ca\u7ea6\u675f -- \u5220\u9664\u5b57\u6bb5 alter table \u00b7\u00b7 drop \u5b57\u6bb5\u540d -- \u5bf9\u8868\u8fdb\u884c\u91cd\u547d\u540d rename table \u00b7\u00b7 to \u65b0\u8868\u540d rename table \u00b7\u00b7 to \u5e93\u540d . \u8868\u540d ( \u5c06\u8868\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u6570\u636e\u5e93 ) -- rename \u53ef\u4ee5\u4ea4\u6362\u4e24\u4e2a\u8868\u540d -- \u5220\u9664\u8868 drop table [ if exists ] \u00b7\u00b7 -- \u6e05\u7a7a\u8868\u6570\u636e truncate [ table ] \u00b7\u00b7 -- \u590d\u5236\u8868\u7ed3\u6784 create table \u65b0\u8868 like \u00b7\u00b7 -- \u590d\u5236\u8868\u7ed3\u6784\u548c\u6570\u636e create table \u65b0\u8868 [ as ] select * from \u8981\u590d\u5236\u7684\u8868\u540d -- \u68c0\u67e5\u8868\u662f\u5426\u6709\u9519\u8bef CHECK TABLE tbl_name [ , tbl_name ] ... [ option ] ... -- \u4f18\u5316\u8868 OPTIMIZE [ LOCAL | NO_WRITE_TO_BINLOG ] TABLE tbl_name [ , tbl_name ] ... -- \u4fee\u590d\u8868 REPAIR [ LOCAL | NO_WRITE_TO_BINLOG ] TABLE tbl_name [ , tbl_name ] ... [ QUICK ] [ EXTENDED ] [ USE_FRM ] -- \u5206\u6790\u8868 ANALYZE [ LOCAL | NO_WRITE_TO_BINLOG ] TABLE tbl_name [ , tbl_name ] ...","title":"\u8868\u7684\u64cd\u4f5c"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_4","text":"/* \u6570\u636e\u64cd\u4f5c */ -- \u589e insert [ into ] \u00b7\u00b7 [ ( \u5b57\u6bb5\u5217\u8868 ) ] values ( \u503c\u5217\u8868 ) [ , ( \u503c\u5217\u8868 ) \uff0c ... ] -- replace \u548c insert \u5b8c\u5168\u4e00\u81f4\uff0c\u53ef\u4e92\u6362 insert [ into ] \u00b7\u00b7 set \u5b57\u6bb5\u540d = \u503c [ , \u5b57\u6bb5\u540d = \u503c\uff0c ... ] -- \u67e5 SELECT \u5b57\u6bb5\u5217\u8868 FROM \u8868\u540d [ \u5176\u4ed6\u5b50\u53e5 ] -- \u53ef\u6765\u81ea\u591a\u4e2a\u8868\u7684\u591a\u4e2a\u5b57\u6bb5 -- \u5176\u4ed6\u5b50\u53e5\u53ef\u4ee5\u4e0d\u4f7f\u7528 -- \u5b57\u6bb5\u5217\u8868\u53ef\u4ee5\u7528*\u4ee3\u66ff\uff0c\u8868\u793a\u6240\u6709\u5b57\u6bb5 -- \u5220 delete from \u8868\u540d [ \u5176\u4ed6\u5b50\u53e5 ] \u5982\u65e0\u6761\u4ef6\u5b50\u53e5\uff0c\u5219\u5168\u90e8\u5220\u9664 -- \u6539 update \u00b7\u00b7 set \u5b57\u6bb5\u540d = \u65b0\u503c [ , \u5b57\u6bb5\u540d = \u65b0\u503c ... ] [ \u66f4\u65b0\u6761\u4ef6 ] -- \u6570\u636e\u5b9e\u4f8b insert into GSW values ( 0 , 'Stephen_Curry' , 31 , 30 , 'PG' , 191 , 190 , '1988-3-14' , 4023 , 1 ), ( 0 , 'Klay_Thompson' , 29 , 11 , 'SG' , 201 , 215 , '1990-02-08' , 3274 , 1 ), ( 0 , \"D'Angelo_Russell\" , 23 , 7 , 'PG' , 196 , 195 , '1996-02-23' , 2728 , 0 ), ( 0 , 'Draymond_Green' , 29 , 23 , 'SF' , 201 , 230 , '1990-03-04' , 1854 , 1 ), ( 0 , 'Willie_Cauley_Stein' , 26 , 0 , 'C' , 213 , 240 , '1993-08-18' , 470 , 0 ), ( 0 , 'Kevon_Looney' , 23 , 5 , 'C' , 206 , 220 , '1996-02-06' , 462 , 1 ), ( 0 , 'Alec_Burks' , 28 , 35 , 'SG' , 198 , 214 , '1991-07-20' , 232 , 0 ), ( 0 , 'Jordan_Poole' , 20 , 3 , 'PG' , 196 , 194 , '1999-06-19' , 196 , 0 ), ( 0 , 'Jacob_Evans' , 22 , 10 , 'PG' , 198 , 210 , '1997-6-18' , 192 , 0 ), ( 0 , 'Omari_Spellman' , 22 , 21 , 'SF' , 206 , 245 , '1997-07-21' , 190 , 0 ), ( 0 , 'Glenn_Robinson' , 25 , 22 , 'SF' , 198 , 222 , '1994-01-08' , 188 , 0 ), ( 0 , 'Alfonzo_Mckinnie' , 27 , 28 , 'SF' , 203 , 215 , '1992-09-17' , 142 , 1 ), ( 0 , 'Alen_Smailagic' , 19 , 6 , 'PF' , 208 , 216 , '2000-08-18' , 89 , 0 ), ( 0 , 'Marcus_Derrickson' , 23 , 32 , 'SF' , 201 , 249 , '1996-02-01' , 7 , 0 ), ( 0 , 'Damion_Lee' , 27 , 1 , 'SG' , 198 , 210 , '1992-10-21' , 7 , 1 ), ( 0 , 'Xuyang_Xia' , 18 , 21 , 'SG' , 180 , 148 , '2000-10-04' , 0 , 0 ); -- \u6570\u636e\u5907\u4efd mysqldump - uroot - p \u6570\u636e\u5e93\u540d > ( \u91cd\u5b9a\u5411\u7b26\uff0c\u5bfc\u5165\u6570\u636e ) python . slq ; -- \u6570\u636e\u6062\u590d \u8fde\u63a5mysql\uff0c\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93 \u9000\u51fa\u8fde\u63a5\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4 mysql - uroot - p \u65b0\u6570\u636e\u5e93\u5e93\u540d < python . sql ;","title":"\u6570\u636e\u64cd\u4f5c"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_5","text":"-- \u6761\u4ef6\u67e5\u8be2 -- \u903b\u8f91\u8fd0\u7b97\u7b26 (and, or, not) -- \u6a21\u7cca\u67e5\u8be2 -- like -- %\u66ff\u6362\u4e00\u4e2a\u6216\u591a\u4e2a\uff080\u4e2a\u4e5f\u884c\uff09 -- _\u66ff\u6362\u4e00\u4e2a -- rlike \u6b63\u5219 -- \u8303\u56f4\u67e5\u8be2 -- (in, not in, between ... and, not between ... and ) select age from GSW where age [ not ] in ( 34 , 32 , 23 ) select age from GSW where age [ not ] between 18 and 28 -- \u7a7a\u5224\u65ad -- is null, is not null -- \u6392\u5e8f -- order by \u5b57\u6bb5(\u591a\u4e2a\u5b57\u6bb5) -- asc \u5347\u5e8f(\u9ed8\u8ba4) -- desc \u964d\u5e8f -- \u805a\u5408\u51fd\u6570 -- \u603b\u6570count -- max -- min -- avg -- sum -- round -- \u5206\u7ec4(\u548c\u805a\u5408\u51fd\u6570\u4e00\u8d77\u4f7f\u7528) -- group by -- eg:select position, count(*) from GSW group by position; group by \u540e\u9762\u7684\u5b57\u6bb5\u4e3a\u533a\u5206\u4f9d\u636e\uff0c\u5728select\u540e\u9762\u53ea\u80fd\u63a5\u8be5\u5b57\u6bb5 -- group_concat() (\u62ec\u53f7\u91cc\u9762\u4e3a\u60f3\u67e5\u8be2\u7684\u5b57\u6bb5\u4fe1\u606f) -- \u67e5\u770b\u7ec4\uff08\u8868\uff09\u91cc\u4fe1\u606f -- having -- \u5728\u65b0\u67e5\u8be2\u7684\u8868\u51fa\u6765\u540e\uff0chaving\u540e\u4e3a\u9644\u52a0\u6761\u4ef6\uff0c\u540cwhere\u7684\u7b5b\u9009\u529f\u80fd having \u7684\u9644\u52a0\u6761\u4ef6\u5fc5\u987b\u4e3a\u65b0\u8868\u7684\u5b57\u6bb5 -- \u5206\u9875 -- limit start, count (\u5fc5\u987b\u4e3a\u6570\uff0c\u4e0d\u53ef\u4ee5\u4e3a\u8868\u8fbe\u5f0f) ( 0 , n ) ( n , n ) ( 2n , n ).... #limit \u5fc5\u987b\u5728\u8bed\u53e5\u6700\u540e -- \u94fe\u63a5\u67e5\u8be2\uff08\u591a\u4e2a\u8868\u5408\u5e76\u6570\u636e\uff09 -- inner join ... on select * from GSW inner join status ; \u4e0d\u7528on\u6761\u4ef6\u7684\u8bdd\u4f1a\u51fa\u73b0\u91cd\u590d\u6570\u636e\uff0c\u65e0\u6cd5\u5bf9\u5e94 -- \u67e5\u8be2 select * from GSW as g inner join status as s on g . play_id = s . id ; select g . * , s . name from GSW as g inner join status as s on g . play_id = s . id ; -- left join select * from GSW as g left join status as s on g . play_id = s . id ; \u4ee5\u5de6\u8868\u4e3a\u57fa\u51c6\uff0c\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\u5219\u4e3anull -- \u81ea\u8fde\u63a5 \u628a\u4e00\u4e2a\u8868\u7528\u4e24\u4e2a\u522b\u540d\u5f53\u4e24\u4e2a\u8868\u7528","title":"\u67e5\u8be2\u4e13\u9898"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_6","text":"-- \u521b\u5efa\u4e00\u4e2a\u89c6\u56fe create view \u89c6\u56fe\u540d ( \u6700\u597d\u4ee5v\u5f00\u5934 ) as select \u8bed\u53e5 \u89c6\u56fe\u662f\u4e00\u4e2a\u865a\u62df\u7684\u8868\uff0c\u67e5\u8be2\u7528\uff0c\u7528\u65f6\u5219\u6267\u884c\u76f8\u5e94\u7684sql\u8bed\u53e5 \u67e5\u770b\u53ea\u9700select * from \u89c6\u56fe\u540d eg : create view v_GSW_old as select * from GSW where is_old = 1 ; -- \u5220\u9664\u89c6\u56fe drop view \u89c6\u56fe\u540d","title":"\u89c6\u56fe"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_7","text":"-- \u56db\u5927\u7279\u6027(ACID) -- \u539f\u5b50\u6027(Atomicity) -- \u4e00\u81f4\u6027(Consistency) -- \u9694\u79bb\u6027(Isolation) -- \u6301\u4e45\u6027(Durability) -- \u5f00\u542f\u4e8b\u52a1 begin \u6216 start transaction ; -- \u63d0\u4ea4\u4e8b\u52a1 commit \uff1b -- \u56de\u6eda\u4e8b\u52a1 rollback \uff1b","title":"\u4e8b\u52a1"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_8","text":"-- \u67e5\u770b\u7d22\u5f15 show index from \u8868\u540d -- \u5efa\u7acb\u7d22\u5f15 create index \u7d22\u5f15\u540d on \u8868\u540d ( \u5b57\u6bb5\u540d\u79f0 ( \u957f\u5ea6 )) \u5982\u679c\u6307\u5b9a\u5b57\u6bb5\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u9700\u6307\u5b9a\u957f\u5ea6\uff0c\u5efa\u8bae\u4e00\u81f4 \u82e5\u4e0d\u662f\uff0c\u5219\u4e0d\u9700\u8981 eg : create index player_search on GSW ( name ( 30 )); -- \u5220\u9664\u7d22\u5f15 drop index \u7d22\u5f15\u540d\u79f0 on \u8868\u540d -- \u67e5\u8be2 -- \u5f00\u542f\u8fd0\u884c\u65f6\u95f4\u76d1\u6d4b set profiling = 1 ; -- \u67e5\u770b\u6267\u884c\u65f6\u95f4 show profiles ;","title":"\u7d22\u5f15"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_9","text":"-- \u521b\u5efa\u7528\u6237 \u5148root\u8d26\u6237\u767b\u5f55\uff0c\u518d\u521b\u5efa grant \u6743\u9650\u5217\u8868 on \u6570\u636e\u5e93 to '\u7528\u6237\u540d' @'\u8bbf\u95ee\u4e3b\u673a' identified by '\u5bc6\u7801' ; -- \u67e5\u770b\u7528\u6237\u6709\u54ea\u4e9b\u6743\u9650 show grants for \u7528\u6237\u540d @ \u8bbf\u95ee\u4e3b\u673a -- \u4fee\u6539\u6743\u9650 grant \u6743\u9650\u540d\u79f0 on \u6570\u636e\u5e93 to \u8d26\u6237 @ \u4e3b\u673a with grant option ; \u4e4b\u540e\u5237\u65b0\u6743\u9650 flush privileges \u4f7f\u6743\u9650\u751f\u6548 -- \u4fee\u6539\u5bc6\u7801 \u4f7f\u7528root\u767b\u5f55\uff0c\u4fee\u6539mysql\u6570\u636e\u5e93\u4e2d\u7684user\u8868 -- \u4f7f\u7528password()\u51fd\u6570\u52a0\u5bc6 update user set authentication_string = password ( '\u65b0\u5bc6\u7801' ) where user = '\u7528\u6237\u540d' \u4e4b\u540e\u5237\u65b0\u6743\u9650 flush privileges -- \u5220\u9664\u7528\u6237 drop user '\u7528\u6237\u540d' @'\u4e3b\u673a[\u5982(%)]' ; -- \u8fdc\u7a0b\u8fde\u63a5\u614e\u7528\uff0c\u7528\u65f6\u518d\u67e5\u8d44\u6599","title":"\u8d26\u6237\u7ba1\u7406"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#_10","text":"","title":"\u4e3b\u4ece\u6570\u636e\u5e93"},{"location":"%E6%96%87%E4%BB%B6/SQL%E5%AE%9E%E6%88%98/#python","text":"from pymysql import * def main (): #\u521b\u5efaConnection\u8fde\u63a5 conn = Connect ( host = 'localhost' , port = 3306 , user = 'root' , \\ password = 'x1048844361' , database = 'nbateam' , charset = 'utf8' ) #\u83b7\u5f97cursor\u5bf9\u8c61 cs1 = conn . cursor () #\u6267\u884cselect\u8bed\u53e5\uff0c\u5e76\u8fd4\u56de\u53d7\u5f71\u54cd\u7684\u884c\u6570\uff1a\u67e5\u8be2\u4e00\u6761\u6570\u636e #execute\u4f1a\u8fd4\u56de\u751f\u6548\u884c\u6570 count = cs1 . execute ( 'select id,name from GSW where is_old=1' ) #\u6253\u5370\u53d7\u5f71\u54cd\u7684\u884c\u6570 print ( '\u67e5\u8be2\u5230 %d \u6761\u6570\u636e:' % count ) for i in range ( count ): #\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c #fetchall() fetchmany(\u6570\u91cf) fetchone() \u8fd4\u56de\u5143\u7ec4 #\u6e38\u6807\u81ea\u52a8\u79fb\u52a8 result = cs1 . fetchone () #\u6253\u5370\u67e5\u8be2\u7684\u7ed3\u679c print ( result ) #\u5173\u95edcursor\u5bf9\u8c61 #conn\u5148\u5f00\u540e\u5173 cs1 . close () conn . close () if __name__ == '__main__' : main ()","title":"Python\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","text":"DP\u601d\u8003\u6a21\u677f \u00b6 \u5927\u591a\u6570\u9012\u5f52\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u91cd\u5199 \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u5173\u6ce8\u53d8\u91cf 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[i] dp[i][j]\u6240\u4ee3\u8868\u5b9a\u4e49\uff08\u4e00\u7ef4\u3001\u4e8c\u7ef4\u7b49\uff09 2.\u72b6\u6001\u8f6c\u79fb\uff1a\u5173\u6ce8\u72b6\u6001\u600e\u4e48\u904d\u5386\uff0c\u600e\u4e48\u8f6c\u79fb 3.\u521d\u59cb\u5316\uff1adp\u6570\u7ec4\u5927\u5c0f\uff0c\u6eda\u52a8\u521d\u503c 4.\u904d\u5386\u987a\u5e8f\uff1a\u5c24\u5176\u4e8c\u7ef4 5.\u8fd4\u56de\u6761\u4ef6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u80cc\u5305\u95ee\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u52a8\u6001\u89c4\u5212\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83d\udc9a\ud83e\udde1 && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 72. \u7f16\u8f91\u8ddd\u79bb \ud83e\udde1 && \ud83d\udca5 \u2160 1 221. \u6700\u5927\u6b63\u65b9\u5f62 \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \ud83d\udc9a && \ud83d\udc8c 01\u80cc\u5305\u95ee\u9898 \u00b6 f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } 72. \u7f16\u8f91\u8ddd\u79bb \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 \u53c2\u8003 //\u4f7f\u7528dpTable //\u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a //\u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b int minDistance ( string word1 , string word2 ) { int m = word1 . size (); int n = word2 . size (); vector < vector < int > > dp ( m + 1 , vector < int > ( n + 1 )); for ( int i = 0 ; i <= m ; ++ i ) dp [ i ][ 0 ] = i ; for ( int j = 0 ; j <= n ; ++ j ) dp [ 0 ][ j ] = j ; for ( int i = 1 ; i <= m ; ++ i ){ for ( int j = 1 ; j <= n ; ++ j ){ //\u5f53\u524d\u5b57\u7b26\u4e32\u76f8\u7b49 \u5219\u53cc\u6307\u9488\u90fd\u524d\u79fb if ( word1 [ i -1 ] == word2 [ j -1 ]) dp [ i ][ j ] = dp [ i -1 ][ j -1 ]; else dp [ i ][ j ] = min ( min ( dp [ i -1 ][ j ] + 1 , dp [ i ][ j -1 ] + 1 ), dp [ i -1 ][ j -1 ] + 1 ); } } return dp [ m ][ n ]; } 403. \u9752\u86d9\u8fc7\u6cb3 \u00b6 class Solution { public boolean canCross ( int [] stones ) { /* \u5173\u6ce8\u53d8\u91cf\uff1a\u5f53\u524dstone\u6570\u7ec4\u7684\u7d22\u5f15index\uff0c\u8df3\u7684\u6b65\u6570k 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[idx][k] \u4ee3\u8868\u8df3\u4e86k\u6b65\u4e4b\u540e\u6765\u5230\u7d22\u5f15\u4e3aidx\u7684\u77f3\u5934\u4e0a 2.\u72b6\u6001\u8f6c\u79fb\uff1aidx\u53ef\u4ee5\u4ecej\u2208[1, idx-1]\u4f4d\u7f6e\u7684\u77f3\u5934\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u9700\u8981\u904d\u5386\u3002\u7531\u4e8e\u662f\u8df3\u4e86k\u6b65(k = diff = stone[idx]-stone[j])\u6765\u5230idx\u4e0a\uff0c\u6240\u4ee5\u8df3\u5230\u524d\u4e00\u5757\u77f3\u5934j\u7684\u6b65\u6570\u5fc5\u987b\u662f k-1 || k || k+1 \u4ece\u800c\u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[idx][diff] = dp[j][diff-1] || dp[j][diff] || dp[j][diff+1] 3.\u521d\u59cb\u5316\uff1adp[1][1]=true; 4.\u904d\u5386\u987a\u5e8f\uff1a\u5916\u5c42\u904d\u5386i\uff0ci\u2208[2, len-1]\uff0c\u4ee3\u8868stone\u7d22\u5f15idx\u3002 \u5185\u5c42\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0c\u4ee3\u8868\u4ece\u524d\u9762\u7684[1, i-1]\u77f3\u5934\u5f97\u5230\u7684\u72b6\u6001\u8f6c\u79fb 5.\u8fd4\u56de\u6761\u4ef6\uff1adp[n-1][k] k\u2208[1, n-1] (\u8df3\u5230stone[n-1]\u7684\u6b65\u6570\u53ef\u4ee5\u4e3a[1, n-1]) */ int len = stones . length ; if ( stones [ 1 ] != 1 ) return false ; //dp[n][k]\u4e3a\u8df3\u8dc3\u4e86k\u6b65\u6765\u5230\u4e86stone[n]\u7684\u4f4d\u7f6e //n\u5bf9\u5e94stone\u7684\u7d22\u5f15\uff0c\u4ed6\u7684\u72b6\u6001\u5e94\u8be5\u7531i\u2208[0,n-1]\u8f6c\u79fb\u800c\u6765 \u7531\u4e8e0\u30011\u7279\u6b8a\u6027\u53ef\u4ee5\u4ece[2, n-1]\u904d\u5386i //\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0cdiff\u5bf9\u5e94\u8df3\u8dc3\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6b65\u6570 //\u5219\u8f6c\u79fb\u60c5\u51b5\u7b49\u4ef7\u4e8edp[i][diff] = dp[j][diff] || dp[j][diff-1] || dp[j][diff+1] boolean [][] dp = new boolean [ len ][ len + 1 ] ; dp [ 1 ][ 1 ] = true ; //i\u4e3astones\u5bf9\u5e94\u7d22\u5f15\uff0c\u4e3a\u6574\u4f53\u5916\u90e8\u904d\u5386 for ( int i = 2 ; i < len ; i ++ ){ //\u72b6\u6001\u8f6c\u79fb\u90e8\u5206\uff0cj\u2208[1, i-1]\u4e3a\u4e4b\u524d\u7684\u72b6\u6001\u904d\u5386 for ( int j = 1 ; j < i ; j ++ ){ //\u8be5\u6b21\u6240\u8df3\u6b65\u6570 int diff = stones [ i ] - stones [ j ] ; if ( diff <= j + 1 ){ //j+1\u4e3a\u7406\u8bba\u6700\u5927\u6b65\u6570 //\u8be5\u6b21\u8df3diff\u6b65\uff0c\u90a3\u4e0a\u4e00\u6b21\u4e5f\u53ea\u80fd\u8df3diff-1 || diff || diff+1\u6b65\uff0c\u4ece\u800c\u5f97\u8f6c\u79fb\u65b9\u7a0b dp [ i ][ diff ] = dp [ j ][ diff - 1 ] || dp [ j ][ diff ] || dp [ j ][ diff + 1 ] ; } } } //len\u662f\u6b65\u6570k\u7684\u4e0a\u9650 for ( int k = 1 ; k < len ; k ++ ){ if ( dp [ len - 1 ][ k ] == true ) return true ; } return false ; } }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#dp","text":"\u5927\u591a\u6570\u9012\u5f52\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u91cd\u5199 \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u5173\u6ce8\u53d8\u91cf 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[i] dp[i][j]\u6240\u4ee3\u8868\u5b9a\u4e49\uff08\u4e00\u7ef4\u3001\u4e8c\u7ef4\u7b49\uff09 2.\u72b6\u6001\u8f6c\u79fb\uff1a\u5173\u6ce8\u72b6\u6001\u600e\u4e48\u904d\u5386\uff0c\u600e\u4e48\u8f6c\u79fb 3.\u521d\u59cb\u5316\uff1adp\u6570\u7ec4\u5927\u5c0f\uff0c\u6eda\u52a8\u521d\u503c 4.\u904d\u5386\u987a\u5e8f\uff1a\u5c24\u5176\u4e8c\u7ef4 5.\u8fd4\u56de\u6761\u4ef6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u80cc\u5305\u95ee\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u52a8\u6001\u89c4\u5212\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83d\udc9a\ud83e\udde1 && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 72. \u7f16\u8f91\u8ddd\u79bb \ud83e\udde1 && \ud83d\udca5 \u2160 1 221. \u6700\u5927\u6b63\u65b9\u5f62 \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \ud83d\udc9a && \ud83d\udc8c","title":"DP\u601d\u8003\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#01","text":"f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } }","title":"01\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#72","text":"\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 \u53c2\u8003 //\u4f7f\u7528dpTable //\u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a //\u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b int minDistance ( string word1 , string word2 ) { int m = word1 . size (); int n = word2 . size (); vector < vector < int > > dp ( m + 1 , vector < int > ( n + 1 )); for ( int i = 0 ; i <= m ; ++ i ) dp [ i ][ 0 ] = i ; for ( int j = 0 ; j <= n ; ++ j ) dp [ 0 ][ j ] = j ; for ( int i = 1 ; i <= m ; ++ i ){ for ( int j = 1 ; j <= n ; ++ j ){ //\u5f53\u524d\u5b57\u7b26\u4e32\u76f8\u7b49 \u5219\u53cc\u6307\u9488\u90fd\u524d\u79fb if ( word1 [ i -1 ] == word2 [ j -1 ]) dp [ i ][ j ] = dp [ i -1 ][ j -1 ]; else dp [ i ][ j ] = min ( min ( dp [ i -1 ][ j ] + 1 , dp [ i ][ j -1 ] + 1 ), dp [ i -1 ][ j -1 ] + 1 ); } } return dp [ m ][ n ]; }","title":"72. \u7f16\u8f91\u8ddd\u79bb"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#403","text":"class Solution { public boolean canCross ( int [] stones ) { /* \u5173\u6ce8\u53d8\u91cf\uff1a\u5f53\u524dstone\u6570\u7ec4\u7684\u7d22\u5f15index\uff0c\u8df3\u7684\u6b65\u6570k 1.\u72b6\u6001\u5b9a\u4e49\uff1adp[idx][k] \u4ee3\u8868\u8df3\u4e86k\u6b65\u4e4b\u540e\u6765\u5230\u7d22\u5f15\u4e3aidx\u7684\u77f3\u5934\u4e0a 2.\u72b6\u6001\u8f6c\u79fb\uff1aidx\u53ef\u4ee5\u4ecej\u2208[1, idx-1]\u4f4d\u7f6e\u7684\u77f3\u5934\u4e0a\u8f6c\u79fb\u8fc7\u6765\uff0c\u9700\u8981\u904d\u5386\u3002\u7531\u4e8e\u662f\u8df3\u4e86k\u6b65(k = diff = stone[idx]-stone[j])\u6765\u5230idx\u4e0a\uff0c\u6240\u4ee5\u8df3\u5230\u524d\u4e00\u5757\u77f3\u5934j\u7684\u6b65\u6570\u5fc5\u987b\u662f k-1 || k || k+1 \u4ece\u800c\u8f6c\u79fb\u65b9\u7a0b\u4e3a dp[idx][diff] = dp[j][diff-1] || dp[j][diff] || dp[j][diff+1] 3.\u521d\u59cb\u5316\uff1adp[1][1]=true; 4.\u904d\u5386\u987a\u5e8f\uff1a\u5916\u5c42\u904d\u5386i\uff0ci\u2208[2, len-1]\uff0c\u4ee3\u8868stone\u7d22\u5f15idx\u3002 \u5185\u5c42\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0c\u4ee3\u8868\u4ece\u524d\u9762\u7684[1, i-1]\u77f3\u5934\u5f97\u5230\u7684\u72b6\u6001\u8f6c\u79fb 5.\u8fd4\u56de\u6761\u4ef6\uff1adp[n-1][k] k\u2208[1, n-1] (\u8df3\u5230stone[n-1]\u7684\u6b65\u6570\u53ef\u4ee5\u4e3a[1, n-1]) */ int len = stones . length ; if ( stones [ 1 ] != 1 ) return false ; //dp[n][k]\u4e3a\u8df3\u8dc3\u4e86k\u6b65\u6765\u5230\u4e86stone[n]\u7684\u4f4d\u7f6e //n\u5bf9\u5e94stone\u7684\u7d22\u5f15\uff0c\u4ed6\u7684\u72b6\u6001\u5e94\u8be5\u7531i\u2208[0,n-1]\u8f6c\u79fb\u800c\u6765 \u7531\u4e8e0\u30011\u7279\u6b8a\u6027\u53ef\u4ee5\u4ece[2, n-1]\u904d\u5386i //\u904d\u5386j\uff0cj\u2208[1, i-1]\uff0cdiff\u5bf9\u5e94\u8df3\u8dc3\u5230\u5f53\u524d\u4f4d\u7f6e\u7684\u6b65\u6570 //\u5219\u8f6c\u79fb\u60c5\u51b5\u7b49\u4ef7\u4e8edp[i][diff] = dp[j][diff] || dp[j][diff-1] || dp[j][diff+1] boolean [][] dp = new boolean [ len ][ len + 1 ] ; dp [ 1 ][ 1 ] = true ; //i\u4e3astones\u5bf9\u5e94\u7d22\u5f15\uff0c\u4e3a\u6574\u4f53\u5916\u90e8\u904d\u5386 for ( int i = 2 ; i < len ; i ++ ){ //\u72b6\u6001\u8f6c\u79fb\u90e8\u5206\uff0cj\u2208[1, i-1]\u4e3a\u4e4b\u524d\u7684\u72b6\u6001\u904d\u5386 for ( int j = 1 ; j < i ; j ++ ){ //\u8be5\u6b21\u6240\u8df3\u6b65\u6570 int diff = stones [ i ] - stones [ j ] ; if ( diff <= j + 1 ){ //j+1\u4e3a\u7406\u8bba\u6700\u5927\u6b65\u6570 //\u8be5\u6b21\u8df3diff\u6b65\uff0c\u90a3\u4e0a\u4e00\u6b21\u4e5f\u53ea\u80fd\u8df3diff-1 || diff || diff+1\u6b65\uff0c\u4ece\u800c\u5f97\u8f6c\u79fb\u65b9\u7a0b dp [ i ][ diff ] = dp [ j ][ diff - 1 ] || dp [ j ][ diff ] || dp [ j ][ diff + 1 ] ; } } } //len\u662f\u6b65\u6570k\u7684\u4e0a\u9650 for ( int k = 1 ; k < len ; k ++ ){ if ( dp [ len - 1 ][ k ] == true ) return true ; } return false ; } }","title":"403. \u9752\u86d9\u8fc7\u6cb3"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/","text":"\u9898\u96c6 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.DFS+\u56de\u6eaf+\u526a\u679d \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.DFS+\u6811 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 3.DFS+\u7f51\u683c\u578b \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.DFS+\u56fe \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \ud83e\udde1&&\ud83d\udc8c \u2160 \u770b\u89e3\u7b54 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \ud83e\udde1&&\ud83d\udc8c \u2160 \u770b\u89e3\u7b54 46. \u5168\u6392\u5217 \ud83e\udde1&&\ud83d\udca5 \u2160 78. \u5b50\u96c6 \ud83e\udde1&&\ud83d\udca5 \u2160 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 Medium \u2160 200. \u5c9b\u5c7f\u6570\u91cf \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 \u2162 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \ud83e\udde1 \u2162 \u56de\u6eaf \u00b6 \u56de\u6eaf\u95ee\u9898\u4e3b\u8981\u5206\u4e3a\u5b50\u96c6\u3001\u6392\u5217\u3001\u7ec4\u5408\u95ee\u9898 \u56de\u6eaf\u7b97\u6cd5\u5165\u95e8\u7ea7\u8be6\u89e3 + \u7ec3\u4e60\uff08\u6301\u7eed\u66f4\u65b0\uff09 - \u5168\u6392\u5217 - \u529b\u6263\uff08LeetCode\uff09 22. \u62ec\u53f7\u751f\u6210 \u00b6 \u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 //\u56de\u6eaf\u6a21\u677f //left right class Solution { List < String > res = new ArrayList <> (); StringBuilder tmp = new StringBuilder (); public List < String > generateParenthesis ( int n ) { int left = n , right = n ; backTracking ( left , right , tmp ); return res ; } public void backTracking ( int left , int right , StringBuilder tmp ){ //\u526a\u679d\uff0c\u4e0d\u6ee1\u8db3\u7684\u8bdd\u76f4\u63a5\u56de\u9000 if ( left < 0 || right < 0 || left > right ) return ; //\u6ee1\u8db3\u6761\u4ef6 if ( left == 0 && right == 0 ){ res . add ( tmp . toString ()); return ; } //\u4f18\u5148\u6dfb\u52a0\u5de6\u62ec\u53f7\uff0c\u5f80\u91cc\u9012\u5f52\uff0c\u4e4b\u540e\u64a4\u9500 tmp . append ( \"(\" ); backTracking ( left - 1 , right , tmp ); tmp . deleteCharAt ( tmp . length () - 1 ); //\u6dfb\u52a0\u53f3\u62ec\u53f7\uff0c\u9012\u5f52\uff0c\u4e4b\u540e\u64a4\u9500 tmp . append ( \")\" ); backTracking ( left , right - 1 , tmp ); tmp . deleteCharAt ( tmp . length () - 1 ); } } \u5b50\u96c6 \u00b6 \u5b50\u96c6\u662f\u56de\u6eaf + \u65e0\u9700\u526a\u679d 78. \u5b50\u96c6 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c \u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002 class Solution { List < List < Integer > > res = new ArrayList <> (); List < Integer > tmp = new ArrayList <> (); public List < List < Integer >> subsets ( int [] nums ) { backTracking ( nums , 0 , nums . length - 1 ); return res ; } private void backTracking ( int [] nums , int begin , int end ){ if ( begin > end ){ //\u6ce8\u610fjava\u4e2d\u4e8c\u7ef4\u6570\u7ec4\u7684\u52a0\u5165\uff0c\u4e0d\u80fd\u76f4\u63a5add(tmp) \u9700\u8981new ArrayList\u518d\u4ee5tmp\u521d\u59cb\u5316 res . add ( new ArrayList <> ( tmp )); return ; } tmp . add ( nums [ begin ] ); //begin+1\u4ee3\u8868\u4e00\u79cd\u5c42\u5c42\u9012\u8fdb\u5173\u7cfb\uff0c\u64a4\u9500\u64cd\u4f5c\u4ee3\u8868\u9009\u62e9\uff0c\u5c31\u662f\u5178\u578b\u7684\u6392\u5217\u9009\u62e9\u95ee\u9898 backTracking ( nums , begin + 1 , end ); //\u6ce8\u610fjava\u4e2dArrayList\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u65b9\u6cd5 tmp . remove ( tmp . size () - 1 ); backTracking ( nums , begin + 1 , end ); } } 90. \u5b50\u96c6 II \u00b6 \u7ec4\u5408 \u00b6 \u7ec4\u5408\u662f\u56de\u6eaf + \u9700\u8981\u526a\u679d 77. \u7ec4\u5408 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k \uff0c\u8fd4\u56de\u8303\u56f4 [1, n] \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002 \u4f60\u53ef\u4ee5\u6309 \u4efb\u4f55\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002 class Solution { List < List < Integer > > res = new ArrayList <> (); List < Integer > tmp = new ArrayList <> (); public List < List < Integer >> combine ( int n , int k ) { backTracking ( n , k , 0 ); return res ; } private void backTracking ( int n , int k , int begin ){ //\u9012\u5f52\u7ec8\u7ed3\u6761\u4ef6 if ( tmp . size () == k ){ res . add ( new ArrayList <> ( tmp )); return ; } //for\u5faa\u73af\u8868\u793a\u9012\u5f52\u6811\u4e2d\u7684\u6a2a\u5411\u904d\u5386 //\u56de\u6eaf\u4ee3\u8868\u9012\u5f52\u6811\u4e2d\u7684\u7eb5\u5411\u904d\u5386 for ( int i = begin ; i < n ; i ++ ){ tmp . add ( i + 1 ); backTracking ( n , k , i + 1 ); tmp . remove ( tmp . size () - 1 ); } } } \u6392\u5217 \u00b6 \u6392\u5217\u662f\u6240\u6709\u6570\u5b57\u90fd\u53c2\u4e0e\u4f46**\u4f4d\u5e8f\u4e0d\u540c**\uff0c\u6240\u4ee5\u4e0d\u7528\u6700\u5916\u5c42\u5faa\u73af\u4ece0\u5f00\u59cb\uff0c\u91cc\u5c42\u7528set\u6216used\u6570\u7ec4\u53bb\u91cd \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u00b6 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002 \u4f60\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4f46\u91cc\u9762\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165\uff1as = \"abc\" \u8f93\u51fa\uff1a[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"] vector < string > permutation ( string s ) { vector < string > ans ; dfs ( s , ans , 0 ); return ans ; } void dfs ( string s , vector < string >& ans , int depth ){ if ( depth >= s . size () -1 ) { ans . push_back ( s ); return ; } unordered_set < char > used ; for ( int i = depth ; i < s . size (); ++ i ){ if ( used . find ( s [ i ]) != used . end ()) continue ; used . insert ( s [ i ]); swap ( s [ depth ], s [ i ]); dfs ( s , ans , depth + 1 ); swap ( s [ i ], s [ depth ]); } } 46. \u5168\u6392\u5217 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 //\u6ce8\u91ca\u90e8\u5206\u662f\u770b\u9898\u89e3\u5199\u7684 //\u672a\u6ce8\u91ca\u90e8\u5206\u662f\u6309\u7167 \u5251\u6307offer38.\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u90a3\u9898\u6a21\u677f\u5199\u7684.. //\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a vector < vector < int >> permute ( vector < int >& nums ) { vector < vector < int > > ans ; // vector<int> res; // vector<int> used(nums.size(), 0); // helper(ans, nums, res, used); helper ( ans , nums , 0 ); return ans ; } // void helper(vector<vector<int> >& ans,vector<int>& nums, vector<int>& res, vector<int>& used){ // if(res.size()==nums.size()){ // ans.push_back(res); // return; // } // for(int i=0;i<nums.size();++i){ // if(used[i]!=0) continue; // else{ // res.push_back(nums[i]); // used[i] = 1; // helper(ans, nums, res, used); // res.pop_back(); // used[i]=0; // } // } // } void helper ( vector < vector < int > >& ans , vector < int >& nums , int depth ){ if ( depth == nums . size () -1 ){ ans . push_back ( nums ); return ; } unordered_set < int > used ; for ( int i = depth ; i < nums . size (); ++ i ){ if ( used . find ( nums [ i ]) != used . end ()) continue ; used . insert ( nums [ i ]); swap ( nums [ depth ], nums [ i ]); helper ( ans , nums , depth + 1 ); swap ( nums [ depth ], nums [ i ]); } } 47. \u5168\u6392\u5217 II \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 nums \uff0c \u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002 \u6811DFS \u00b6 \u7f51\u683cDFS \u00b6 \u6846\u67b6 \u00b6 \u7f51\u683c DFS \u904d\u5386\u7684\u57fa\u672c\u6846\u67b6 \u53c2\u8003 void dfs ( vector < vector < int > >& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 dfs ( grid , r + 1 , c ); dfs ( grid , r -1 , c ); dfs ( grid , r , c -1 ); dfs ( grid , r , c + 1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int > >& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size ; } 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \u00b6 int maxAreaOfIsland ( vector < vector < int >>& grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . size (); ++ i ){ for ( int j = 0 ; j < grid [ 0 ]. size (); ++ j ){ if ( grid [ i ][ j ] == 1 ){ int r = dfs ( grid , i , j ); ans = max ( ans , r ); } } } return ans ; } int dfs ( vector < vector < int >>& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return 0 ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return 0 ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 return 1 + dfs ( grid , r + 1 , c ) + dfs ( grid , r -1 , c ) + dfs ( grid , r , c + 1 ) + dfs ( grid , r , c -1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int >>& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size (); } \u56feDFS \u00b6","title":"\u56de\u6eaf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_1","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.DFS+\u56de\u6eaf+\u526a\u679d \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.DFS+\u6811 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 3.DFS+\u7f51\u683c\u578b \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.DFS+\u56fe \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \ud83e\udde1&&\ud83d\udc8c \u2160 \u770b\u89e3\u7b54 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \ud83e\udde1&&\ud83d\udc8c \u2160 \u770b\u89e3\u7b54 46. \u5168\u6392\u5217 \ud83e\udde1&&\ud83d\udca5 \u2160 78. \u5b50\u96c6 \ud83e\udde1&&\ud83d\udca5 \u2160 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 Medium \u2160 200. \u5c9b\u5c7f\u6570\u91cf \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 \u2162 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \ud83e\udde1 \u2162","title":"\u9898\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_2","text":"\u56de\u6eaf\u95ee\u9898\u4e3b\u8981\u5206\u4e3a\u5b50\u96c6\u3001\u6392\u5217\u3001\u7ec4\u5408\u95ee\u9898 \u56de\u6eaf\u7b97\u6cd5\u5165\u95e8\u7ea7\u8be6\u89e3 + \u7ec3\u4e60\uff08\u6301\u7eed\u66f4\u65b0\uff09 - \u5168\u6392\u5217 - \u529b\u6263\uff08LeetCode\uff09","title":"\u56de\u6eaf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#22","text":"\u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 //\u56de\u6eaf\u6a21\u677f //left right class Solution { List < String > res = new ArrayList <> (); StringBuilder tmp = new StringBuilder (); public List < String > generateParenthesis ( int n ) { int left = n , right = n ; backTracking ( left , right , tmp ); return res ; } public void backTracking ( int left , int right , StringBuilder tmp ){ //\u526a\u679d\uff0c\u4e0d\u6ee1\u8db3\u7684\u8bdd\u76f4\u63a5\u56de\u9000 if ( left < 0 || right < 0 || left > right ) return ; //\u6ee1\u8db3\u6761\u4ef6 if ( left == 0 && right == 0 ){ res . add ( tmp . toString ()); return ; } //\u4f18\u5148\u6dfb\u52a0\u5de6\u62ec\u53f7\uff0c\u5f80\u91cc\u9012\u5f52\uff0c\u4e4b\u540e\u64a4\u9500 tmp . append ( \"(\" ); backTracking ( left - 1 , right , tmp ); tmp . deleteCharAt ( tmp . length () - 1 ); //\u6dfb\u52a0\u53f3\u62ec\u53f7\uff0c\u9012\u5f52\uff0c\u4e4b\u540e\u64a4\u9500 tmp . append ( \")\" ); backTracking ( left , right - 1 , tmp ); tmp . deleteCharAt ( tmp . length () - 1 ); } }","title":"22. \u62ec\u53f7\u751f\u6210"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_3","text":"\u5b50\u96c6\u662f\u56de\u6eaf + \u65e0\u9700\u526a\u679d","title":"\u5b50\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#78","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c \u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002 \u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002 class Solution { List < List < Integer > > res = new ArrayList <> (); List < Integer > tmp = new ArrayList <> (); public List < List < Integer >> subsets ( int [] nums ) { backTracking ( nums , 0 , nums . length - 1 ); return res ; } private void backTracking ( int [] nums , int begin , int end ){ if ( begin > end ){ //\u6ce8\u610fjava\u4e2d\u4e8c\u7ef4\u6570\u7ec4\u7684\u52a0\u5165\uff0c\u4e0d\u80fd\u76f4\u63a5add(tmp) \u9700\u8981new ArrayList\u518d\u4ee5tmp\u521d\u59cb\u5316 res . add ( new ArrayList <> ( tmp )); return ; } tmp . add ( nums [ begin ] ); //begin+1\u4ee3\u8868\u4e00\u79cd\u5c42\u5c42\u9012\u8fdb\u5173\u7cfb\uff0c\u64a4\u9500\u64cd\u4f5c\u4ee3\u8868\u9009\u62e9\uff0c\u5c31\u662f\u5178\u578b\u7684\u6392\u5217\u9009\u62e9\u95ee\u9898 backTracking ( nums , begin + 1 , end ); //\u6ce8\u610fjava\u4e2dArrayList\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u65b9\u6cd5 tmp . remove ( tmp . size () - 1 ); backTracking ( nums , begin + 1 , end ); } }","title":"78. \u5b50\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#90-ii","text":"","title":"90. \u5b50\u96c6 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_4","text":"\u7ec4\u5408\u662f\u56de\u6eaf + \u9700\u8981\u526a\u679d","title":"\u7ec4\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#77","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k \uff0c\u8fd4\u56de\u8303\u56f4 [1, n] \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002 \u4f60\u53ef\u4ee5\u6309 \u4efb\u4f55\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002 class Solution { List < List < Integer > > res = new ArrayList <> (); List < Integer > tmp = new ArrayList <> (); public List < List < Integer >> combine ( int n , int k ) { backTracking ( n , k , 0 ); return res ; } private void backTracking ( int n , int k , int begin ){ //\u9012\u5f52\u7ec8\u7ed3\u6761\u4ef6 if ( tmp . size () == k ){ res . add ( new ArrayList <> ( tmp )); return ; } //for\u5faa\u73af\u8868\u793a\u9012\u5f52\u6811\u4e2d\u7684\u6a2a\u5411\u904d\u5386 //\u56de\u6eaf\u4ee3\u8868\u9012\u5f52\u6811\u4e2d\u7684\u7eb5\u5411\u904d\u5386 for ( int i = begin ; i < n ; i ++ ){ tmp . add ( i + 1 ); backTracking ( n , k , i + 1 ); tmp . remove ( tmp . size () - 1 ); } } }","title":"77. \u7ec4\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_5","text":"\u6392\u5217\u662f\u6240\u6709\u6570\u5b57\u90fd\u53c2\u4e0e\u4f46**\u4f4d\u5e8f\u4e0d\u540c**\uff0c\u6240\u4ee5\u4e0d\u7528\u6700\u5916\u5c42\u5faa\u73af\u4ece0\u5f00\u59cb\uff0c\u91cc\u5c42\u7528set\u6216used\u6570\u7ec4\u53bb\u91cd","title":"\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#offer-38","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002 \u4f60\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4f46\u91cc\u9762\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b: \u8f93\u5165\uff1as = \"abc\" \u8f93\u51fa\uff1a[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"] vector < string > permutation ( string s ) { vector < string > ans ; dfs ( s , ans , 0 ); return ans ; } void dfs ( string s , vector < string >& ans , int depth ){ if ( depth >= s . size () -1 ) { ans . push_back ( s ); return ; } unordered_set < char > used ; for ( int i = depth ; i < s . size (); ++ i ){ if ( used . find ( s [ i ]) != used . end ()) continue ; used . insert ( s [ i ]); swap ( s [ depth ], s [ i ]); dfs ( s , ans , depth + 1 ); swap ( s [ i ], s [ depth ]); } }","title":"\u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#46","text":"\u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 //\u6ce8\u91ca\u90e8\u5206\u662f\u770b\u9898\u89e3\u5199\u7684 //\u672a\u6ce8\u91ca\u90e8\u5206\u662f\u6309\u7167 \u5251\u6307offer38.\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u90a3\u9898\u6a21\u677f\u5199\u7684.. //\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a vector < vector < int >> permute ( vector < int >& nums ) { vector < vector < int > > ans ; // vector<int> res; // vector<int> used(nums.size(), 0); // helper(ans, nums, res, used); helper ( ans , nums , 0 ); return ans ; } // void helper(vector<vector<int> >& ans,vector<int>& nums, vector<int>& res, vector<int>& used){ // if(res.size()==nums.size()){ // ans.push_back(res); // return; // } // for(int i=0;i<nums.size();++i){ // if(used[i]!=0) continue; // else{ // res.push_back(nums[i]); // used[i] = 1; // helper(ans, nums, res, used); // res.pop_back(); // used[i]=0; // } // } // } void helper ( vector < vector < int > >& ans , vector < int >& nums , int depth ){ if ( depth == nums . size () -1 ){ ans . push_back ( nums ); return ; } unordered_set < int > used ; for ( int i = depth ; i < nums . size (); ++ i ){ if ( used . find ( nums [ i ]) != used . end ()) continue ; used . insert ( nums [ i ]); swap ( nums [ depth ], nums [ i ]); helper ( ans , nums , depth + 1 ); swap ( nums [ depth ], nums [ i ]); } }","title":"46. \u5168\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#47-ii","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 nums \uff0c \u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002","title":"47. \u5168\u6392\u5217 II"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#dfs","text":"","title":"\u6811DFS"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#dfs_1","text":"","title":"\u7f51\u683cDFS"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#_6","text":"\u7f51\u683c DFS \u904d\u5386\u7684\u57fa\u672c\u6846\u67b6 \u53c2\u8003 void dfs ( vector < vector < int > >& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 dfs ( grid , r + 1 , c ); dfs ( grid , r -1 , c ); dfs ( grid , r , c -1 ); dfs ( grid , r , c + 1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int > >& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size ; }","title":"\u6846\u67b6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#695","text":"int maxAreaOfIsland ( vector < vector < int >>& grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . size (); ++ i ){ for ( int j = 0 ; j < grid [ 0 ]. size (); ++ j ){ if ( grid [ i ][ j ] == 1 ){ int r = dfs ( grid , i , j ); ans = max ( ans , r ); } } } return ans ; } int dfs ( vector < vector < int >>& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return 0 ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return 0 ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 return 1 + dfs ( grid , r + 1 , c ) + dfs ( grid , r -1 , c ) + dfs ( grid , r , c + 1 ) + dfs ( grid , r , c -1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int >>& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size (); }","title":"695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/#dfs_2","text":"","title":"\u56feDFS"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/","text":"\u4e8c\u5206 \u00b6 \u53cc\u6307\u9488 \u00b6 15. \u4e09\u6570\u4e4b\u548c 1. \u4e24\u6570\u4e4b\u548c 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 15. \u4e09\u6570\u4e4b\u548c \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 [nums[i], nums[j], nums[k]] \u6ee1\u8db3 i != j\u3001i != k \u4e14 j != k \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 nums[i] + nums[j] + nums[k] == 0 \u3002\u8bf7 \u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a 0 \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 Follow UP \u4e24\u6570\u4e4b\u548c\u5982\u679c\u6570\u7ec4\u4e2d\u542b\u6709\u91cd\u590d\u5143\u7d20\u5462\uff1fHashMap\u7684value\u5b58\u50a8\u5143\u7d20\u51fa\u73b0\u6b21\u6570\uff1a\u8981\u6c42\u8fd4\u56de\u7d22\u5f15\u7684\u8bddvalue\u6539\u6210\u5b58\u50a8\u6570\u7ec4\uff1f \u7136\u540e\u4e09\u6570\u4e4b\u548c\u53bb\u91cd\u5462\uff1f //\u5148\u6392\u5e8f\u7136\u540e\u53cc\u6307\u9488 //\u5173\u952e\u662f\u53bb\u91cd class Solution { public List < List < Integer >> threeSum ( int [] nums ) { Arrays . sort ( nums ); List < List < Integer > > res = new ArrayList <> (); //\u6700\u5916\u5c42\u5faa\u73af\uff0c\u56fa\u5b9a\u7684\u90a3\u4e2a\u6570 for ( int i = 0 ; i < nums . length -2 ; i ++ ){ //\u7b80\u5355\u4f18\u5316 if ( nums [ i ] > 0 ) break ; //\u7b2c\u4e00\u6b65\u53bb\u91cd (\u6ce8\u610f\u5199\u6cd5\u5f80\u524d\u770b ) if ( i > 0 && nums [ i ] == nums [ i -1 ]) continue ; //\u8bbe\u7f6e\u53cc\u6307\u9488 int left = i + 1 , right = nums . length -1 ; //\u53cc\u6307\u9488\u6a21\u677f while ( left < right ){ int sum = nums [ i ] + nums [ left ] + nums [ right ]; if ( sum < 0 ){ //(\u66f4\u65b0\u5de6\u6307\u9488) \u5de6\u6307\u9488\u65b9\u5411\u53bb\u91cd while ( left < right && nums [ left ] == nums [ ++ left ]); } else if ( sum > 0 ){ //(\u66f4\u65b0\u53f3\u6307\u9488) \u53f3\u6307\u9488\u65b9\u5411\u53bb\u91cd while ( left < right && nums [ right ] == nums [ -- right ]); } else { //\u52a0\u5165\u6570\u7ec4\uff0c\u66f4\u65b0\u5de6\u53f3\u6307\u9488\u5e76\u53bb\u91cd\u5904\u7406 res . add ( new ArrayList < Integer > ( Arrays . asList ( nums [ i ], nums [ left ], nums [ right ]) ) ); while ( left < right && nums [ left ] == nums [ ++ left ]); while ( left < right && nums [ right ] == nums [ -- right ]); } } } return res ; } } \u6ed1\u52a8\u7a97\u53e3 \u00b6 42. \u63a5\u96e8\u6c34\uff08\u56f0\u96be\uff09 84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 316. \u53bb\u9664\u91cd\u590d\u5b57\u6bcd\uff08\u56f0\u96be\uff09 402. \u79fb\u6389K\u4f4d\u6570\u5b57 503. \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II 581. \u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 739. \u6bcf\u65e5\u6e29\u5ea6\uff08\u4e2d\u7b49\uff09 84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 \u00b6 \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002 \u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002 //\u4f7f\u7528\u54e8\u5175\u6cd5\uff0c\u53ef\u4ee5\u666e\u9002\u5316\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01\u3002 //2\u54e8\u5175\u62161\u54e8\u5175\u6216\u4e0d\u7528\u54e8\u5175 //\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u4f7f\u5f97\u6808\u662f\u5355\u8c03\u9012\u589e\uff08\u975e\u4e25\u683c\uff09\u7684 //situation1\uff1a class Solution { public int largestRectangleArea ( int [] heights ) { int len = heights . length ; int [] newHeights = new int [ len + 2 ] ; //\u5de6\u54e8\u5175\u9632\u6b62\u51fa\u73b0\u6808\u4e3a\u7a7a\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019width\u5176\u5b9e\u5c31\u662fi newHeights [ 0 ] = 0 ; //\u53f3\u54e8\u5175\u786e\u4fdd\u6808\u4e2d\u5143\u7d20\u80fd\u5168\u90e8\u51fa\u6808 newHeights [ len + 1 ] = 0 ; for ( int i = 1 ; i <= len ; i ++ ){ newHeights [ i ] = heights [ i - 1 ] ; } //stack\u5b58\u7d22\u5f15\uff0c\u65b9\u4fbf\u8ba1\u7b97\u5bbd\u5ea6 Stack < Integer > st = new Stack <> (); st . push ( 0 ); int res = 0 ; for ( int i = 1 ; i < len + 2 ; ++ i ){ //\u5982\u679c\u5f53\u524d\u7684\u6570\u5c0f\u4e8e\u6808\u9876\uff08\u5faa\u73af\u6267\u884c\u76f4\u5230\u5927\u4e8e\uff09\uff0c\u5219\u8ba1\u7b97\u4ee5\u6808\u9876\u5904\u5143\u7d20\u4e3a\u9ad8\u5ea6\u7684\u957f\u65b9\u5f62\u9762\u79ef //\u56e0\u4e3a\u6808\u662f\u5355\u589e\u7684\uff0c\u6240\u4ee5\u957f\u65b9\u5f62\u7684\u5de6\u8fb9\u8d77\u59cb\u70b9\u5c31\u662f\u6808\u9876\u5904\u7d22\u5f15 //\u53f3\u8fb9\u5c31\u662f\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u7684\u7d22\u5f15 while ( newHeights [ i ]< newHeights [ st . peek () ] ){ int height = newHeights [ st . pop () ] ; //\u56e0\u4e3a\u5df2\u7ecfpop\u4e86\uff0c\u6240\u4ee5\u8981\u518d-1 int width = i - st . peek () - 1 ; res = Math . max ( res , height * width ); } st . push ( i ); } return res ; } } //\u4e0d\u52a0\u54e8\u5175\u7684\u65b9\u6cd5 class Solution { public int largestRectangleArea ( int [] heights ) { //\u4e0d\u52a0\u54e8\u5175 int len = heights . length ; int res = 0 ; Stack < Integer > st = new Stack <> (); for ( int i = 0 ; i <= len ; i ++ ){ //\u60c5\u5f621\u5c5e\u4e8e\u6808\u672a\u6e05\u7a7a\u5219\u989d\u5916\u52a0\u4e00\u4e2ai=len\u65f6\u5faa\u73af\u8ba1\u7b97 //\u60c5\u5f622\u5c5e\u4e8e\u6b63\u5e38\u60c5\u5f62\u51fa\u6808\u8ba1\u7b97\uff0c\u4e14\u56e0\u4e3a\u6ca1\u6709\u9996\u54e8\u5175\uff0c\u6545\u8981\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a while ( ( ! st . isEmpty () && i == len ) || ( ! st . isEmpty () && heights [ i ]< heights [ st . peek () ] ) ){ int hi = heights [ st . peek () ] ; st . pop (); //\u6839\u636e\u6808\u662f\u5426\u4e3a\u7a7a\u5224\u65ad\u5bbd\u5ea6 int width = st . isEmpty () ? i : i - st . peek () - 1 ; res = Math . max ( res , hi * width ); } st . push ( i ); } return res ; } } \u524d\u7f00\u548c \u00b6 \u5355\u8c03\u6808 \u00b6 \u5206\u6cbb \u00b6 \u8d2a\u5fc3 \u00b6 \u54c8\u5e0c \u00b6 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 287. \u5bfb\u627e\u91cd\u590d\u6570","title":"\u57fa\u7840\u6280\u5de7"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_1","text":"","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_2","text":"15. \u4e09\u6570\u4e4b\u548c 1. \u4e24\u6570\u4e4b\u548c 167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4","title":"\u53cc\u6307\u9488"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#15","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 [nums[i], nums[j], nums[k]] \u6ee1\u8db3 i != j\u3001i != k \u4e14 j != k \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 nums[i] + nums[j] + nums[k] == 0 \u3002\u8bf7 \u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a 0 \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 Follow UP \u4e24\u6570\u4e4b\u548c\u5982\u679c\u6570\u7ec4\u4e2d\u542b\u6709\u91cd\u590d\u5143\u7d20\u5462\uff1fHashMap\u7684value\u5b58\u50a8\u5143\u7d20\u51fa\u73b0\u6b21\u6570\uff1a\u8981\u6c42\u8fd4\u56de\u7d22\u5f15\u7684\u8bddvalue\u6539\u6210\u5b58\u50a8\u6570\u7ec4\uff1f \u7136\u540e\u4e09\u6570\u4e4b\u548c\u53bb\u91cd\u5462\uff1f //\u5148\u6392\u5e8f\u7136\u540e\u53cc\u6307\u9488 //\u5173\u952e\u662f\u53bb\u91cd class Solution { public List < List < Integer >> threeSum ( int [] nums ) { Arrays . sort ( nums ); List < List < Integer > > res = new ArrayList <> (); //\u6700\u5916\u5c42\u5faa\u73af\uff0c\u56fa\u5b9a\u7684\u90a3\u4e2a\u6570 for ( int i = 0 ; i < nums . length -2 ; i ++ ){ //\u7b80\u5355\u4f18\u5316 if ( nums [ i ] > 0 ) break ; //\u7b2c\u4e00\u6b65\u53bb\u91cd (\u6ce8\u610f\u5199\u6cd5\u5f80\u524d\u770b ) if ( i > 0 && nums [ i ] == nums [ i -1 ]) continue ; //\u8bbe\u7f6e\u53cc\u6307\u9488 int left = i + 1 , right = nums . length -1 ; //\u53cc\u6307\u9488\u6a21\u677f while ( left < right ){ int sum = nums [ i ] + nums [ left ] + nums [ right ]; if ( sum < 0 ){ //(\u66f4\u65b0\u5de6\u6307\u9488) \u5de6\u6307\u9488\u65b9\u5411\u53bb\u91cd while ( left < right && nums [ left ] == nums [ ++ left ]); } else if ( sum > 0 ){ //(\u66f4\u65b0\u53f3\u6307\u9488) \u53f3\u6307\u9488\u65b9\u5411\u53bb\u91cd while ( left < right && nums [ right ] == nums [ -- right ]); } else { //\u52a0\u5165\u6570\u7ec4\uff0c\u66f4\u65b0\u5de6\u53f3\u6307\u9488\u5e76\u53bb\u91cd\u5904\u7406 res . add ( new ArrayList < Integer > ( Arrays . asList ( nums [ i ], nums [ left ], nums [ right ]) ) ); while ( left < right && nums [ left ] == nums [ ++ left ]); while ( left < right && nums [ right ] == nums [ -- right ]); } } } return res ; } }","title":"15. \u4e09\u6570\u4e4b\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_3","text":"42. \u63a5\u96e8\u6c34\uff08\u56f0\u96be\uff09 84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 316. \u53bb\u9664\u91cd\u590d\u5b57\u6bcd\uff08\u56f0\u96be\uff09 402. \u79fb\u6389K\u4f4d\u6570\u5b57 503. \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II 581. \u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 739. \u6bcf\u65e5\u6e29\u5ea6\uff08\u4e2d\u7b49\uff09","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#84","text":"\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002 \u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002 //\u4f7f\u7528\u54e8\u5175\u6cd5\uff0c\u53ef\u4ee5\u666e\u9002\u5316\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01\u3002 //2\u54e8\u5175\u62161\u54e8\u5175\u6216\u4e0d\u7528\u54e8\u5175 //\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u4f7f\u5f97\u6808\u662f\u5355\u8c03\u9012\u589e\uff08\u975e\u4e25\u683c\uff09\u7684 //situation1\uff1a class Solution { public int largestRectangleArea ( int [] heights ) { int len = heights . length ; int [] newHeights = new int [ len + 2 ] ; //\u5de6\u54e8\u5175\u9632\u6b62\u51fa\u73b0\u6808\u4e3a\u7a7a\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019width\u5176\u5b9e\u5c31\u662fi newHeights [ 0 ] = 0 ; //\u53f3\u54e8\u5175\u786e\u4fdd\u6808\u4e2d\u5143\u7d20\u80fd\u5168\u90e8\u51fa\u6808 newHeights [ len + 1 ] = 0 ; for ( int i = 1 ; i <= len ; i ++ ){ newHeights [ i ] = heights [ i - 1 ] ; } //stack\u5b58\u7d22\u5f15\uff0c\u65b9\u4fbf\u8ba1\u7b97\u5bbd\u5ea6 Stack < Integer > st = new Stack <> (); st . push ( 0 ); int res = 0 ; for ( int i = 1 ; i < len + 2 ; ++ i ){ //\u5982\u679c\u5f53\u524d\u7684\u6570\u5c0f\u4e8e\u6808\u9876\uff08\u5faa\u73af\u6267\u884c\u76f4\u5230\u5927\u4e8e\uff09\uff0c\u5219\u8ba1\u7b97\u4ee5\u6808\u9876\u5904\u5143\u7d20\u4e3a\u9ad8\u5ea6\u7684\u957f\u65b9\u5f62\u9762\u79ef //\u56e0\u4e3a\u6808\u662f\u5355\u589e\u7684\uff0c\u6240\u4ee5\u957f\u65b9\u5f62\u7684\u5de6\u8fb9\u8d77\u59cb\u70b9\u5c31\u662f\u6808\u9876\u5904\u7d22\u5f15 //\u53f3\u8fb9\u5c31\u662f\u5f53\u524d\u904d\u5386\u5230\u7684\u6570\u7684\u7d22\u5f15 while ( newHeights [ i ]< newHeights [ st . peek () ] ){ int height = newHeights [ st . pop () ] ; //\u56e0\u4e3a\u5df2\u7ecfpop\u4e86\uff0c\u6240\u4ee5\u8981\u518d-1 int width = i - st . peek () - 1 ; res = Math . max ( res , height * width ); } st . push ( i ); } return res ; } } //\u4e0d\u52a0\u54e8\u5175\u7684\u65b9\u6cd5 class Solution { public int largestRectangleArea ( int [] heights ) { //\u4e0d\u52a0\u54e8\u5175 int len = heights . length ; int res = 0 ; Stack < Integer > st = new Stack <> (); for ( int i = 0 ; i <= len ; i ++ ){ //\u60c5\u5f621\u5c5e\u4e8e\u6808\u672a\u6e05\u7a7a\u5219\u989d\u5916\u52a0\u4e00\u4e2ai=len\u65f6\u5faa\u73af\u8ba1\u7b97 //\u60c5\u5f622\u5c5e\u4e8e\u6b63\u5e38\u60c5\u5f62\u51fa\u6808\u8ba1\u7b97\uff0c\u4e14\u56e0\u4e3a\u6ca1\u6709\u9996\u54e8\u5175\uff0c\u6545\u8981\u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a while ( ( ! st . isEmpty () && i == len ) || ( ! st . isEmpty () && heights [ i ]< heights [ st . peek () ] ) ){ int hi = heights [ st . peek () ] ; st . pop (); //\u6839\u636e\u6808\u662f\u5426\u4e3a\u7a7a\u5224\u65ad\u5bbd\u5ea6 int width = st . isEmpty () ? i : i - st . peek () - 1 ; res = Math . max ( res , hi * width ); } st . push ( i ); } return res ; } }","title":"84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_4","text":"","title":"\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_5","text":"","title":"\u5355\u8c03\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_6","text":"","title":"\u5206\u6cbb"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_7","text":"","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E6%8A%80%E5%B7%A7/#_8","text":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 287. \u5bfb\u627e\u91cd\u590d\u6570","title":"\u54c8\u5e0c"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%A7%E7%BA%B2/","text":"\u5bab\u6c34\u4e09\u53f6 Home \u00b7 SharingSource/LogicStack-LeetCode Wiki (github.com)","title":"\u5927\u7eb2\u6c47\u603b"},{"location":"%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/","text":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u5806\u6392\u3001\u5feb\u6392\uff08\u968f\u673a\u9009\u53d6\uff09\u3001\u5f52\u5e76\u3001\u8ba1\u6570\u6392\u5e8f 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u00b6 \u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 nums \u548c\u6574\u6570 k\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002 (15\u6761\u6d88\u606f) \u8ba1\u6570\u6392\u5e8f\uff08Counting Sort\uff09_ThinkWon\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u8ba1\u6570\u6392\u5e8f \u8ba1\u6570\u6392\u5e8f\u3001\u5806\u6392\u3001\u5feb\u6392 //\u8ba1\u6570\u6392\u5e8f class Solution { public int findKthLargest ( int [] nums , int k ) { //\u6570\u7ec4\u5927\u5c0f\u4e3a max-min+1 int [] slots = new int [ 20001 ] ; //\u6267\u884c\u8ba1\u6570\u7edf\u8ba1 for ( int num : nums ) { slots [ num + 10000 ]++ ; } //i\u624d\u662f\u539f\u6570\u7ec4\u503c\uff0cslots[i]\u4e3a\u5bf9\u4e8e\u7684\u8ba1\u6570\u4e2a\u6570 for ( int i = slots . length - 1 ; i >= 0 ; i -- ) { k -= slots [ i ] ; //\u6ce8\u610f\u662f<= \u5f53\u524d\u5143\u7d20i\u53ef\u80fd\u662f\u591a\u4e2a if ( k <= 0 ) { return i - 10000 ; } } return 0 ; } }","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#215-k","text":"\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 nums \u548c\u6574\u6570 k\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002 \u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002 (15\u6761\u6d88\u606f) \u8ba1\u6570\u6392\u5e8f\uff08Counting Sort\uff09_ThinkWon\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u8ba1\u6570\u6392\u5e8f \u8ba1\u6570\u6392\u5e8f\u3001\u5806\u6392\u3001\u5feb\u6392 //\u8ba1\u6570\u6392\u5e8f class Solution { public int findKthLargest ( int [] nums , int k ) { //\u6570\u7ec4\u5927\u5c0f\u4e3a max-min+1 int [] slots = new int [ 20001 ] ; //\u6267\u884c\u8ba1\u6570\u7edf\u8ba1 for ( int num : nums ) { slots [ num + 10000 ]++ ; } //i\u624d\u662f\u539f\u6570\u7ec4\u503c\uff0cslots[i]\u4e3a\u5bf9\u4e8e\u7684\u8ba1\u6570\u4e2a\u6570 for ( int i = slots . length - 1 ; i >= 0 ; i -- ) { k -= slots [ i ] ; //\u6ce8\u610f\u662f<= \u5f53\u524d\u5143\u7d20i\u53ef\u80fd\u662f\u591a\u4e2a if ( k <= 0 ) { return i - 10000 ; } } return 0 ; } }","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2/","text":"","title":"\u641c\u7d22"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/","text":"","title":"\u6808\u4e0e\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%91/","text":"","title":"\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E7%BB%8F%E9%AA%8C/","text":"","title":"\u7ecf\u9a8c"},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%BE%E8%AE%A1%E9%A2%98/","text":"146. LRU \u7f13\u5b58 146. LRU \u7f13\u5b58 \u00b6 Follow UP \u8bb2\u4e00\u904dLRU\u548cLinkedHashMap\u7684\u516b\u80a1\uff0c\u518d\u81ea\u5df1\u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u5c31\u597d\uff0c\u8003\u8651\u81ea\u5df1\u5199\u8f93\u5165\u8f93\u51fa hashmap+\u53cc\u5411\u94fe\u8868\uff0c\u94fe\u8868\u505a\u4e00\u4e2a\u865a\u62dfhead\u548c\u865a\u62dftail\uff0c\u964d\u4f4e\u4ee3\u7801\u5b9e\u73b0\u590d\u6742\u5ea6 \u5b57\u8282\u4e09\u9762 \u5b9e\u73b0\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u5e26\u8d85\u65f6\u65f6\u95f4\u7684lru\uff08\u52a0\u9501\uff09 //\u7b80\u7248 class LRUCache { int cap ; LinkedHashMap < Integer , Integer > cache = new LinkedHashMap <> (); public LRUCache ( int capacity ) { this . cap = capacity ; } public int get ( int key ) { if ( ! cache . containsKey ( key )) { return - 1 ; } // \u5c06 key \u53d8\u4e3a\u6700\u8fd1\u4f7f\u7528 makeRecently ( key ); return cache . get ( key ); } public void put ( int key , int val ) { if ( cache . containsKey ( key )) { // \u4fee\u6539 key \u7684\u503c cache . put ( key , val ); // \u5c06 key \u53d8\u4e3a\u6700\u8fd1\u4f7f\u7528 makeRecently ( key ); return ; } if ( cache . size () >= this . cap ) { // \u94fe\u8868\u5934\u90e8\u5c31\u662f\u6700\u4e45\u672a\u4f7f\u7528\u7684 key int oldestKey = cache . keySet (). iterator (). next (); cache . remove ( oldestKey ); } // \u5c06\u65b0\u7684 key \u6dfb\u52a0\u94fe\u8868\u5c3e\u90e8 cache . put ( key , val ); } private void makeRecently ( int key ) { int val = cache . get ( key ); // \u5220\u9664 key\uff0c\u91cd\u65b0\u63d2\u5165\u5230\u961f\u5c3e cache . remove ( key ); cache . put ( key , val ); } } //\u81ea\u5df1\u5b9e\u73b0Node\u4ee5\u53ca\u53cc\u5411\u94fe\u8868DoubleList //1.\u5b9e\u73b0\u6570\u636e\u7ed3\u6784Node class Node { int key , val ; Node next , pre ; Node ( int k , int v ){ this . key = k ; this . val = v ; } } //2.\u5b9e\u73b0\u81ea\u5b9a\u4e49\u53cc\u5411\u94fe\u8868DoubleList class DoubleList { //\u52a0\u4e0a\u865a\u62df\u5934\u8282\u70b9\u548c\u5c3e\u8282\u70b9\u964d\u4f4e\u590d\u6742\u5ea6 Node head , tail ; int size ; //\u5b9e\u73b0\u524d\u9762\u63d2\u5165\u8282\u70b9 void addFirst ( Node node ){ if ( head == null ){ head = tail = node ; } else { //\u5c06node\u63d2\u5165head\u524d\uff0c\u4e4b\u540e\u5c06head\u548cnode\u4e92\u6362 Node n = head ; n . pre = node ; node . next = n ; head = node ; } size ++ ; } //\u5220\u9664\u94fe\u8868\u4e2d\u7684x\u8282\u70b9\uff08\u8282\u70b9\u4e00\u5b9a\u5b58\u5728\uff09\uff0c\u5e76\u66f4\u65b0head\u3001tail\u3001size void remove ( Node node ){ if ( node == head && node == tail ){ head = null ; tail = null ; } else if ( node == tail ){ node . pre . next = null ; tail = node . pre ; } else if ( node == head ){ node . next . pre = null ; head = node . next ; } else { node . next . pre = node . pre ; node . pre . next = node . next ; } size -- ; } //\u5220\u9664\u94fe\u8868\u4e2d\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u8be5\u8282\u70b9 Node removeLast (){ Node node = tail ; remove ( tail ); return node ; } //\u8fd4\u56de\u94fe\u8868\u957f\u5ea6 int getSize (){ return size ; } } //\u5b9e\u73b0\u6ee1\u8db3LRU\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784 class LRUCache { //\u5185\u90e8\u6570\u636e\u58f0\u660e //\u5b58\u653e\u7684\u6570\u636e\u7ed3\u6784\u4e3a(key, Node(key, val))\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664 private HashMap < Integer , Node > map ; private DoubleList cache ; private int cap ; //\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570 public LRUCache ( int capacity ){ this . cap = capacity ; map = new HashMap <> (); cache = new DoubleList (); } //\u5b9e\u73b0\u67e5\u627e\u51fd\u6570 public int get ( int key ){ if ( ! map . containsKey ( key )){ return - 1 ; } int val = map . get ( key ). val ; put ( key , val ); return val ; } //\u5b9e\u73b0\u63d2\u5165\uff08\u66f4\u6539\uff09\u51fd\u6570 public void put ( int key , int value ){ Node x = new Node ( key , value ); if ( map . containsKey ( key )){ //\u5220\u9664\u65e7\u7ed3\u70b9\uff0c\u5e76\u66f4\u65b0\u4e3a\u9996\u7ed3\u70b9\uff0c\u540c\u65f6\u66f4\u65b0map\u4e2d\u7684\u6570\u636e cache . remove ( map . get ( key )); cache . addFirst ( x ); map . put ( key , x ); } else { //\u5426\u5219\u8003\u8651\u63d2\u5165\u65b0\u7ed3\u70b9 //\u5148\u5224\u65ad\u662f\u5426\u5bb9\u91cf\u5df2\u6ee1\u9700\u8981\u5220\u9664 if ( cache . getSize () == cap ){ //\u94fe\u8868\u4e2d\u8981\u5220\u9664\uff0cmap\u4e2d\u4e5f\u8981\u5220\u9664 Node last = cache . removeLast (); //Node\u7ed3\u6784\u4e2d\u7684key\u7b49\u4e8emap\u4e2d\u7684key\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5220\u9664\u6700\u4e45\u672a\u4f7f\u7528\u7684\u8282\u70b9 map . remove ( last . key ); } cache . addFirst ( x ); map . put ( key , x ); } } }","title":"\u8bbe\u8ba1\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E8%AE%BE%E8%AE%A1%E9%A2%98/#146-lru","text":"Follow UP \u8bb2\u4e00\u904dLRU\u548cLinkedHashMap\u7684\u516b\u80a1\uff0c\u518d\u81ea\u5df1\u4f7f\u7528\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u5c31\u597d\uff0c\u8003\u8651\u81ea\u5df1\u5199\u8f93\u5165\u8f93\u51fa hashmap+\u53cc\u5411\u94fe\u8868\uff0c\u94fe\u8868\u505a\u4e00\u4e2a\u865a\u62dfhead\u548c\u865a\u62dftail\uff0c\u964d\u4f4e\u4ee3\u7801\u5b9e\u73b0\u590d\u6742\u5ea6 \u5b57\u8282\u4e09\u9762 \u5b9e\u73b0\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u5e26\u8d85\u65f6\u65f6\u95f4\u7684lru\uff08\u52a0\u9501\uff09 //\u7b80\u7248 class LRUCache { int cap ; LinkedHashMap < Integer , Integer > cache = new LinkedHashMap <> (); public LRUCache ( int capacity ) { this . cap = capacity ; } public int get ( int key ) { if ( ! cache . containsKey ( key )) { return - 1 ; } // \u5c06 key \u53d8\u4e3a\u6700\u8fd1\u4f7f\u7528 makeRecently ( key ); return cache . get ( key ); } public void put ( int key , int val ) { if ( cache . containsKey ( key )) { // \u4fee\u6539 key \u7684\u503c cache . put ( key , val ); // \u5c06 key \u53d8\u4e3a\u6700\u8fd1\u4f7f\u7528 makeRecently ( key ); return ; } if ( cache . size () >= this . cap ) { // \u94fe\u8868\u5934\u90e8\u5c31\u662f\u6700\u4e45\u672a\u4f7f\u7528\u7684 key int oldestKey = cache . keySet (). iterator (). next (); cache . remove ( oldestKey ); } // \u5c06\u65b0\u7684 key \u6dfb\u52a0\u94fe\u8868\u5c3e\u90e8 cache . put ( key , val ); } private void makeRecently ( int key ) { int val = cache . get ( key ); // \u5220\u9664 key\uff0c\u91cd\u65b0\u63d2\u5165\u5230\u961f\u5c3e cache . remove ( key ); cache . put ( key , val ); } } //\u81ea\u5df1\u5b9e\u73b0Node\u4ee5\u53ca\u53cc\u5411\u94fe\u8868DoubleList //1.\u5b9e\u73b0\u6570\u636e\u7ed3\u6784Node class Node { int key , val ; Node next , pre ; Node ( int k , int v ){ this . key = k ; this . val = v ; } } //2.\u5b9e\u73b0\u81ea\u5b9a\u4e49\u53cc\u5411\u94fe\u8868DoubleList class DoubleList { //\u52a0\u4e0a\u865a\u62df\u5934\u8282\u70b9\u548c\u5c3e\u8282\u70b9\u964d\u4f4e\u590d\u6742\u5ea6 Node head , tail ; int size ; //\u5b9e\u73b0\u524d\u9762\u63d2\u5165\u8282\u70b9 void addFirst ( Node node ){ if ( head == null ){ head = tail = node ; } else { //\u5c06node\u63d2\u5165head\u524d\uff0c\u4e4b\u540e\u5c06head\u548cnode\u4e92\u6362 Node n = head ; n . pre = node ; node . next = n ; head = node ; } size ++ ; } //\u5220\u9664\u94fe\u8868\u4e2d\u7684x\u8282\u70b9\uff08\u8282\u70b9\u4e00\u5b9a\u5b58\u5728\uff09\uff0c\u5e76\u66f4\u65b0head\u3001tail\u3001size void remove ( Node node ){ if ( node == head && node == tail ){ head = null ; tail = null ; } else if ( node == tail ){ node . pre . next = null ; tail = node . pre ; } else if ( node == head ){ node . next . pre = null ; head = node . next ; } else { node . next . pre = node . pre ; node . pre . next = node . next ; } size -- ; } //\u5220\u9664\u94fe\u8868\u4e2d\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u8be5\u8282\u70b9 Node removeLast (){ Node node = tail ; remove ( tail ); return node ; } //\u8fd4\u56de\u94fe\u8868\u957f\u5ea6 int getSize (){ return size ; } } //\u5b9e\u73b0\u6ee1\u8db3LRU\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784 class LRUCache { //\u5185\u90e8\u6570\u636e\u58f0\u660e //\u5b58\u653e\u7684\u6570\u636e\u7ed3\u6784\u4e3a(key, Node(key, val))\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u3001\u5220\u9664 private HashMap < Integer , Node > map ; private DoubleList cache ; private int cap ; //\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570 public LRUCache ( int capacity ){ this . cap = capacity ; map = new HashMap <> (); cache = new DoubleList (); } //\u5b9e\u73b0\u67e5\u627e\u51fd\u6570 public int get ( int key ){ if ( ! map . containsKey ( key )){ return - 1 ; } int val = map . get ( key ). val ; put ( key , val ); return val ; } //\u5b9e\u73b0\u63d2\u5165\uff08\u66f4\u6539\uff09\u51fd\u6570 public void put ( int key , int value ){ Node x = new Node ( key , value ); if ( map . containsKey ( key )){ //\u5220\u9664\u65e7\u7ed3\u70b9\uff0c\u5e76\u66f4\u65b0\u4e3a\u9996\u7ed3\u70b9\uff0c\u540c\u65f6\u66f4\u65b0map\u4e2d\u7684\u6570\u636e cache . remove ( map . get ( key )); cache . addFirst ( x ); map . put ( key , x ); } else { //\u5426\u5219\u8003\u8651\u63d2\u5165\u65b0\u7ed3\u70b9 //\u5148\u5224\u65ad\u662f\u5426\u5bb9\u91cf\u5df2\u6ee1\u9700\u8981\u5220\u9664 if ( cache . getSize () == cap ){ //\u94fe\u8868\u4e2d\u8981\u5220\u9664\uff0cmap\u4e2d\u4e5f\u8981\u5220\u9664 Node last = cache . removeLast (); //Node\u7ed3\u6784\u4e2d\u7684key\u7b49\u4e8emap\u4e2d\u7684key\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5220\u9664\u6700\u4e45\u672a\u4f7f\u7528\u7684\u8282\u70b9 map . remove ( last . key ); } cache . addFirst ( x ); map . put ( key , x ); } } }","title":"146. LRU \u7f13\u5b58"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/","text":"","title":"\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%AB%98%E9%A2%91%E9%A2%98/","text":"","title":"\u9ad8\u9891\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/","text":"\u9898\u76ee\u6574\u5408 \u00b6 \u8881\u53a8\u7684\u7b97\u6cd5\u5c0f\u5c4b \u6570\u7ec4\uff1a \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 59 \u87ba\u65cb\u77e9\u9635 II leetcode 66 \u52a0\u4e00 \u5251\u6307offer3 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 leetcode 75 \u989c\u8272\u5206\u7c7b leetcode 54 \u87ba\u65cb\u77e9\u9635 leetcode 560 \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u94fe\u8868\uff1a \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 21 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 leetcode 203 \u79fb\u9664\u94fe\u8868\u5143\u7d20 leetcode 206 \u53cd\u8f6c\u94fe\u8868 leetcode 141 \u73af\u5f62\u94fe\u8868 leetcode 86 \u5206\u9694\u94fe\u8868 leetcode 61 \u65cb\u8f6c\u94fe\u8868 \u5251\u6307 Offer 22 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u5251\u6307 Offer 52\uff1a \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \u5b57\u7b26\u4e32 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 344 \u53cd\u8f6c\u5b57\u7b26\u4e32 \u5251\u6307 Offer 05 \u66ff\u6362\u7a7a\u683c leetcode 151 \u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd \u5251\u6307offer 58 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 leetcode 13 \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 leetcode 28 \u5b9e\u73b0 strStr() \u54c8\u5e0c\u8868 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 242 \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd leetcode 1207 \u72ec\u4e00\u65e0\u4e8c\u7684\u51fa\u73b0\u6b21\u6570 \u5251\u6307 Offer 56 - I \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \u5251\u6307 Offer 56 - II \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II leetcode 349 \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 202 \u5feb\u4e50\u6570 \u6808\u548c\u961f\u5217 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 20 \u6709\u6548\u7684\u62ec\u53f7 \u5251\u6307 Offer 09 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 leetcode 225 \u7528\u961f\u5217\u5b9e\u73b0\u6808 leetcode 1047 \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879 leetcode 1021 \u5220\u9664\u6700\u5916\u5c42\u7684\u62ec\u53f7 \u4e8c\u53c9\u6811 \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 144 \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 leetcode 94 \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 leetcode 145 \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 \u5251\u6307 Offer 27 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u5251\u6307 Offer 28 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u5251\u6307 Offer 55 - I \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 102 \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 404 \u5de6\u53f6\u5b50\u4e4b\u548c 129 \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c 106 \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u5251\u6307 Offer 07 \u91cd\u5efa\u4e8c\u53c9\u6811 700 \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 96 \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 235 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 669 \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811 \u56fe \u00b6 \u9898\u53f7 \u9898\u76ee 841 \u94a5\u5319\u548c\u623f\u95f4 133 \u514b\u9686\u56fe 1162 \u5730\u56fe\u5206\u6790 \u53cc\u6307\u9488\uff1a \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 27 \u79fb\u9664\u5143\u7d20 leetcode 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 leetcode 141 \u73af\u5f62\u94fe\u8868 II leetcode 328 \u5947\u5076\u94fe\u8868 leetcode 15 \u4e09\u6570\u4e4b\u548c leetcode 18 \u56db\u6570\u4e4b\u548c \u4e8c\u5206\u67e5\u627e \u00b6 \u9898\u53f7 \u9898\u76ee leetcode 35 \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e leetcode 34 \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a leetcode 33 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 leetcode 81 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II leetcode 153 \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c leetcode 74 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u5251\u6307 Offer 53 - II 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57 \u6ed1\u52a8\u7a97\u53e3 \u00b6 \u9898\u53f7 \u9898\u76ee \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 3 \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 53 \u6700\u5927\u5b50\u5e8f\u548c 424 \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26 \u8d2a\u5fc3 \u00b6 \u9898\u53f7 \u9898\u76ee 455 \u5206\u53d1\u997c\u5e72 376 \u6446\u52a8\u5e8f\u5217 53 \u6700\u5927\u5b50\u5e8f\u548c 860 \u67e0\u6aac\u6c34\u627e\u96f6 122 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 134 \u52a0\u6cb9\u7ad9 406 \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 452 \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 56 \u5408\u5e76\u533a\u95f4 738 \u5355\u8c03\u9012\u589e\u7684\u6570\u5b57 \u5206\u6cbb \u00b6 \u9898\u53f7 \u9898\u76ee 53 \u6700\u5927\u5b50\u5e8f\u548c 169 \u591a\u6570\u5143\u7d20 \u5251\u6307 Offer 40 \u6700\u5c0f\u7684k\u4e2a\u6570 215 \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 23 \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 4 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u5355\u8c03\u6808\u5355\u8c03\u961f\u5217 \u00b6 \u9898\u53f7 \u9898\u76ee 155 \u6700\u5c0f\u6808 739 \u6bcf\u65e5\u6e29\u5ea6 \u5251\u6307 Offer 59 - II \u961f\u5217\u7684\u6700\u5927\u503c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 42 \u63a5\u96e8\u6c34 496 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I 503 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II 1081 \u4e0d\u540c\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u5e8f\u5217 \u4f4d\u8fd0\u7b97 \u00b6 \u9898\u53f7 \u9898\u76ee 136 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 137 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II 260 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u5251\u6307 Offer 65 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u5251\u6307 Offer 15 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 78 \u5b50\u96c6 \u56de\u6eaf \u00b6 \u9898\u53f7 \u9898\u76ee 77 \u7ec4\u5408 39 \u7ec4\u5408\u603b\u548c 40 \u7ec4\u5408\u603b\u548c II 216 \u7ec4\u5408\u603b\u548c III 46 \u5168\u6392\u5217 47 \u5168\u6392\u5217 II \u9762\u8bd5\u9898 08.12 \u516b\u7687\u540e 51 N \u7687\u540e \u52a8\u6001\u89c4\u5212 \u00b6 \u9898\u53f7 \u9898\u76ee 509 \u6590\u6ce2\u90a3\u5951\u6570 70 \u722c\u697c\u68af 746 \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af 121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a 64 \u6700\u5c0f\u8def\u5f84\u548c 198 \u6253\u5bb6\u52ab\u820d 213 \u6253\u5bb6\u52ab\u820d II 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 120 \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u6301\u7eed\u66f4\u65b0\u4e2d....... Hot 100 \u00b6 \u975e\u5e38\u4e0d\u719f\u7684... \u00b6 309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f \u00b6 \u9762\u7ecf\u4e2d\u7684\u7b97\u6cd5\u9898 \u00b6 31. \u4e0b\u4e00\u4e2a\u6392\u5217 \u00b6 \u5b9e\u73b0\u83b7\u53d6 \u4e0b\u4e00\u4e2a\u6392\u5217 \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 void nextPermutation ( vector < int >& nums ) { int len = nums . size () -1 ; for ( int i = len ; i > 0 ; -- i ){ if ( nums [ i ] > nums [ i -1 ]){ for ( int k = len ; k >= i ; -- k ){ if ( nums [ k ] > nums [ i -1 ]){ swap ( nums [ k ], nums [ i -1 ]); break ; } } sort ( nums . begin () + i , nums . end ()); return ; } else continue ; } sort ( nums . begin (), nums . end ()); return ; } \u524d\u7f00\u548c \u00b6 \u53c2\u8003 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u00b6 \u7ecf\u5178\u6570\u7ec4\u95ee\u9898 \u00b6 448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 \u00b6 \u7c7b\u4f3c\u9898\uff1a 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 \u00b6 442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e \u00b6 \u80cc\u5305\u95ee\u9898 \u00b6 \u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 416. \u5206\u5272\u7b49\u548c\u5b50\u96c6 \u00b6 \u7ecf\u5178\u94fe\u8868\u95ee\u9898 \u00b6 148. \u6392\u5e8f\u94fe\u8868 \u00b6 \u7ecf\u5178\u6808\u95ee\u9898 \u00b6 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c \u00b6 224. \u57fa\u672c\u8ba1\u7b97\u5668 \u00b6 227. \u57fa\u672c\u8ba1\u7b97\u5668 II \u00b6 \u7ecf\u5178Hash\u8868 \u00b6 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u00b6 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u00b6 \u7ecf\u5178\u6811 \u00b6 687. \u6700\u957f\u540c\u503c\u8def\u5f84 \uff08\u8fd8\u6ca1\u505a\uff09 \u00b6 \u7ecf\u5178\u56de\u6eaf \u00b6 \u7ec4\u5408\u6392\u5217 \u00b6 131. \u5206\u5272\u56de\u6587\u4e32 \uff08\u4e0d\u662fhot100\uff09 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 vector < vector < string >> partition ( string s ) { vector < vector < string > > ans ; vector < string > path ; dfs ( s , ans , path , 0 ); return ans ; } void dfs ( string s , vector < vector < string > >& ans , vector < string >& path , int depth ){ if ( depth == s . size ()){ ans . push_back ( path ); return ; } for ( int i = depth ; i < s . size (); ++ i ){ if ( isPalindrome ( s , depth , i )){ path . push_back ( s . substr ( depth , i - depth + 1 )); } else continue ; dfs ( s , ans , path , i + 1 ); path . pop_back (); } } bool isPalindrome ( const string & s , int lo , int hi ){ for ( int i = lo , j = hi ; i < j ; ++ i , -- j ){ if ( s [ i ] != s [ j ]) return false ; } return true ; } 51. N \u7687\u540e \u00b6 \u7ecf\u5178\u5b57\u7b26\u4e32\u95ee\u9898 \u00b6 \u5fc5\u987b\u638c\u63e1\uff1a \u56de\u6587\u5b50\u4e32 \u00b6 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 \u00b6 \u7ecf\u5178\u6a21\u677f if ( s . size () < 2 ) return s ; int lo = 0 ; int len = 1 ; //\u8fd9\u4e2a\u53cc\u91cdfor\u5faa\u73af\u5c31\u80fd\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5339\u914d\u60c5\u51b5\u5b8c\u5168\u5199\u5230isPalindromic\u8fd9\u4e2a\u4e8c\u7ef4dp table\u4e2d vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); for ( int i = s . size (); i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])){ isPalindromic [ i ][ j ] = true ; if ( len < j - i + 1 ){ lo = i ; len = j - i + 1 ; } } } } return s . substr ( lo , len ); 131. \u5206\u5272\u56de\u6587\u4e32 \u00b6 647. \u56de\u6587\u5b50\u4e32 \u00b6 132. \u5206\u5272\u56de\u6587\u4e32 II \u00b6 //\u7528131\u7684\u65b9\u6cd5\u7684\u8bdd\u4f1a\u8d85\u65f6 int minCut ( string s ) { if ( s . size () == 0 ) return 0 ; vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); //---------\u8fd9\u91cc\u5fc5\u987b\u5012\u5e8f\u6765(\u5f88\u5de7\u5999) for ( int i = s . size () -1 ; i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])) isPalindromic [ i ][ j ] = true ; } } //\u540e\u9762\u5c31\u662f\u7b80\u5355\u52a8\u6001\u89c4\u5212\u4e86 vector < int > dp ( s . size (), 0 ); for ( int i = 0 ; i < s . size (); ++ i ) dp [ i ] = i ; for ( int i = 1 ; i < s . size (); ++ i ){ if ( isPalindromic [ 0 ][ i ]){ dp [ i ] = 0 ; continue ; } for ( int j = 0 ; j < i ; ++ j ){ if ( isPalindromic [ j + 1 ][ i ]) dp [ i ] = min ( dp [ i ], dp [ j ] + 1 ); } } return dp [ s . size () -1 ]; } \u5b57\u7b26\u4e32\u52a8\u6001\u89c4\u5212<\u9ad8\u9891\uff01\uff01\uff01\uff01> \u00b6 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 bool isMatch ( string s , string p ) { int len1 = s . size (); int len2 = p . size (); //dp[i][j]\u8868\u793as\u7b2ci\u4e2a \u548cp\u7b2cj\u4e2a \u5b57\u7b26(\u5305\u62eci,j)\u4e4b\u524d\u662f\u5426\u5339\u914d vector < vector < bool > > dp ( len1 + 1 , vector < bool > ( len2 + 1 , false )); dp [ 0 ][ 0 ] = true ; //\u8fd9\u91cc\u5f88\u91cd\u8981 //\u9488\u5bf9\u5339\u914ds\u4e3a\u7a7a\u65f6\u7684\u7279\u6b8a\u60c5\u51b5\u7684\u521d\u59cb\u5316 for ( int i = 0 ; i < p . size (); ++ i ){ //\u6ce8\u610f\u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5\u8fd9\u91cci-1\u80af\u5b9a\u5408\u6cd5 if ( p [ i ] == '*' ) dp [ 0 ][ i + 1 ] = dp [ 0 ][ i -1 ]; } for ( int i = 0 ; i < len1 ; ++ i ){ for ( int j = 0 ; j < len2 ; ++ j ){ //\u5982\u679c\u76f8\u7b49\u6216p[j]\u4e07\u80fd\u5339\u914d \u76f4\u63a5\u90fd\u540e\u9000\u4e00\u683c if ( s [ i ] == p [ j ] || p [ j ] == '.' ) dp [ i + 1 ][ j + 1 ] = dp [ i ][ j ]; //\u5982\u679c\u4e3a'*'\u5219\u4e24\u79cd\u60c5\u51b5 else if ( p [ j ] == '*' ){ //\u4e4b\u524d\u8bf4\u4e86 \u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5j>=1 \u540e\u9762j-1\u90fd\u5408\u6cd5 //\u5982\u679c\u524d\u4e00\u683c\u5339\u914d if ( p [ j -1 ] == s [ i ] || p [ j -1 ] == '.' ){ //dp[i+1][j-1]\u5bf9\u5e94\u5339\u914d\u96f6\u4e2a //dp[i+1][j]\u5bf9\u5e94\u5339\u914d\u4e00\u4e2a //dp[i][j+1]\u5bf9\u5e94\u5339\u914d\u591a\u4e2a dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ] || dp [ i + 1 ][ j ] || dp [ i ][ j + 1 ]; } //\u5bf9\u4e8ep \u524d\u4e00\u4e2a\u5b57\u7b26\u548cs\u5f53\u524d\u5b57\u7b26\u4e0d\u5339\u914d \u5219p\u56de\u9000\u4e24\u683c else dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ]; } //\u5982\u679cp[j]\u4e0d\u4e3a\u7279\u6b8a\u5b57\u7b26\u4e14\u4e0es[i]\u4e0d\u7b49 \u5219\u7ee7\u7eed else continue ; } } return dp [ len1 ][ len2 ]; } 132. \u5206\u5272\u56de\u6587\u4e32 II \u00b6 \u5b57\u7b26\u4e32\u4e0e\u6808 \u00b6 \u5b57\u7b26\u4e32\u95ee\u9898\u5e38\u5e38\u548c\u6808\u7ed3\u5408 394. \u5b57\u7b26\u4e32\u89e3\u7801 \u00b6 string decodeString ( string s ) { stack < int > num_st ; stack < string > s_st ; int multi = 0 ; string res ; for ( auto & c : s ){ if (( c - '0' ) >= 0 && ( c - '0' ) <= 9 ){ multi = multi * 10 + ( c - '0' ); } else if ( c == '[' ){ //\u6570\u5b57\u5165\u6808 \u5e76\u6e05\u96f6 num_st . push ( multi ); multi = 0 ; //\u5b57\u7b26\u5165\u6808\u5e76\u7f6e\u7a7a s_st . push ( res ); res = \"\" ; } //\u8981\u8fdb\u884c\u8ba1\u7b97\u5e76\u66f4\u65b0res\u4e86 else if ( c == ']' ){ multi = num_st . top (); //\u8fd9\u91cc\u5904\u7406\u5b57\u7b26\u4e32\u975e\u5e38\u5de7\u5999 //-----------------\u6838\u5fc3\u90e8\u5206----------- for ( int i = 0 ; i < multi ; ++ i ){ s_st . top () += res ; //\u8fd9\u4e2a\u5faa\u73af\u8ba1\u7b97 \u6570\u5b57*\u5b57\u7b26\u4e32 } res = s_st . top (); s_st . pop (); //\u66f4\u65b0\u6570\u5b57 num_st . pop (); multi = 0 ; } //\u4e3a\u5b57\u7b26\u5219\u5f80\u540e\u52a0 else res . push_back ( c ); } return res ; } \u5b57\u7b26\u4e32\u7ec4\u5408\u95ee\u9898\u53ca\u5207\u5206\u95ee\u9898\uff08\u56de\u6eaf\uff09 \u00b6 131. \u5206\u5272\u56de\u6587\u4e32 \u00b6 \u5b57\u7b26\u4e32\u5206\u7c7b\u8ba8\u8bba \u00b6 394. \u5b57\u7b26\u4e32\u89e3\u7801 \u00b6 \u7ecf\u5178\u6392\u5e8f\u95ee\u9898 \u00b6 406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 \u00b6 \u53c2\u8003 \u91cd\u5199\u6392\u5e8fcmp \u8eab\u9ad8\u964d\u5e8f \u4f4d\u7f6e\u5347\u5e8f \u6309\u7167\u8eab\u9ad8\u6392\u5e8f\u4e4b\u540e\uff0c\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\uff0c\u540e\u5e8f\u63d2\u5165\u8282\u70b9\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u5df2\u7ecf\u63d2\u5165\u7684\u8282\u70b9\uff0c\u6700\u7ec8\u6309\u7167k\u7684\u89c4\u5219\u5b8c\u6210\u4e86\u961f\u5217\u3002 \u6240\u4ee5\u5728\u6309\u7167\u8eab\u9ad8\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\uff1a **\u5c40\u90e8\u6700\u4f18\uff1a**\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\u3002\u63d2\u5165\u64cd\u4f5c\u8fc7\u540e\u7684people\u6ee1\u8db3\u961f\u5217\u5c5e\u6027 **\u5168\u5c40\u6700\u4f18\uff1a**\u6700\u540e\u90fd\u505a\u5b8c\u63d2\u5165\u64cd\u4f5c\uff0c\u6574\u4e2a\u961f\u5217\u6ee1\u8db3\u9898\u76ee\u961f\u5217\u5c5e\u6027 \u590d\u4e60\uff1a \u52a8\u6001\u6570\u7ec4vector\u592a\u6162 \u7528\u94fe\u8868\u66f4\u597d \u7ecf\u5178\u8d2a\u5fc3\u95ee\u9898 \u00b6 135. \u5206\u53d1\u7cd6\u679c \u00b6 \u7ecf\u5178\u52a8\u6001\u89c4\u5212 \u00b6 312. \u6233\u6c14\u7403 \u00b6 \u7ecf\u5178\u56fe\u95ee\u9898 \u00b6 \u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a.... 207. \u8bfe\u7a0b\u8868 \u00b6 399. \u9664\u6cd5\u6c42\u503c \u00b6 const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; } \u529b\u6263\u6bcf\u65e5\u4e00\u9898 \u00b6 1128. \u7b49\u4ef7\u591a\u7c73\u8bfa\u9aa8\u724c\u5bf9\u7684\u6570\u91cf \u00b6 \u89e3\u9898\u601d\u8def \u66b4\u529b\u7684\u8bdd\u4f1a\u8d85\u65f6 \u7528map\u7edf\u8ba1\u6bcf\u4e00\u5f20\u9aa8\u724c\u7684\u6570\u91cf\uff08\u7edf\u8ba1\u65f6\u5148\u5c06\u6240\u6709\u9aa8\u724c\u7ffb\u8f6c\u4e3anums[0]\u5c0f\uff0cnums[1]\u5927\uff0c\u4fbf\u4e8e\u5efa\u8868\uff09\u3002 \u9700\u8981\u6ce8\u610f\uff1a unordered_map \u4e0d\u652f\u6301 unordered_map , int> \u6216\u8005 unordered_map , int> \u56e0\u4e3astd::unordered_map\u5e95\u5c42\u662fhash\uff0c\u800cunordered_map\u6ca1\u6709\u4e13\u95e8\u7684hash\u63d0\u4f9b\u7ed9std::pair\u3002 \u53c2\u8003 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int cnt = 0 ; map < vector < int > , int > nums2Cnts ; for ( vector < int >& nums : dominoes ) { //\u7ffb\u8f6c\u9aa8\u724c if ( nums [ 0 ] > nums [ 1 ]) { swap ( nums [ 0 ], nums [ 1 ]); } ++ nums2Cnts [ nums ]; } for ( auto & c : nums2Cnts ) { if ( c . second > 1 ) { //\u6392\u5217\u7ec4\u5408C(n,2)\uff0c\u5176\u4e2dn\u4e3a\u7b49\u4ef7\u9aa8\u724c\u7684\u603b\u6570\u91cf\u3002 cnt += ( c . second * ( c . second - 1 )) / 2 ; } } return cnt ; } \u63d0\u4ea4 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int ans = 0 ; if ( dominoes . size () == 0 || dominoes [ 0 ]. size () == 0 ) return ans ; map < vector < int > , int > dir ; for ( auto & nums : dominoes ){ if ( nums [ 0 ] > nums [ 1 ]) swap ( nums [ 0 ], nums [ 1 ]); ++ dir [ nums ]; } for ( auto & c : dir ){ if ( c . second > 1 ) { ans += c . second * ( c . second -1 ) / 2 ; } } return ans ; } \u601d\u8003\uff1a \u590d\u4e60\u638c\u63e1\u4e00\u4e0bmap\u7684\u7528\u6cd5 \u4ee5\u53caauto\u5173\u952e\u5b57\u548cc++\u57fa\u7840 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 \u00b6 \u53c2\u8003 705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408 \u00b6 706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04 \u00b6 54. \u87ba\u65cb\u77e9\u9635 \u00b6 59. \u87ba\u65cb\u77e9\u9635 II \u00b6 115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 \u00b6 92. \u53cd\u8f6c\u94fe\u8868 II \u00b6 73. \u77e9\u9635\u7f6e\u96f6 \u00b6 341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u2b50 \u00b6 456. 132 \u6a21\u5f0f \u2b50 \u00b6 173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668 \u00b6 190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d \u00b6 74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u00b6 664. \u5947\u602a\u7684\u6253\u5370\u673a \u00b6 cv\u5927\u6cd5 \u91cd\u8981\u7684\u6bcf\u65e5\u4e00\u9898 \u00b6 421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c \u00b6 c\u57fa\u7840\uff0c\u90a3\u4e9b\u4ec0\u4e48\u7ed3\u6784\u4f53\u3001\u6307\u9488\u5565\u7684\u4e00\u584c\u7cca\u6d82\u3002 \u5b57\u5178\u6811\uff0c\u6709\u8003\u5bdf\uff0c\u7ecf\u5178\u3002","title":"\u529b\u6263HOT100"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_1","text":"\u8881\u53a8\u7684\u7b97\u6cd5\u5c0f\u5c4b","title":"\u9898\u76ee\u6574\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_2","text":"\u9898\u53f7 \u9898\u76ee leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 59 \u87ba\u65cb\u77e9\u9635 II leetcode 66 \u52a0\u4e00 \u5251\u6307offer3 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 leetcode 75 \u989c\u8272\u5206\u7c7b leetcode 54 \u87ba\u65cb\u77e9\u9635 leetcode 560 \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4","title":"\u6570\u7ec4\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_3","text":"\u9898\u53f7 \u9898\u76ee leetcode 21 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 leetcode 203 \u79fb\u9664\u94fe\u8868\u5143\u7d20 leetcode 206 \u53cd\u8f6c\u94fe\u8868 leetcode 141 \u73af\u5f62\u94fe\u8868 leetcode 86 \u5206\u9694\u94fe\u8868 leetcode 61 \u65cb\u8f6c\u94fe\u8868 \u5251\u6307 Offer 22 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u5251\u6307 Offer 52\uff1a \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9","title":"\u94fe\u8868\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_4","text":"\u9898\u53f7 \u9898\u76ee leetcode 344 \u53cd\u8f6c\u5b57\u7b26\u4e32 \u5251\u6307 Offer 05 \u66ff\u6362\u7a7a\u683c leetcode 151 \u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd \u5251\u6307offer 58 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 leetcode 13 \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 leetcode 28 \u5b9e\u73b0 strStr()","title":"\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_5","text":"\u9898\u53f7 \u9898\u76ee leetcode 242 \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd leetcode 1207 \u72ec\u4e00\u65e0\u4e8c\u7684\u51fa\u73b0\u6b21\u6570 \u5251\u6307 Offer 56 - I \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 \u5251\u6307 Offer 56 - II \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II leetcode 349 \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 leetcode 1 \u4e24\u6570\u4e4b\u548c leetcode 202 \u5feb\u4e50\u6570","title":"\u54c8\u5e0c\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_6","text":"\u9898\u53f7 \u9898\u76ee leetcode 20 \u6709\u6548\u7684\u62ec\u53f7 \u5251\u6307 Offer 09 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 leetcode 225 \u7528\u961f\u5217\u5b9e\u73b0\u6808 leetcode 1047 \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879 leetcode 1021 \u5220\u9664\u6700\u5916\u5c42\u7684\u62ec\u53f7","title":"\u6808\u548c\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_7","text":"\u9898\u53f7 \u9898\u76ee leetcode 144 \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 leetcode 94 \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 leetcode 145 \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 \u5251\u6307 Offer 27 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u5251\u6307 Offer 28 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u5251\u6307 Offer 55 - I \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 102 \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 404 \u5de6\u53f6\u5b50\u4e4b\u548c 129 \u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c 106 \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 \u5251\u6307 Offer 07 \u91cd\u5efa\u4e8c\u53c9\u6811 700 \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 98 \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 96 \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 235 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 669 \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","title":"\u4e8c\u53c9\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_8","text":"\u9898\u53f7 \u9898\u76ee 841 \u94a5\u5319\u548c\u623f\u95f4 133 \u514b\u9686\u56fe 1162 \u5730\u56fe\u5206\u6790","title":"\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_9","text":"\u9898\u53f7 \u9898\u76ee leetcode 27 \u79fb\u9664\u5143\u7d20 leetcode 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 leetcode 141 \u73af\u5f62\u94fe\u8868 II leetcode 328 \u5947\u5076\u94fe\u8868 leetcode 15 \u4e09\u6570\u4e4b\u548c leetcode 18 \u56db\u6570\u4e4b\u548c","title":"\u53cc\u6307\u9488\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_10","text":"\u9898\u53f7 \u9898\u76ee leetcode 35 \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e leetcode 34 \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a leetcode 33 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 leetcode 81 \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II leetcode 153 \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c leetcode 74 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 \u5251\u6307 Offer 53 - II 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_11","text":"\u9898\u53f7 \u9898\u76ee \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 3 \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 53 \u6700\u5927\u5b50\u5e8f\u548c 424 \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_12","text":"\u9898\u53f7 \u9898\u76ee 455 \u5206\u53d1\u997c\u5e72 376 \u6446\u52a8\u5e8f\u5217 53 \u6700\u5927\u5b50\u5e8f\u548c 860 \u67e0\u6aac\u6c34\u627e\u96f6 122 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 134 \u52a0\u6cb9\u7ad9 406 \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 452 \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 56 \u5408\u5e76\u533a\u95f4 738 \u5355\u8c03\u9012\u589e\u7684\u6570\u5b57","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_13","text":"\u9898\u53f7 \u9898\u76ee 53 \u6700\u5927\u5b50\u5e8f\u548c 169 \u591a\u6570\u5143\u7d20 \u5251\u6307 Offer 40 \u6700\u5c0f\u7684k\u4e2a\u6570 215 \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 23 \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 4 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","title":"\u5206\u6cbb"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_14","text":"\u9898\u53f7 \u9898\u76ee 155 \u6700\u5c0f\u6808 739 \u6bcf\u65e5\u6e29\u5ea6 \u5251\u6307 Offer 59 - II \u961f\u5217\u7684\u6700\u5927\u503c \u5251\u6307 Offer 59 - I \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c 42 \u63a5\u96e8\u6c34 496 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I 503 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II 1081 \u4e0d\u540c\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u5e8f\u5217","title":"\u5355\u8c03\u6808\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_15","text":"\u9898\u53f7 \u9898\u76ee 136 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 137 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II 260 \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III \u5251\u6307 Offer 65 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u5251\u6307 Offer 15 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 78 \u5b50\u96c6","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_16","text":"\u9898\u53f7 \u9898\u76ee 77 \u7ec4\u5408 39 \u7ec4\u5408\u603b\u548c 40 \u7ec4\u5408\u603b\u548c II 216 \u7ec4\u5408\u603b\u548c III 46 \u5168\u6392\u5217 47 \u5168\u6392\u5217 II \u9762\u8bd5\u9898 08.12 \u516b\u7687\u540e 51 N \u7687\u540e","title":"\u56de\u6eaf"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_17","text":"\u9898\u53f7 \u9898\u76ee 509 \u6590\u6ce2\u90a3\u5951\u6570 70 \u722c\u697c\u68af 746 \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af 121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a 64 \u6700\u5c0f\u8def\u5f84\u548c 198 \u6253\u5bb6\u52ab\u820d 213 \u6253\u5bb6\u52ab\u820d II 5 \u6700\u957f\u56de\u6587\u5b50\u4e32 120 \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u6301\u7eed\u66f4\u65b0\u4e2d.......","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#hot-100","text":"","title":"Hot 100"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_18","text":"","title":"\u975e\u5e38\u4e0d\u719f\u7684..."},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#309","text":"","title":"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_19","text":"","title":"\u9762\u7ecf\u4e2d\u7684\u7b97\u6cd5\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#31","text":"\u5b9e\u73b0\u83b7\u53d6 \u4e0b\u4e00\u4e2a\u6392\u5217 \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 void nextPermutation ( vector < int >& nums ) { int len = nums . size () -1 ; for ( int i = len ; i > 0 ; -- i ){ if ( nums [ i ] > nums [ i -1 ]){ for ( int k = len ; k >= i ; -- k ){ if ( nums [ k ] > nums [ i -1 ]){ swap ( nums [ k ], nums [ i -1 ]); break ; } } sort ( nums . begin () + i , nums . end ()); return ; } else continue ; } sort ( nums . begin (), nums . end ()); return ; }","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_20","text":"\u53c2\u8003","title":"\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#560-k","text":"","title":"560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_21","text":"","title":"\u7ecf\u5178\u6570\u7ec4\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#448","text":"\u7c7b\u4f3c\u9898\uff1a","title":"448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#41","text":"","title":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#442","text":"","title":"442. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_22","text":"\u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c","title":"\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#416","text":"","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_23","text":"","title":"\u7ecf\u5178\u94fe\u8868\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#148","text":"","title":"148. \u6392\u5e8f\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_24","text":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762","title":"\u7ecf\u5178\u6808\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#150","text":"","title":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#224","text":"","title":"224. \u57fa\u672c\u8ba1\u7b97\u5668"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#227-ii","text":"","title":"227. \u57fa\u672c\u8ba1\u7b97\u5668 II"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#hash","text":"","title":"\u7ecf\u5178Hash\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#3","text":"","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#438","text":"","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_25","text":"","title":"\u7ecf\u5178\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#687","text":"","title":"687. \u6700\u957f\u540c\u503c\u8def\u5f84 \uff08\u8fd8\u6ca1\u505a\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_26","text":"","title":"\u7ecf\u5178\u56de\u6eaf"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_27","text":"","title":"\u7ec4\u5408\u6392\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#131-hot100","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002 \u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002 vector < vector < string >> partition ( string s ) { vector < vector < string > > ans ; vector < string > path ; dfs ( s , ans , path , 0 ); return ans ; } void dfs ( string s , vector < vector < string > >& ans , vector < string >& path , int depth ){ if ( depth == s . size ()){ ans . push_back ( path ); return ; } for ( int i = depth ; i < s . size (); ++ i ){ if ( isPalindrome ( s , depth , i )){ path . push_back ( s . substr ( depth , i - depth + 1 )); } else continue ; dfs ( s , ans , path , i + 1 ); path . pop_back (); } } bool isPalindrome ( const string & s , int lo , int hi ){ for ( int i = lo , j = hi ; i < j ; ++ i , -- j ){ if ( s [ i ] != s [ j ]) return false ; } return true ; }","title":"131. \u5206\u5272\u56de\u6587\u4e32 \uff08\u4e0d\u662fhot100\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#51-n","text":"","title":"51. N \u7687\u540e"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_28","text":"\u5fc5\u987b\u638c\u63e1\uff1a","title":"\u7ecf\u5178\u5b57\u7b26\u4e32\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_29","text":"","title":"\u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#5","text":"\u7ecf\u5178\u6a21\u677f if ( s . size () < 2 ) return s ; int lo = 0 ; int len = 1 ; //\u8fd9\u4e2a\u53cc\u91cdfor\u5faa\u73af\u5c31\u80fd\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u5339\u914d\u60c5\u51b5\u5b8c\u5168\u5199\u5230isPalindromic\u8fd9\u4e2a\u4e8c\u7ef4dp table\u4e2d vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); for ( int i = s . size (); i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])){ isPalindromic [ i ][ j ] = true ; if ( len < j - i + 1 ){ lo = i ; len = j - i + 1 ; } } } } return s . substr ( lo , len );","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#131","text":"","title":"131. \u5206\u5272\u56de\u6587\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#647","text":"","title":"647. \u56de\u6587\u5b50\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#132-ii","text":"//\u7528131\u7684\u65b9\u6cd5\u7684\u8bdd\u4f1a\u8d85\u65f6 int minCut ( string s ) { if ( s . size () == 0 ) return 0 ; vector < vector < bool > > isPalindromic ( s . size (), vector < bool > ( s . size (), false )); //---------\u8fd9\u91cc\u5fc5\u987b\u5012\u5e8f\u6765(\u5f88\u5de7\u5999) for ( int i = s . size () -1 ; i >= 0 ; -- i ){ for ( int j = i ; j < s . size (); ++ j ){ if ( s [ i ] == s [ j ] && ( j - i <= 1 || isPalindromic [ i + 1 ][ j -1 ])) isPalindromic [ i ][ j ] = true ; } } //\u540e\u9762\u5c31\u662f\u7b80\u5355\u52a8\u6001\u89c4\u5212\u4e86 vector < int > dp ( s . size (), 0 ); for ( int i = 0 ; i < s . size (); ++ i ) dp [ i ] = i ; for ( int i = 1 ; i < s . size (); ++ i ){ if ( isPalindromic [ 0 ][ i ]){ dp [ i ] = 0 ; continue ; } for ( int j = 0 ; j < i ; ++ j ){ if ( isPalindromic [ j + 1 ][ i ]) dp [ i ] = min ( dp [ i ], dp [ j ] + 1 ); } } return dp [ s . size () -1 ]; }","title":"132. \u5206\u5272\u56de\u6587\u4e32 II"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_30","text":"","title":"\u5b57\u7b26\u4e32\u52a8\u6001\u89c4\u5212&lt;\u9ad8\u9891\uff01\uff01\uff01\uff01&gt;"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#10","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 bool isMatch ( string s , string p ) { int len1 = s . size (); int len2 = p . size (); //dp[i][j]\u8868\u793as\u7b2ci\u4e2a \u548cp\u7b2cj\u4e2a \u5b57\u7b26(\u5305\u62eci,j)\u4e4b\u524d\u662f\u5426\u5339\u914d vector < vector < bool > > dp ( len1 + 1 , vector < bool > ( len2 + 1 , false )); dp [ 0 ][ 0 ] = true ; //\u8fd9\u91cc\u5f88\u91cd\u8981 //\u9488\u5bf9\u5339\u914ds\u4e3a\u7a7a\u65f6\u7684\u7279\u6b8a\u60c5\u51b5\u7684\u521d\u59cb\u5316 for ( int i = 0 ; i < p . size (); ++ i ){ //\u6ce8\u610f\u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5\u8fd9\u91cci-1\u80af\u5b9a\u5408\u6cd5 if ( p [ i ] == '*' ) dp [ 0 ][ i + 1 ] = dp [ 0 ][ i -1 ]; } for ( int i = 0 ; i < len1 ; ++ i ){ for ( int j = 0 ; j < len2 ; ++ j ){ //\u5982\u679c\u76f8\u7b49\u6216p[j]\u4e07\u80fd\u5339\u914d \u76f4\u63a5\u90fd\u540e\u9000\u4e00\u683c if ( s [ i ] == p [ j ] || p [ j ] == '.' ) dp [ i + 1 ][ j + 1 ] = dp [ i ][ j ]; //\u5982\u679c\u4e3a'*'\u5219\u4e24\u79cd\u60c5\u51b5 else if ( p [ j ] == '*' ){ //\u4e4b\u524d\u8bf4\u4e86 \u5bf9\u4e8ep \u8f93\u5165\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a'*'\u662f\u4e0d\u5408\u6cd5\u7684 \u6240\u4ee5j>=1 \u540e\u9762j-1\u90fd\u5408\u6cd5 //\u5982\u679c\u524d\u4e00\u683c\u5339\u914d if ( p [ j -1 ] == s [ i ] || p [ j -1 ] == '.' ){ //dp[i+1][j-1]\u5bf9\u5e94\u5339\u914d\u96f6\u4e2a //dp[i+1][j]\u5bf9\u5e94\u5339\u914d\u4e00\u4e2a //dp[i][j+1]\u5bf9\u5e94\u5339\u914d\u591a\u4e2a dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ] || dp [ i + 1 ][ j ] || dp [ i ][ j + 1 ]; } //\u5bf9\u4e8ep \u524d\u4e00\u4e2a\u5b57\u7b26\u548cs\u5f53\u524d\u5b57\u7b26\u4e0d\u5339\u914d \u5219p\u56de\u9000\u4e24\u683c else dp [ i + 1 ][ j + 1 ] = dp [ i + 1 ][ j -1 ]; } //\u5982\u679cp[j]\u4e0d\u4e3a\u7279\u6b8a\u5b57\u7b26\u4e14\u4e0es[i]\u4e0d\u7b49 \u5219\u7ee7\u7eed else continue ; } } return dp [ len1 ][ len2 ]; }","title":"10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#132-ii_1","text":"","title":"132. \u5206\u5272\u56de\u6587\u4e32 II"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_31","text":"\u5b57\u7b26\u4e32\u95ee\u9898\u5e38\u5e38\u548c\u6808\u7ed3\u5408","title":"\u5b57\u7b26\u4e32\u4e0e\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#394","text":"string decodeString ( string s ) { stack < int > num_st ; stack < string > s_st ; int multi = 0 ; string res ; for ( auto & c : s ){ if (( c - '0' ) >= 0 && ( c - '0' ) <= 9 ){ multi = multi * 10 + ( c - '0' ); } else if ( c == '[' ){ //\u6570\u5b57\u5165\u6808 \u5e76\u6e05\u96f6 num_st . push ( multi ); multi = 0 ; //\u5b57\u7b26\u5165\u6808\u5e76\u7f6e\u7a7a s_st . push ( res ); res = \"\" ; } //\u8981\u8fdb\u884c\u8ba1\u7b97\u5e76\u66f4\u65b0res\u4e86 else if ( c == ']' ){ multi = num_st . top (); //\u8fd9\u91cc\u5904\u7406\u5b57\u7b26\u4e32\u975e\u5e38\u5de7\u5999 //-----------------\u6838\u5fc3\u90e8\u5206----------- for ( int i = 0 ; i < multi ; ++ i ){ s_st . top () += res ; //\u8fd9\u4e2a\u5faa\u73af\u8ba1\u7b97 \u6570\u5b57*\u5b57\u7b26\u4e32 } res = s_st . top (); s_st . pop (); //\u66f4\u65b0\u6570\u5b57 num_st . pop (); multi = 0 ; } //\u4e3a\u5b57\u7b26\u5219\u5f80\u540e\u52a0 else res . push_back ( c ); } return res ; }","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_32","text":"","title":"\u5b57\u7b26\u4e32\u7ec4\u5408\u95ee\u9898\u53ca\u5207\u5206\u95ee\u9898\uff08\u56de\u6eaf\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#131_1","text":"","title":"131. \u5206\u5272\u56de\u6587\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_33","text":"","title":"\u5b57\u7b26\u4e32\u5206\u7c7b\u8ba8\u8bba"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#394_1","text":"","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_34","text":"","title":"\u7ecf\u5178\u6392\u5e8f\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#406","text":"\u53c2\u8003 \u91cd\u5199\u6392\u5e8fcmp \u8eab\u9ad8\u964d\u5e8f \u4f4d\u7f6e\u5347\u5e8f \u6309\u7167\u8eab\u9ad8\u6392\u5e8f\u4e4b\u540e\uff0c\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\uff0c\u540e\u5e8f\u63d2\u5165\u8282\u70b9\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u5df2\u7ecf\u63d2\u5165\u7684\u8282\u70b9\uff0c\u6700\u7ec8\u6309\u7167k\u7684\u89c4\u5219\u5b8c\u6210\u4e86\u961f\u5217\u3002 \u6240\u4ee5\u5728\u6309\u7167\u8eab\u9ad8\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u540e\uff1a **\u5c40\u90e8\u6700\u4f18\uff1a**\u4f18\u5148\u6309\u8eab\u9ad8\u9ad8\u7684people\u7684k\u6765\u63d2\u5165\u3002\u63d2\u5165\u64cd\u4f5c\u8fc7\u540e\u7684people\u6ee1\u8db3\u961f\u5217\u5c5e\u6027 **\u5168\u5c40\u6700\u4f18\uff1a**\u6700\u540e\u90fd\u505a\u5b8c\u63d2\u5165\u64cd\u4f5c\uff0c\u6574\u4e2a\u961f\u5217\u6ee1\u8db3\u9898\u76ee\u961f\u5217\u5c5e\u6027 \u590d\u4e60\uff1a \u52a8\u6001\u6570\u7ec4vector\u592a\u6162 \u7528\u94fe\u8868\u66f4\u597d","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_35","text":"","title":"\u7ecf\u5178\u8d2a\u5fc3\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#135","text":"","title":"135. \u5206\u53d1\u7cd6\u679c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_36","text":"","title":"\u7ecf\u5178\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#312","text":"","title":"312. \u6233\u6c14\u7403"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_37","text":"\u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a....","title":"\u7ecf\u5178\u56fe\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#207","text":"","title":"207. \u8bfe\u7a0b\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#399","text":"const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; }","title":"399. \u9664\u6cd5\u6c42\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_38","text":"","title":"\u529b\u6263\u6bcf\u65e5\u4e00\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#1128","text":"\u89e3\u9898\u601d\u8def \u66b4\u529b\u7684\u8bdd\u4f1a\u8d85\u65f6 \u7528map\u7edf\u8ba1\u6bcf\u4e00\u5f20\u9aa8\u724c\u7684\u6570\u91cf\uff08\u7edf\u8ba1\u65f6\u5148\u5c06\u6240\u6709\u9aa8\u724c\u7ffb\u8f6c\u4e3anums[0]\u5c0f\uff0cnums[1]\u5927\uff0c\u4fbf\u4e8e\u5efa\u8868\uff09\u3002 \u9700\u8981\u6ce8\u610f\uff1a unordered_map \u4e0d\u652f\u6301 unordered_map , int> \u6216\u8005 unordered_map , int> \u56e0\u4e3astd::unordered_map\u5e95\u5c42\u662fhash\uff0c\u800cunordered_map\u6ca1\u6709\u4e13\u95e8\u7684hash\u63d0\u4f9b\u7ed9std::pair\u3002 \u53c2\u8003 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int cnt = 0 ; map < vector < int > , int > nums2Cnts ; for ( vector < int >& nums : dominoes ) { //\u7ffb\u8f6c\u9aa8\u724c if ( nums [ 0 ] > nums [ 1 ]) { swap ( nums [ 0 ], nums [ 1 ]); } ++ nums2Cnts [ nums ]; } for ( auto & c : nums2Cnts ) { if ( c . second > 1 ) { //\u6392\u5217\u7ec4\u5408C(n,2)\uff0c\u5176\u4e2dn\u4e3a\u7b49\u4ef7\u9aa8\u724c\u7684\u603b\u6570\u91cf\u3002 cnt += ( c . second * ( c . second - 1 )) / 2 ; } } return cnt ; } \u63d0\u4ea4 int numEquivDominoPairs ( vector < vector < int >>& dominoes ) { int ans = 0 ; if ( dominoes . size () == 0 || dominoes [ 0 ]. size () == 0 ) return ans ; map < vector < int > , int > dir ; for ( auto & nums : dominoes ){ if ( nums [ 0 ] > nums [ 1 ]) swap ( nums [ 0 ], nums [ 1 ]); ++ dir [ nums ]; } for ( auto & c : dir ){ if ( c . second > 1 ) { ans += c . second * ( c . second -1 ) / 2 ; } } return ans ; } \u601d\u8003\uff1a \u590d\u4e60\u638c\u63e1\u4e00\u4e0bmap\u7684\u7528\u6cd5 \u4ee5\u53caauto\u5173\u952e\u5b57\u548cc++\u57fa\u7840","title":"1128. \u7b49\u4ef7\u591a\u7c73\u8bfa\u9aa8\u724c\u5bf9\u7684\u6570\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#331","text":"\u53c2\u8003","title":"331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#705","text":"","title":"705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#706","text":"","title":"706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#54","text":"","title":"54. \u87ba\u65cb\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#59-ii","text":"","title":"59. \u87ba\u65cb\u77e9\u9635 II"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#115","text":"","title":"115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#92-ii","text":"","title":"92. \u53cd\u8f6c\u94fe\u8868 II"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#73","text":"","title":"73. \u77e9\u9635\u7f6e\u96f6"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#341","text":"","title":"341. \u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668 \u2b50"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#456-132","text":"","title":"456. 132 \u6a21\u5f0f \u2b50"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#173","text":"","title":"173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#190","text":"","title":"190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#74","text":"","title":"74. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#664","text":"cv\u5927\u6cd5","title":"664. \u5947\u602a\u7684\u6253\u5370\u673a"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#_39","text":"","title":"\u91cd\u8981\u7684\u6bcf\u65e5\u4e00\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%8A%9B%E6%89%A3HOT100/#421","text":"c\u57fa\u7840\uff0c\u90a3\u4e9b\u4ec0\u4e48\u7ed3\u6784\u4f53\u3001\u6307\u9488\u5565\u7684\u4e00\u584c\u7cca\u6d82\u3002 \u5b57\u5178\u6811\uff0c\u6709\u8003\u5bdf\uff0c\u7ecf\u5178\u3002","title":"421. \u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/","text":"C++\u673a\u8bd5 \u00b6 vs2018 \u5feb\u6377\u952e \u00b6 CTRL + J \u5217\u51fa\u6210\u5458 Ctrl+E,D \u683c\u5f0f\u5316\u5168\u90e8\u4ee3\u7801 Ctrl+K,F \u683c\u5f0f\u5316\u9009\u4e2d\u7684\u4ee3\u7801 CTRL + SHIFT + E \u663e\u793a\u8d44\u6e90\u89c6\u56fe F12 \u8f6c\u5230\u5b9a\u4e49 CTRL + F12 \u8f6c\u5230\u58f0\u660e CTRL + ALT + J \u5bf9\u8c61\u6d4f\u89c8 CTRL + ALT + F1 \u5e2e\u52a9\u76ee\u5f55 CTRL + F1 \u52a8\u6001\u5e2e\u52a9 CTRL + K, CTRL + C \u6ce8\u91ca\u9009\u62e9\u7684\u4ee3\u7801 CTRL + K, CTRL + U \u53d6\u6d88\u5bf9\u9009\u62e9\u4ee3\u7801\u7684\u6ce8\u91ca CTRL + U \u8f6c\u5c0f\u5199 CTRL + SHIFT + U \u8f6c\u5927\u5199 F5 \u8fd0\u884c\u8c03\u8bd5 CTRL + F5 \u8fd0\u884c\u4e0d\u8c03\u8bd5 F10 \u8de8\u8fc7\u7a0b\u5e8f\u6267\u884c F11 \u5355\u6b65\u9010\u53e5\u6267\u884c \u5934\u6587\u4ef6 \u00b6 \u6807\u51c6c\u5e93 \u00b6 \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e assert.h \u65ad\u8a00\u76f8\u5173 ctype.h \u5b57\u7b26\u7c7b\u578b\u5224\u65ad errno.h \u6807\u51c6\u9519\u8bef\u673a\u5236 float.h \u6d6e\u70b9\u9650\u5236 limits.h \u6574\u5f62\u9650\u5236 locale.h \u672c\u5730\u5316\u63a5\u53e3 math.h \u6570\u5b66\u51fd\u6570 setjmp.h \u975e\u672c\u5730\u8df3\u8f6c signal.h \u4fe1\u53f7\u76f8\u5173 stdarg.h \u53ef\u53d8\u53c2\u6570\u5904\u7406 stddef.h \u5b8f\u548c\u7c7b\u578b\u5b9a\u4e49 stdio.h \u6807\u51c6I/O stdlib.h \u6807\u51c6\u5de5\u5177\u5e93 string.h \u5b57\u7b26\u4e32\u548c\u5185\u5b58\u5904\u7406 time.h \u65f6\u95f4\u76f8\u5173 c++ STL \u00b6 using namespace std; \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e algorithm \u901a\u7528\u7b97\u6cd5 deque \u53cc\u7aef\u961f\u5217 vector \u5411\u91cf iterator \u8fed\u4ee3\u5668 stack \u6808 map \u56fe\uff08\u952e\u503c\u5bf9\uff09 list \u5217\u8868 string \u5b57\u7b26\u4e32 set \u96c6\u5408 queue \u961f\u5217 bitset bit\u7c7b numeric \u6570\u503c\u7b97\u6cd5 \u5e38\u7528\u5934 \u00b6 #include<cstdio> #include<cstring> #include<algorithm> #include<iostream> #include<string> #include<vector> #include<stack> #include<bitset> #include<cstdlib> #include<cmath> #include<set> #include<list> #include<deque> #include<map> #include<queue> using namespace std; \u5e38\u7528\u5b8f\u5b9a\u4e49 \u00b6 //\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c #define MAX(x,y) (((x)>(y)) ? (x) : (y)) #define MIN(x,y) (((x) < (y)) ? (x) : (y)) //\u53d6\u4f59 #define mod(x) ((x)%MOD) //for\u5faa\u73af #define FOR(i,f_start,f_end) for(int i=f_start;i<=f_end;++i) //\u8fd4\u56de\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 #define ARR_SIZE(a) (sizeof((a))/sizeof((a[0]))) //\u521d\u59cb\u5316\u6570\u7ec4 #define MT(x,i) memset(x,i,sizeof(x)) #define MEM(a,b) memset((a),(b),sizeof(a)) //\u7b26\u53f7\u91cd\u5b9a\u4e49 #define LL long long #define ull unsigned long long #define pii pair<int,int> //\u5e38\u89c1\u5e38\u6570 #define PI acos(-1.0) #define eps 1e-12 #define INF 0x3f3f3f3f //int\u6700\u5927\u503c const int INF_INT = 2147483647; const ll INF_LL = 9223372036854775807LL; const ull INF_ULL = 18446744073709551615Ull; const ll P = 92540646808111039LL; const ll maxn = 1e5 + 10, MOD = 1e9 + 7; const int Move[4][2] = {-1,0,1,0,0,1,0,-1}; const int Move_[8][2] = {-1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1}; \u7ed3\u6784\u4f53 \u00b6 \u5b9a\u4e49 \u00b6 struct InitMember { int first\uff1b double second\uff1b char* third\uff1b float four; }; \u521d\u59cb\u5316 \u00b6 \u65b9\u6cd5\u4e00\uff1a\u5b9a\u4e49\u65f6\u8d4b\u503c \u00b6 struct InitMember test = {-10,3.141590\uff0c\"method one\"\uff0c0.25}\uff1b \u65b9\u6cd5\u4e8c\uff1a\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c \u00b6 struct InitMember test\uff1b test.first = -10; test.second = 3.141590; test.third = \"method two\"; test.four = 0.25; \u65b9\u6cd5\u4e09\uff1a\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503c\uff08C++\u98ce\u683c\uff09 \u00b6 struct InitMember test = { second\uff1a3.141590, third\uff1a\"method three\", first\uff1a-10, four\uff1a0.25 }; \u65b9\u6cd5\u56db\uff1a\u6784\u9020\u51fd\u6570 \u00b6 //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { ... ... ... return true; } } Graph; Graph g(8, false); \u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 typedef struct{int id;int h;} node; bool operator <(const node& a,const node & b){return (a.h)<(b.h);} c++new\u7684\u4f7f\u7528 \u00b6 \u5e38\u89c4 \u00b6 int *x = new int; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740(\u5373\u6307\u9488) int *a = new int(100); //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u6574\u6570\u7684\u521d\u503c\u4e3a100\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740 char *b = new char[10]; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5b57\u7b26\u6570\u7ec4(\u5305\u62ec10\u4e2a\u5143\u7d20)\u7684\u7a7a\u95f4\uff0c\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5730\u5740 float *p=new float (3.14159);//\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5355\u7cbe\u5ea6\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u5b9e\u6570\u7684\u521d\u503c\u4e3a//3.14159\uff0c\u5c06\u8fd4\u56de\u7684\u8be5\u7a7a\u95f4\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u9488\u53d8\u91cfp \u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4 \u00b6 //\u5217\u503c\u56fa\u5b9a const int MAXCOL = 3; cin>>row; //\u7533\u8bf7\u4e00\u7ef4\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6210\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488 int *pp_arr = new int[nRow * MAXCOL]; int (*p)[MAXCOL] = (int(*)[MAXCOL])pp_arr; //\u6b64\u65f6p[i][j]\u5c31\u53ef\u6b63\u5e38\u4f7f\u7528 \u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4 \u00b6 cin>>row>>col; int **p = new int*[row]; for (int i = 0; i < row; i ++) { p[i] = new int[col]; } \u5e38\u7528STL \u00b6 \u53c2\u8003\uff1a https://blog.csdn.net/f_zyj/article/details/51594851 https://download.csdn.net/download/f_zyj/9988653 \u7b80\u8ff0 \u00b6 STL\u5e95\u5c42\u8bf4\u660e \u00b6 C++ STL \u7684\u5b9e\u73b0\uff1a \u5bb9\u5668 \u5b9e\u73b0 vector \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u6570\u7ec4 \uff0c\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee list \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u652f\u6301\u5feb\u901f\u589e\u5220 deque \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u4e00\u4e2a\u4e2d\u592e\u63a7\u5236\u5668\u548c\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u8be6\u7ec6\u89c1STL\u6e90\u7801\u5256\u6790P146\uff0c\u652f\u6301\u9996\u5c3e\uff08\u4e2d\u95f4\u4e0d\u80fd\uff09\u5feb\u901f\u589e\u5220\uff0c\u4e5f\u652f\u6301\u968f\u673a\u8bbf\u95ee deque \u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217(double-ended queue)\uff0c\u4e5f\u662f\u5728\u5806\u4e2d\u4fdd\u5b58\u5185\u5bb9\u7684.\u5b83\u7684\u4fdd\u5b58\u5f62\u5f0f\u5982\u4e0b:[\u58061] \u2013> [\u58062] \u2013>[\u58063] \u2013> \u2026\u6bcf\u4e2a\u5806\u4fdd\u5b58\u597d\u51e0\u4e2a\u5143\u7d20,\u7136\u540e\u5806\u548c\u5806\u4e4b\u95f4\u6709\u6307\u9488\u6307\u5411,\u770b\u8d77\u6765\u50cf\u662flist\u548cvector\u7684\u7ed3\u5408\u54c1 stack \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6 queue \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6\uff08stack\u548cqueue\u5176\u5b9e\u662f\u9002\u914d\u5668,\u800c\u4e0d\u53eb\u5bb9\u5668\uff0c\u56e0\u4e3a\u662f\u5bf9\u5bb9\u5668\u7684\u518d\u5c01\u88c5\uff09 priority_queue \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e3avector\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u5806heap\u4e3a\u5904\u7406\u89c4\u5219\u6765\u7ba1\u7406\u5e95\u5c42\u5bb9\u5668\u5b9e\u73b0 set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d hash_set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d hash_map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d CCF \u7f16\u8bd1\u51fa\u9519\u539f\u56e0\uff1a \u4e0d\u5141\u8bb8C++STL\u5bb9\u5668\u5d4c\u5957\uff08\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f\uff09 \u00b6 \u5c31\u662f\u8981\u5728\u540e\u9762\u7684\u201c>\u201d\u4e4b\u95f4\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5982\u679c\u6709\u591a\u5c42\uff0c\u90a3\u6bcf\u5c42\u90fd\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 map<string,list<string> > user; algorithm \u00b6 \u5934\u6587\u4ef6\uff1aalgorithm \u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4ee5\u53ca\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u8bf7\u81ea\u884c\u53bb\u5934\u6587\u4ef6\u627e\u5b9a\u4e49\uff01\uff01\uff01 \u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e adjacent_find \u67e5\u627e\u4e24\u4e2a\u76f8\u90bb\uff08Adjacent\uff09\u7684\u7b49\u4ef7\uff08Identical\uff09\u5143\u7d20 all_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 any_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6 count \u8fd4\u56de\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u4e2a\u6570 count_if \u8fd4\u56de\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570 equal \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u662f\u5426\u76f8\u7b49 find \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 find_end \u67e5\u627e\u8303\u56f4*A*\u4e2d\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e find_first_of \u67e5\u627e\u8303\u56f4*A*\u4e2d\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u4e2d\u4efb\u4e00\u5143\u7d20\u7b49\u4ef7\u7684\u5143\u7d20\u7684\u4f4d\u7f6e find_if \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 find_if_notC++11 \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 for_each \u5bf9\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u6307\u5b9a\u51fd\u6570 mismatch \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u7b49\u4ef7\u7684\u4f4d\u7f6e none_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 search \u5728\u8303\u56f4*A*\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e search_n \u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8fde\u7eed*n*\u4e2a\u5143\u7d20\u90fd\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e \u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e copy \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_backward \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_ifC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_nC++11 \u62f7\u8d1d n \u4e2a\u5143\u7d20\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 fill \u5c06\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c fill_n \u5c06\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c generate \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u8303\u56f4\u7684\u5143\u7d20\u4e2d\uff0c\u7528\u4e8e\u6279\u91cf\u8d4b\u503c\u8303\u56f4\u4e2d\u7684\u5143\u7d20 generate_n \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u4e2d iter_swap \u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668\uff08Iterator\uff09\u6307\u5411\u7684\u5143\u7d20 moveC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 move_backwardC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 random_shuffle \u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e remove \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 remove_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 replace \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c reverse \u53cd\u8f6c\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 reverse_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u53cd\u8f6c\u6392\u5e8f\u7ed3\u679c rotate \u5faa\u73af\u79fb\u52a8\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 rotate_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5faa\u73af\u79fb\u52a8\u7ed3\u679c shuffleC++11 \u7528\u6307\u5b9a\u7684\u968f\u673a\u6570\u5f15\u64ce\u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e swap \u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c swap_ranges \u4ea4\u6362\u4e24\u4e2a\u8303\u56f4\u7684\u5143\u7d20 transform \u5bf9\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u4ee5\u6539\u53d8\u5143\u7d20\u7684\u503c unique \u5220\u9664\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6240\u6709\u8fde\u7eed\u91cd\u590d\u5143\u7d20\uff0c\u4ec5\u4ec5\u7559\u4e0b\u6bcf\u7ec4\u7b49\u503c\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 unique_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u552f\u4e00\u5316\uff08\u53c2\u8003\u4e0a\u8ff0\u7684 unique\uff09\u7ed3\u679c \u5212\u5206\u64cd\u4f5c \u00b6 |\u51fd\u6570|\u8bf4\u660e| | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | |is_partitionedC++11| \u68c0\u6d4b\u67d0\u4e2a\u8303\u56f4\u662f\u5426\u6309\u6307\u5b9a\u8c13\u8bcd\uff08Predicate\uff09\u5212\u5206\u8fc7| |partition | \u5c06\u67d0\u4e2a\u8303\u56f4\u5212\u5206\u4e3a\u4e24\u7ec4| |partition_copyC++11 | \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5212\u5206\u7ed3\u679c| |partition_pointC++11 | \u8fd4\u56de\u88ab\u5212\u5206\u8303\u56f4\u7684\u5212\u5206\u70b9| |stable_partition | \u7a33\u5b9a\u5212\u5206\uff0c\u4e24\u7ec4\u5143\u7d20\u5404\u7ef4\u6301\u76f8\u5bf9\u987a\u5e8f| \u6392\u5e8f\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e is_sortedC++11 \u68c0\u6d4b\u6307\u5b9a\u8303\u56f4\u662f\u5426\u5df2\u6392\u5e8f is_sorted_untilC++11 \u8fd4\u56de\u6700\u5927\u5df2\u6392\u5e8f\u5b50\u8303\u56f4 nth_element \u90e8\u4efd\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8303\u56f4\u6309\u7ed9\u5b9a\u4f4d\u7f6e\u5904\u7684\u5143\u7d20\u5212\u5206 partial_sort \u90e8\u4efd\u6392\u5e8f partial_sort_copy \u62f7\u8d1d\u90e8\u5206\u6392\u5e8f\u7684\u7ed3\u679c sort \u6392\u5e8f stable_sort \u7a33\u5b9a\u6392\u5e8f \u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e binary_search \u5224\u65ad\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 equal_range \u8fd4\u56de\u8303\u56f4\u4e2d\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u8303\u56f4 lower_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 upper_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u96c6\u5408\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e includes \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 inplace_merge \u5c31\u7eea\u5408\u5e76 merge \u5408\u5e76 set_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6 set_intersection \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 set_symmetric_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5bf9\u79f0\u5dee set_union \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6 \u5806\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e is_heap \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u662f\u5426\u6ee1\u8db3\u5806\u7ed3\u6784 is_heap_untilC++11 \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u4e2d\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u6700\u5927\u5b50\u8303\u56f4 make_heap \u7528\u7ed9\u5b9a\u8303\u56f4\u6784\u9020\u51fa\u4e00\u4e2a\u5806 pop_heap \u4ece\u4e00\u4e2a\u5806\u4e2d\u5220\u9664\u6700\u5927\u7684\u5143\u7d20 push_heap \u5411\u5806\u4e2d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 sort_heap \u5c06\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u8303\u56f4\u6392\u5e8f \u6700\u5927/\u6700\u5c0f\u64cd\u4f5c \u00b6 \u51fd\u6570 \u8bf4\u660e is_permutationC++11 \u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684\u4e00\u79cd\u6392\u5e8f lexicographical_compare \u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u7684\u5b57\u5178\u5e8f max \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 max_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 min \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 min_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 minmaxC++11 \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 minmax_elementC++11 \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 next_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0b\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217 prev_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0a\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217 vector \u00b6 \u5934\u6587\u4ef6\uff1avector \u5728STL\u7684vector\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86vector\uff08\u5411\u91cf\u5bb9\u5668\u6a21\u7248\u7c7b\uff09\uff0cvector\u5bb9\u5668\u4ee5\u8fde\u7eed\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u5c06vector\u770b\u4f5c\u662f\u4ee5\u987a\u5e8f\u7ed3\u6784\u5b9e\u73b0\u7684\u7ebf\u6027\u8868\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u9700\u8981\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u65f6\uff0cvector\u5c06\u4f1a\u662f\u7406\u60f3\u7684\u9009\u62e9\uff0cvector\u53ef\u4ee5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u589e\u957f\u5b58\u50a8\u7a7a\u95f4\u3002 vector\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5206\u914d\u5668\u7684\u7c7b\u578b\uff0c\u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u914d\u5668 \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49vector\u5411\u91cf\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a vector<int> s; // \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684vector\u5bf9\u8c61\uff0c\u5b58\u50a8\u7684\u662fint\u7c7b\u578b\u7684\u5143\u7d20 vector<int> s(n); // \u5b9a\u4e49\u4e00\u4e2a\u542b\u6709n\u4e2aint\u5143\u7d20\u7684vector\u5bf9\u8c61 vector<int> s(first, last); // \u5b9a\u4e49\u4e00\u4e2avector\u5bf9\u8c61\uff0c\u5e76\u4ece\u7531\u8fed\u4ee3\u5668first\u548clast\u5b9a\u4e49\u7684\u5e8f\u5217[first, last)\u4e2d\u590d\u5236\u521d\u503c vector\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s[i] // \u76f4\u63a5\u4ee5\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20 s.front() // \u8fd4\u56de\u9996\u5143\u7d20 s.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 s.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x s.size() // \u8fd4\u56de\u8868\u957f s.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 s.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 s.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val s.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val s.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 s.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 s.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) s.reserve(n) // \u9884\u5206\u914d\u7f13\u51b2\u7a7a\u95f4\uff0c\u4f7f\u5b58\u50a8\u7a7a\u95f4\u81f3\u5c11\u53ef\u5bb9\u7eb3n\u4e2a\u5143\u7d20 s.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 s.swap(v) // \u5c06s\u4e0e\u53e6\u4e00\u4e2avector\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 s.assign(first, last) // \u5c06\u5e8f\u5217\u66ff\u6362\u6210\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\uff0c[first, last)\u4e0d\u80fd\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u90e8\u5206 // \u8981\u6ce8\u610f\u7684\u662f\uff0cresize\u64cd\u4f5c\u548cclear\u64cd\u4f5c\u90fd\u662f\u5bf9\u8868\u7684\u6709\u6548\u5143\u7d20\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8\u7f13\u51b2\u7a7a\u95f4\u7684\u5927\u5c0f // \u53e6\u5916\uff0cvector\u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5982\u53cd\u8f6c\u3001\u53d6\u53cd\u7b49\uff0c\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e // vector\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u5e8f\u5217\u4e4b\u95f4\u7684\u6bd4\u8f83\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff08>\u3001<\u3001>=\u3001<=\u3001==\u3001!=\uff09\uff0c\u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u3002 // \u8fd8\u662f\u6765\u770b\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u5427\u2026\u2026 /* * \u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u4e00\u7ec4\u6574\u6570\uff0c\u518d\u5c06\u8fd9\u7ec4\u6574\u6570\u6309\u5012\u5e8f\u8f93\u51fa */ #include <iostream> #include <vector> using namespace std; int main() { vector<int> L; int x; while(cin >> x) { L.push_back(x); } for (int i = L.size() - 1; i >= 0; i--) { cout << L[i] << \" \"; } cout << endl; return 0; } list \u00b6 \u5934\u6587\u4ef6\uff1alist \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49list\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a list<int>a{1,2,3} list<int>a(n) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f0 list<int>a(n, m) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fm list<int>a(first, last) //\u58f0\u660e\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u5143\u7d20\u7684\u521d\u59cb\u503c\u6765\u6e90\u4e8e\u7531\u533a\u95f4\u6240\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff0cfirst\u548clast\u662f\u8fed\u4ee3\u5668 list\u7684\u57fa\u672c\u64cd\u4f5c\uff1a a.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.push_front(x) // \u5411\u8868\u5934\u63d2\u5165\u5143\u7d20x a.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x a.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 a.pop_front() // \u5220\u9664\u8868\u5934\u5143\u7d20 a.size() // \u8fd4\u56de\u8868\u957f a.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 a.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 a.front() // \u8fd4\u56de\u9996\u5143\u7d20 a.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 a.swap(v) // \u5c06a\u4e0e\u53e6\u4e00\u4e2alist\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 a.merge(b) // \u8c03\u7528\u7ed3\u675f\u540eb\u53d8\u4e3a\u7a7a\uff0ca\u4e2d\u5143\u7d20\u5305\u542b\u539f\u6765a\u548cb\u7684\u5143\u7d20 a.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val a.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val a.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 a.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 a.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) a.remove(x) // \u5220\u9664\u4e86a\u4e2d\u6240\u6709\u503c\u4e3ax\u7684\u5143\u7d20 a.assign(n, val) // \u5c06a\u4e2d\u7684\u6240\u6709\u5143\u7d20\u66ff\u6362\u6210n\u4e2aval\u5143\u7d20 a.assign(b.begin(), b.end()) //\u5c06a\u53d8\u6210b string \u00b6 \u5934\u6587\u4ef6\uff1astring string\u662fSTL\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5b57\u7b26\u4e32\u3002\u800c\u5728\u4f7f\u7528string\u4e4b\u524d\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u7528 char* \u8868\u793a\u7684\u3002 string\u548c char* \u7684\u533a\u522b string\u662f\u4e00\u4e2a\u7c7b, char* \u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u3002 string\u5c01\u88c5\u4e86 char* \uff0c\u7ba1\u7406\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a char* \u578b\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4string\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u91cc\u9762\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f char* \u3002 string\u4e0d\u7528\u8003\u8651\u5185\u5b58\u91ca\u653e\u548c\u8d8a\u754c\u3002 string\u7ba1\u7406 char* \u6240\u5206\u914d\u7684\u5185\u5b58\u3002\u6bcf\u4e00\u6b21string\u7684\u590d\u5236\uff0c\u53d6\u503c\u90fd\u7531string\u7c7b\u8d1f\u8d23\u7ef4\u62a4\uff0c\u4e0d\u7528\u62c5\u5fc3\u590d\u5236\u8d8a\u754c\u548c\u53d6\u503c\u8d8a\u754c\u7b49\u3002 string\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570 \u67e5\u627efind\uff0c\u62f7\u8d1dcopy\uff0c\u5220\u9664erase\uff0c\u66ff\u6362replace\uff0c\u63d2\u5165insert. \u6784\u9020\u548c\u6790\u6784\u51fd\u6570: \u8868\u8fbe\u5f0f \u6548\u679c string s \u751f\u6210\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 string s(str) copy\u6784\u9020\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2astr\u7684\u590d\u5236\u54c1 string s(str,idx) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(str,idx,len) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u4e14\u957f\u5ea6\u6700\u591a\u4e3alen\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr\uff0clen) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u7684\u524dlen\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(num\uff0cc) \u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542bnum\u4e2a\u5b57\u7b26c string s(beg\uff0cend) \u4ee5\u533a\u95f4[beg,end]\u5185\u6240\u6709\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c \u64cd\u4f5c\u51fd\u6570: \u64cd\u4f5c\u51fd\u6570 \u6548\u679c =\uff0cassign() \u8d4b\u4ee5\u65b0\u503c swap() \u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9 +=, append(),push_back() \u6dfb\u52a0\u5b57\u7b26 insert() \u63d2\u5165\u5b57\u7b26 erase() \u5220\u9664\u5b57\u7b26 clear() \u79fb\u9664\u5168\u90e8\u5b57\u7b26 resize() \u6539\u53d8\u5b57\u7b26\u6570\u91cf replace() \u66ff\u6362\u5b57\u7b26 + \u4e32\u8054\u5b57\u7b26\u4e32 ==\uff0c!=\uff0c<\uff0c<=\uff0c>\uff0c>=\uff0ccompare() \u6bd4\u8f83\u5b57\u7b26\u4e32\u5185\u5bb9 size(),length() \u8fd4\u56de\u5b57\u7b26\u6570\u91cf,\u7b49\u6548\u51fd\u6570 max_size() \u8fd4\u56de\u5b57\u7b26\u7684\u6700\u5927\u53ef\u80fd\u4e2a\u6570 empty() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a capacity() \u8fd4\u56de\u91cd\u65b0\u5206\u914d\u4e4b\u524d\u7684\u5b57\u7b26\u5bb9\u91cf reserve() \u4fdd\u7559\u4e00\u5b9a\u91cf\u5185\u5b58\u4ee5\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26 [ ]\uff0cat() \u5b58\u53d6\u5355\u4e00\u5b57\u7b26 \u00bb\uff0cgetline() \u4ecestream\u4e2d\u8bfb\u53d6\u67d0\u503c \u00ab \u5c06\u67d0\u503c\u5199\u5165stream copy() \u5c06\u5185\u5bb9\u590d\u5236\u4e3a\u4e00\u4e2aC-string c_str() \u5c06\u5185\u5bb9\u4ee5C-string\u5f62\u5f0f\u8fd4\u56de data() \u5c06\u5185\u5bb9\u4ee5\u5b57\u7b26\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de substr() \u8fd4\u56de\u67d0\u4e2a\u5b50\u5b57\u7b26\u4e32 begin()\uff0cend() \u63d0\u4f9b\u6b63\u5e38\u7684\u8fed\u4ee3\u5668\u652f\u6301 rbegin()\uff0crend() \u63d0\u4f9b\u9006\u5411\u8fed\u4ee3\u5668\u652f\u6301 pair \u00b6 \u5934\u6587\u4ef6\uff1autility STL\u7684utility\u5934\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u5355\u7684\u6a21\u7248\u7c7bpair\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u6216\u5143\u7d20\u5bf9\uff0c\u5e76\u63d0\u4f9b\u4e86\u6309\u7167\u5b57\u5178\u5e8f\u5bf9\u5143\u7d20\u5bf9\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6a21\u7248\u51fd\u6570\u3002 Example\uff0c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5750\u6807\u70b9\uff0c\u5219\u53ef\u4ee5\uff1a pair<double, double> p; cin >> p.first >> p.second; pair\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u9996\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u548c\u5c3e\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002pair\u6a21\u7248\u7c7b\u5bf9\u8c61\u6709\u4e24\u4e2a\u6210\u5458\uff1afirst\u548csecond\uff0c\u5206\u522b\u8868\u793a\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002 \u5728\u5176\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86pair\u4e0a\u7684\u516d\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a<\u3001>\u3001<=\u3001>=\u3001==\u3001!=\uff0c\u5176\u89c4\u5219\u662f\u5148\u6bd4\u8f83first\uff0cfirst\u76f8\u7b49\u65f6\u518d\u6bd4\u8f83second\uff0c\u8fd9\u7b26\u5408\u5927\u591a\u6570\u5e94\u7528\u7684\u903b\u8f91\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u91cd\u8f7d\u8fd9\u51e0\u4e2a\u8fd0\u7b97\u7b26\u6765\u91cd\u65b0\u6307\u5b9a\u81ea\u5df1\u7684\u6bd4\u8f83\u903b\u8f91\u3002 \u9664\u4e86\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2apair\u5bf9\u8c61\u5916\uff0c\u5982\u679c\u9700\u8981\u5373\u65f6\u751f\u6210\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u7248\u51fd\u6570\uff1amake_pair\u3002make_pair\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u5143\u7d20\u5bf9\u7684\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002 map \u00b6 \u5934\u6587\u4ef6\uff1amap \u5728STL\u7684\u5934\u6587\u4ef6\u4e2dmap\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7bmap\u548cmultimap\uff0c\u7528\u6709\u5e8f\u4e8c\u53c9\u6811\u8868\u5b58\u50a8\u7c7b\u578b\u4e3a pair<const Key, T> \u7684\u5143\u7d20\u5bf9\u5e8f\u5217\u3002\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u4ee5const Key\u90e8\u5206\u4f5c\u4e3a\u6807\u8bc6\uff0cmap\u4e2d\u6240\u6709\u5143\u7d20\u7684Key\u503c\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0cmultimap\u5219\u5141\u8bb8\u6709\u91cd\u590d\u7684Key\u503c\u3002 \u53ef\u4ee5\u5c06map\u770b\u4f5c\u662f\u7531Key\u6807\u8bc6\u5143\u7d20\u7684\u5143\u7d20\u96c6\u5408\uff0c\u8fd9\u7c7b\u5bb9\u5668\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u8054\u5bb9\u5668\u201d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aKey\u503c\u6765\u5feb\u901f\u51b3\u5b9a\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u4e8e\u9700\u8981\u6309\u7167Key\u503c\u67e5\u627e\u5143\u7d20\u7684\u5bb9\u5668\u3002 map\u6a21\u7248\u7c7b\u9700\u8981\u56db\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u7b2c\u4e09\u4e2a\u662f\u6bd4\u8f83\u7b97\u5b50\uff0c\u7b2c\u56db\u4e2a\u662f\u5206\u914d\u5668\u7c7b\u578b\u3002\u5176\u4e2d\u952e\u503c\u7c7b\u578b\u548c\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\u3002 \u5b9a\u4e49map\u5bf9\u8c61\u7684\u4ee3\u7801\u793a\u4f8b\uff1a map<string, int> m; map\u7684\u57fa\u672c\u64cd\u4f5c\uff1a /* \u5411map\u4e2d\u63d2\u5165\u5143\u7d20 */ m[key] = value; // [key]\u64cd\u4f5c\u662fmap\u5f88\u6709\u7279\u8272\u7684\u64cd\u4f5c,\u5982\u679c\u5728map\u4e2d\u5b58\u5728\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9, \u5219\u8fd4\u56de\u8be5\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206,\u5426\u5219\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9,\u503c\u57df\u4e3a\u9ed8\u8ba4\u503c\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u8be5\u64cd\u4f5c\u5411map\u4e2d\u63d2\u5165\u5143\u7d20\u5bf9\u6216\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206\u3002 m.insert(make_pair(key, value)); // \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528insert\u65b9\u6cd5\u63d2\u5165\u5143\u7d20\u5bf9,insert\u64cd\u4f5c\u4f1a\u8fd4\u56de\u4e00\u4e2apair,\u5f53map\u4e2d\u6ca1\u6709\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u63d2\u5165\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5176second\u4e3atrue;\u82e5map\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e0ekey\u76f8\u7b49\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,second\u4e3afalse\u3002 /* \u67e5\u627e\u5143\u7d20 */ int i = m[key]; // \u8981\u6ce8\u610f\u7684\u662f,\u5f53\u4e0e\u8be5\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9\u4e0d\u5b58\u5728\u65f6,\u4f1a\u521b\u5efa\u952e\u503c\u4e3akey\uff08\u5f53\u53e6\u4e00\u4e2a\u5143\u7d20\u662f\u6574\u5f62\u65f6\uff0cm[key]=0\uff09\u7684\u5143\u7d20\u5bf9\u3002 map<string, int>::iterator it = m.find(key); // \u5982\u679cmap\u4e2d\u5b58\u5728\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,find\u64cd\u4f5c\u5c06\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5426\u5219,\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8emap\u7684end()(\u53c2\u89c1vector\u4e2d\u63d0\u5230\u7684begin()\u548cend()\u64cd\u4f5c)\u3002 /* \u5220\u9664\u5143\u7d20 */ m.erase(key); // \u5220\u9664\u4e0e\u6307\u5b9akey\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 m.erase(it); // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5b9a\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668\u3002 /* \u5176\u4ed6\u64cd\u4f5c */ m.size(); // \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 m.empty(); // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a m.clear(); // \u6e05\u7a7a\u6240\u6709\u5143\u7d20 stack \u00b6 \u5934\u6587\u4ef6\uff1astack stack\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728stack\u5934\u6587\u4ef6\u4e2d\u3002 stack\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u4f46\u662f\u53ea\u6709\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\uff0c\u5728\u4e0d\u6307\u5b9a\u5bb9\u5668\u7c7b\u578b\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u7684\u7c7b\u578b\u4e3adeque\u3002 \u5b9a\u4e49stack\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: stack<int> s; stack<string> ss; stack\u7684\u57fa\u672c\u64cd\u4f5c\u6709\uff1a s.push(x); // \u5165\u6808 s.pop(); // \u51fa\u6808 s.top(); // \u8bbf\u95ee\u6808\u9876 s.empty(); // \u5f53\u6808\u7a7a\u65f6\uff0c\u8fd4\u56detrue s.size(); // \u8bbf\u95ee\u6808\u4e2d\u5143\u7d20\u4e2a\u6570 queue \u00b6 \u5934\u6587\u4ef6\uff1aqueue queue\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728queue\u5934\u6587\u4ef6\u4e2d\u3002 queue\u4e0estack\u76f8\u4f3c\uff0cqueue\u6a21\u7248\u7c7b\u4e5f\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7d20\u7c7b\u578b\u65f6\u5fc5\u987b\u7684\uff0c\u5bb9\u5668\u7c7b\u578b\u65f6\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3adeque\u7c7b\u578b\u3002 \u5b9a\u4e49queue\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5fc5\u987b\u5982\u4e0b\uff1a queue<int> q; queue<double> qq; queue\u7684\u57fa\u672c\u64cd\u4f5c\uff1a q.push(x); // \u5165\u961f\u5217 q.pop(); // \u51fa\u961f\u5217 q.front(); // \u8bbf\u95ee\u961f\u9996\u5143\u7d20 q.back(); // \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 q.empty(); // \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a q.size(); // \u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 set \u00b6 \u5934\u6587\u4ef6\uff1aset set\u662f\u4e0e\u96c6\u5408\u76f8\u5173\u7684\u5bb9\u5668\uff0cSTL\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86set\u7684\u5b9e\u73b0\uff0c\u5728\u7f16\u7a0b\u9898\u4e2d\u9047\u89c1\u96c6\u5408\u95ee\u9898\u76f4\u63a5\u8c03\u7528\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002 \u5b9a\u4e49set\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a set<int> s; set<double> ss; set\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s.begin() // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() // \u6e05\u9664\u6240\u6709\u5143\u7d20 s.count() // \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570 s.empty() // \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue(\u771f\uff09 s.end() // \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20 s.equal_range() // \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0e\u7ed9\u5b9a\u503c\u76f8\u7b49\u7684\u4e0a\u4e0b\u9650\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668 s.erase() // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 s.find() // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.get_allocator() // \u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668 s.insert() // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 s.lower_bound() // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.key_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570 s.max_size() // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap() // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound() // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.value_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570 multiset \u00b6 \u5934\u6587\u4ef6\uff1aset \u5728set\u5934\u6587\u4ef6\u4e2d\uff0c\u8fd8\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u6a21\u7248\u7c7bmultiset\uff08\u591a\u91cd\u96c6\u5408\uff09\u3002\u591a\u91cd\u96c6\u5408\u4e0e\u96c6\u5408\u7684\u533a\u522b\u5728\u4e8e\u96c6\u5408\u4e2d\u4e0d\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u800c\u591a\u91cd\u96c6\u5408\u4e2d\u53ef\u4ee5\u5b58\u5728\u3002 \u5b9a\u4e49multiset\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a multiset<int> s; multiset<double> ss; multiset\u548cset\u7684\u57fa\u672c\u64cd\u4f5c\u76f8\u4f3c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u96c6\u5408\u7684count()\u80fd\u8fd4\u56de0\uff08\u65e0\uff09\u6216\u80051\uff08\u6709\uff09\uff0c\u800c\u591a\u91cd\u96c6\u5408\u662f\u6709\u591a\u5c11\u4e2a\u8fd4\u56de\u591a\u5c11\u4e2a\u3002 bitset \u00b6 \u5934\u6587\u4ef6\uff1abitset \u5728 STLSTL \u7684\u5934\u6587\u4ef6\u4e2d bitset\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7b bitsetbitset\uff0c\u7528\u6765\u65b9\u4fbf\u5730\u7ba1\u7406\u4e00\u7cfb\u5217\u7684 bitbit \u4f4d\u7684\u7c7b\u3002bitsetbitset \u9664\u4e86\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u4e0b\u6807\u7684 bitbit \u4f4d\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u628a\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570\u6765\u8fdb\u884c\u67d0\u4e9b\u7edf\u8ba1\u3002 bitsetbitset \u6a21\u677f\u7c7b\u9700\u8981\u4e00\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7528\u6765\u660e\u786e\u6307\u5b9a\u542b\u6709\u591a\u5c11\u4f4d\u3002 \u5b9a\u4e49 bitsetbitset \u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\uff1a const int MAXN = 32; bitset<MAXN> bt; // bt \u5305\u62ec MAXN \u4f4d\uff0c\u4e0b\u6807 0 ~ MAXN - 1\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a 0 bitset<MAXN> bt1(0xf); // 0xf \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570 f\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1111\uff0c\u5c06 bt1 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1 bitset<MAXN> bt2(012); // 012 \u8868\u793a\u516b\u8fdb\u5236\u6570 12\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1010\uff0c\u5373\u5c06 bt2 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt3(\"1010\"); // \u5c06 bt3 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt4(s, pos, n);// \u5c06 01 \u5b57\u7b26\u4e32 s \u7684 pos \u4f4d\u5f00\u59cb\u7684 n \u4f4d\u521d\u59cb\u5316 bt4 bitsetbitset \u57fa\u672c\u64cd\u4f5c\uff1a bt.any() // bt \u4e2d\u662f\u5426\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\uff1f bt.none() // bt \u4e2d\u4e0d\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u5417\uff1f bt.count() // bt \u4e2d\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt.size() // bt \u4e2d\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt[pos] // \u8bbf\u95ee bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d bt.test(pos) // bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u662f\u5426\u4e3a 1 bt.set() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 1 bt.set(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a 1 bt.reset() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 0 bt.reset(pos) // \u628a bt \u4e2d\u5728pos\u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a0 bt.flip() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u9010\u4f4d\u53d6\u53cd bt.flip(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd bt[pos].flip() // \u540c\u4e0a bt.to_ulong() // \u7528 bt \u4e2d\u540c\u6837\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fd4\u56de\u4e00\u4e2a unsigned long \u503c os << bt // \u628a bt \u4e2d\u7684\u4f4d\u96c6\u8f93\u51fa\u5230 os \u6d41 \u56fe\u6a21\u677f \u00b6 \u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f \u00b6 #include <iostream> #include <vector> #include <set> using namespace std; #define MAX(a, b) ((a) > (b) ? (a) : (b) ) //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1) {} Vertex(int nid) : id(nid) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); } return true; } //\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> BFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); visited.insert(start); while(g.size() > 0) { int id = g[0]; g.erase(g.begin()); rst.push_back(id); for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); visited.insert(id1); } } } return rst; } //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> DFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); //cout << \"push \" << start << \" \"; visited.insert(start); rst.push_back(start); bool found; while(g.size() > 0) { int id = g[g.size()-1]; found = false; for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); rst.push_back(id1); visited.insert(id1); //cout << \"push \" << id1 << \" \"; found = true; break; } } if (!found) { int id2 = g[g.size()-1]; rst.push_back(-1 * id2); //cout << \"pop \" << id2 << \" \"; g.pop_back(); } } //cout << endl; return rst; } } Graph; int main() { Graph g(8, false); g.addEdge(0, 1); g.addEdge(0, 3); g.addEdge(1, 2); g.addEdge(3, 4); g.addEdge(3, 5); g.addEdge(4, 5); g.addEdge(4, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(6, 7); vector<int> bv = g.BFS(0); cout << \"\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; for(int j = 0; j < bv.size(); j++) cout << bv[j] << \" \"; cout << endl; cout << \"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; Graph g1(6, false); g1.addEdge(0, 1); g1.addEdge(0, 4); g1.addEdge(0, 5); g1.addEdge(1, 5); g1.addEdge(4, 5); g1.addEdge(5, 2); g1.addEdge(5, 3); g1.addEdge(2, 3); vector<int> route = g1.DFS(0); for(int i = 0; i < route.size(); i++) cout << route[i] << \" \"; cout << endl; char ch; cin >> ch; return 0; } \u5e26\u51fa\u5165\u5ea6\u7684 (2019\u63a8\u514d\u8bd5\u9898) \u00b6 #include <algorithm> #include <iostream> #include <vector> #include <queue> #define MAX(a, b) ((a) > (b) ? (a) : (b) ) using namespace std; int n,m; vector<int> inDegreelist,outDegreelist; //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); vertexs[id1].outDegree++; vertexs[id2].inDegree++; } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); vertexs[id1].outDegree++; vertexs[id1].inDegree++; vertexs[id2].outDegree++; vertexs[id2].inDegree++; } return true; } } Graph; Graph g; void init(){ cin>>n>>m; g=Graph(n, true); int src,dst; while(m--){ cin>>src>>dst; g.addEdge(src,dst); } vector<Vertex>::iterator it = g.vertexs.begin(); while(it!=g.vertexs.end()){ inDegreelist.push_back(it->inDegree); outDegreelist.push_back(it->outDegree); it++; } } int countin(int n){ return count(inDegreelist.begin(),inDegreelist.end(),n); } int countout(int n){ return count(outDegreelist.begin(),outDegreelist.end(),n); } bool Is_List(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u548c\u4e00\u4e2aoutDegree\u4e3a0\u7684\u5c3e\uff0c\u4e14\u5176\u4f59\u8282\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e3a1; return (countin(0)==1)&&(countout(0)==1)&&(countin(1)==n-1)&&(countout(1)==n-1); } bool Is_Tree(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u4e14\u5176\u4f59\u8282\u70b9inDegree\u5747\u4e3a1\uff0c\u4e14\u4e0d\u662f\u94fe\u8868; return (countin(0)==1)&&(countin(1)==n-1); } bool topologicalSort(){//\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6709\u73af\u65e0\u73af int num=0;//\u8bb0\u5f55\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570 queue<int> q; for(int i=0;i<n;i++){ if(inDegreelist[i]==0){ q.push(i);//\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u961f } } while(!q.empty()){ int u=q.front();//\u53d6\u961f\u9996\u9876\u70b9u q.pop(); for(int i=0;i<g.vertexs[u].connectors.size();i++){ int v=g.vertexs[u].connectors[i];//u\u7684\u540e\u7ee7\u8282\u70b9v inDegreelist[v]--;//v\u7684\u5165\u5ea6\u51cf1 if(inDegreelist[v]==0){//\u9876\u70b9v\u7684\u5165\u5ea6\u51cf\u4e3a0\u5219\u5165\u961f q.push(v); } } g.vertexs[u].connectors.clear();//\u6e05\u7a7au\u7684\u6240\u6709\u51fa\u8fb9 num++;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570\u52a01 } if(num==n) return true;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u4e3an\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u6210\u529f\uff0c\u56fe\u65e0\u73af else return false;//\u5426\u5219\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u56fe\u6709\u73af } int main(){ init(); if(n==0||m==0){ cout<<\"error\"<<endl; } if(Is_List()){ cout<<\"list\"<<endl; } else if(Is_Tree()){ cout<<\"tree\"<<endl; } else if(topologicalSort()){ cout<<\"no ring\"<<endl; } else{ cout<<\"have ring\"<<endl; } return 0; } \u56fe\u7b97\u6cd5\uff1a\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868 \u00b6 #include<stdio.h> #include<stdlib.h> #ifndef BASE #define BASE #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2 typedef int Status; typedef int bool; #endif #define VertexType char //\u70b9\u7c7b\u578b #define VRType int //\u8fb9\u7c7b\u578b #define maxSize 100 void Visit(VertexType e) { printf(\"%c\", e); } #define MAX_VERTEX_NUM 20 typedef enum{DG, UDG} GraphKind; typedef struct ArcNode{ int adjV; //\u8fb9\u6307\u5411\u7684\u9876\u70b9 VRType weight; //\u6743\u91cd struct ArcNode *next; }ArcNode; //\u8fb9 typedef struct VNode{ VertexType data; ArcNode *firstarc; }VNode, AdjList[MAX_VERTEX_NUM]; //\u9876\u70b9 typedef struct{ GraphKind kind; int vernum,arcnum; AdjList vers; }ALGraph; /*------------------------ |7.14 \u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868| ------------------------*/ Status InitGraph_AL(ALGraph *pG) { //\u521d\u59cb\u5316 int i; pG->arcnum = 0; pG->vernum = 0; for (i=0; i<MAX_VERTEX_NUM; ++i) pG->vers[i].firstarc = NULL; //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc return OK; } int LocateVex_AL(ALGraph G, VertexType e) { //\u5b9a\u4f4d\u503c\u4e3ae\u7684\u5143\u7d20\u4e0b\u6807 int i; for (i=0; i<G.vernum; ++i) { if (G.vers[i].data == e) { return i; } } return -1; } Status CreateDG_AL(ALGraph *pG) { //\u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868 //\u8f93\u5165\u89c4\u5219\uff1a\u9876\u70b9\u6570\u76ee->\u5f27\u7684\u6570\u76ee->\u5404\u9876\u70b9\u7684\u4fe1\u606f->\u5404\u6761\u5f27\u7684\u4fe1\u606f int i,a,b; char tmp[MAX_VERTEX_NUM]; char h,t; ArcNode *p, *q; InitGraph_AL(pG); //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc\uff0c\u5982\u679c\u4e0d\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3aNULL\uff0c\u4f1a\u51fa\u9519 //\u56fe\u7684\u7c7b\u578b pG->kind = DG; //\u9876\u70b9\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->vernum = i; //\u5f27\u7684\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->arcnum = i; //\u5404\u9876\u70b9\u4fe1\u606f scanf(\"%s\", tmp); for (i=0; i<pG->vernum; ++i) pG->vers[i].data=tmp[i]; //\u5f27\u7684\u4fe1\u606f for (i=0; i<pG->arcnum; ++i) { scanf(\"%s\", tmp); h = tmp[0]; t = tmp[2]; a = LocateVex_AL(*pG, h); b = LocateVex_AL(*pG, t); if (a<0 || b<0) return ERROR; p = (ArcNode *)malloc(sizeof(ArcNode)); if (!p) exit(OVERFLOW); p->adjV=b;p->next=NULL; if (pG->vers[a].firstarc) { //\u5df2\u7ecf\u6709\u8fb9\u4e86 for (q = pG->vers[a].firstarc; q->next; q=q->next) ; //\u627e\u5230\u6700\u540e\u4e00\u6761 q->next = p; } else { //\u7b2c\u4e00\u6761\u8fb9 pG->vers[a].firstarc = p; } } return OK; } /*---------------------------------------------------------------- |7.28 \u6709\u5411\u56fe-\u4eceu-v\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84 | ----------------------------------------------------------------*/ int visit[MAX_VERTEX_NUM]; //\u524d\u9762\u5b9a\u4e49\u4e86 VertexType paths[maxSize][MAX_VERTEX_NUM]; //\u5b58\u653e\u8def\u5f84 int path[MAX_VERTEX_NUM]; //\u8def\u5f84 int pathnum=0; //\u5f53\u524d\u662f\u7b2c\u51e0\u6761\u8def\u5f84 void FindAllPath(ALGraph G, int u,int v,int k) { //u->v\u5f53\u524d\u662f\u7b2ck\u4e2a\u4f4d\u7f6e int i; ArcNode *p; visit[u]=1; //\u8d70\u5230\u4e86u path[k]=u; //\u6dfb\u52a0\u5230\u8def\u5f84->\u4e0b\u6807\u4f4d\u7f6e\u4e3ak\u7684\u7ed3\u70b9\u662fu\uff08\u7b2ck+1\u4e2a\u662fu\uff09 if (u==v) { //\u627e\u5230\u4e86 for (i=0; i<=k; i++) {//\u590d\u5236\u5230paths paths[pathnum][i] = G.vers[path[i]].data; } paths[pathnum][i]='\\0'; //\u7ed3\u675f\u7b26 pathnum++; //\u627e\u4e0b\u4e00\u6761\u8def\u5f84 } else { //u\u7684\u90bb\u8fb9\u5f00\u59cb\u627e for (p=G.vers[u].firstarc; p; p=p->next) { if (visit[p->adjV]==0) FindAllPath(G, p->adjV, v, k+1); //\u53bb\u8fd9\u4e2a\u90bb\u63a5\u70b9\u627e } } // \u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u7ed3\u70b9 // \u6ce8\u610f\uff1a\u56de\u6eaf\u5e94\u8be5\u5199\u5728\u5916\u9762-->\u4e5f\u5c31\u662f\u4e0d\u7ba1\u6709\u6ca1\u6709\u627e\u5230\u90fd\u8981\u56de\u6eaf visit[u]=0; path[k]=0; } int main() { /*7.28 6 11 ABCDEF B,A B,D C,B C,F D,C D,E D,F E,A F,A F,B F,E B->A A->B D->A */ int i,j; int cnt; ALGraph G; char tmp[20]; CreateDG_AL(&G); while (1) { scanf(\"%s\", tmp); //A->B i = LocateVex_AL(G, tmp[0]); j = LocateVex_AL(G, tmp[3]); for (cnt=0; cnt<MAX_VERTEX_NUM; cnt++) visit[cnt]=0; pathnum=0; printf(\"7.28 \u8f93\u51fa\u6240\u6709 %c \u5230 %c \u7684\u8def\u5f84\\n\", tmp[0], tmp[3]); FindAllPath(G, i, j, 0); if (pathnum==0) { printf(\"\\t- \u8d70\u4e0d\u901a\\n\"); } for (i=0; i<pathnum; i++) { printf(\"\\t%d %s\\n\", i+1, paths[i]); } } return 0; } \u6811\u6a21\u677f \u00b6 \u6ce8\u91ca\u7248 \u00b6 #include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; // \u4e2d\u5e8f+\u5148\u5e8f=>\u4e8c\u53c9\u6811 int mid_pr_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u5148\u5e8f\u904d\u5386 { // \u8fd9\u91cc\u4e0d\u80fd\u7b49\u4e8e\uff0c\u56e0\u4e3a\u5047\u8bbe\uff1alen==1\uff0c\u5219la==ra\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u6709\u4e00\u4e2a rt \u7684\uff0c\u5374\u6ca1\u88ab\u5efa\u7acb if(la>ra) return 0; int rt=pr[lb]; // \u56e0\u4e3a\u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u4e2d\u5e8f+\u540e\u5e8f=>\u4e8c\u53c9\u6811 int mid_po_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u540e\u5e8f\u904d\u5386 { if(la>ra) return 0; int rt=po[rb]; // \u56e0\u4e3a\u540e\u5e8f\u904d\u5386\u6700\u540e\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u6c42\u6811\u9ad8 int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } // \u5c42\u5e8f\u904d\u5386 void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); // \u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01 } // \u5148\u5e8f\u904d\u5386 void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } // \u4e2d\u5e8f\u904d\u5386 void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } // \u540e\u5e8f\u904d\u5386 void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // \u540e\u5e8f\u7ed3\u70b9 // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); // \u5148\u5e8f\u7ed3\u70b9 for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); // \u4e2d\u5e8f\u7ed3\u70b9 int rt=mid_po_build(0,n-1,0,n-1); // \u4e2d+\u540e\uff0c\u8fd4\u56de\u6839\u8282\u70b9 // int rt=mid_pr_build(0,n-1,0,n-1); // \u4e2d+\u5148\uff0c\u8fd4\u56de\u6839\u8282\u70b9 bfs(rt); // \u5c42\u5e8f\u904d\u5386 // preT(rt); // \u5148\u5e8f\u904d\u5386 // puts(\"\"); // postT(rt); // \u540e\u5e8f\u904d\u5386 // puts(\"\"); // midT(rt); // \u4e2d\u5e8f\u904d\u5386 // puts(\"\"); } return 0; } \u7b80\u5316\u7248\uff08Val As Index\uff0c\u82e5\u6570\u636e\u4e0d\u57281-N\u5185\uff0c\u5219\u53ef\u80fd\u8d8a\u754c\uff09 \u00b6 #include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; int mid_pr_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=pr[lb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); return rt; } int mid_po_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=po[rb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); return rt; } int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); } void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); int rt=mid_po_build(0,n-1,0,n-1); // int rt=mid_pr_build(0,n-1,0,n-1); bfs(rt); // preT(rt); // postT(rt); // midT(rt); } return 0; } \u7b80\u5316\u7248\uff08Val Not As Index\uff0c\u53ef\u4ee5\u5b58\u4efb\u610f\u7684 Val\uff09 \u00b6 #include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a) #define ssclr(ss) ss.clear(), ss.str(\"\") #define INF 0x3f3f3f3f #define MOD 1000000007 using namespace std; typedef long long ll; const int maxn=5e4+1000; int f; int pre[maxn], in[maxn]; struct node { int l,r,d; }T[maxn]; int create(int l1,int r1,int l2,int r2) // in pre { if(l2>r2) return -1; int rt=l2; int p1=l1,p2; while(in[p1]!=pre[rt]) p1++; p2=p1-l1; T[rt].d=pre[rt]; T[rt].l=create(l1,p1-1,l2+1,l2+p2); T[rt].r=create(p1+1,r1,l2+p2+1,r2); return rt; } void postT(int rt) { if(rt==-1 || !f) return; postT(T[rt].l); postT(T[rt].r); if(f) f=0, printf(\"%d\\n\",T[rt].d); } int main() { int n; scanf(\"%d\",&n); for(int i=0;i<n;i++) scanf(\"%d\",&pre[i]); for(int i=0;i<n;i++) scanf(\"%d\",&in[i]); int rt=create(0,n-1,0,n-1); f=1, postT(rt); return 0; }","title":"C++\u673a\u8bd5"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#c","text":"","title":"C++\u673a\u8bd5"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#vs2018","text":"CTRL + J \u5217\u51fa\u6210\u5458 Ctrl+E,D \u683c\u5f0f\u5316\u5168\u90e8\u4ee3\u7801 Ctrl+K,F \u683c\u5f0f\u5316\u9009\u4e2d\u7684\u4ee3\u7801 CTRL + SHIFT + E \u663e\u793a\u8d44\u6e90\u89c6\u56fe F12 \u8f6c\u5230\u5b9a\u4e49 CTRL + F12 \u8f6c\u5230\u58f0\u660e CTRL + ALT + J \u5bf9\u8c61\u6d4f\u89c8 CTRL + ALT + F1 \u5e2e\u52a9\u76ee\u5f55 CTRL + F1 \u52a8\u6001\u5e2e\u52a9 CTRL + K, CTRL + C \u6ce8\u91ca\u9009\u62e9\u7684\u4ee3\u7801 CTRL + K, CTRL + U \u53d6\u6d88\u5bf9\u9009\u62e9\u4ee3\u7801\u7684\u6ce8\u91ca CTRL + U \u8f6c\u5c0f\u5199 CTRL + SHIFT + U \u8f6c\u5927\u5199 F5 \u8fd0\u884c\u8c03\u8bd5 CTRL + F5 \u8fd0\u884c\u4e0d\u8c03\u8bd5 F10 \u8de8\u8fc7\u7a0b\u5e8f\u6267\u884c F11 \u5355\u6b65\u9010\u53e5\u6267\u884c","title":"vs2018 \u5feb\u6377\u952e"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_1","text":"","title":"\u5934\u6587\u4ef6"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#c_1","text":"\u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e assert.h \u65ad\u8a00\u76f8\u5173 ctype.h \u5b57\u7b26\u7c7b\u578b\u5224\u65ad errno.h \u6807\u51c6\u9519\u8bef\u673a\u5236 float.h \u6d6e\u70b9\u9650\u5236 limits.h \u6574\u5f62\u9650\u5236 locale.h \u672c\u5730\u5316\u63a5\u53e3 math.h \u6570\u5b66\u51fd\u6570 setjmp.h \u975e\u672c\u5730\u8df3\u8f6c signal.h \u4fe1\u53f7\u76f8\u5173 stdarg.h \u53ef\u53d8\u53c2\u6570\u5904\u7406 stddef.h \u5b8f\u548c\u7c7b\u578b\u5b9a\u4e49 stdio.h \u6807\u51c6I/O stdlib.h \u6807\u51c6\u5de5\u5177\u5e93 string.h \u5b57\u7b26\u4e32\u548c\u5185\u5b58\u5904\u7406 time.h \u65f6\u95f4\u76f8\u5173","title":"\u6807\u51c6c\u5e93"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#c-stl","text":"using namespace std; \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e \u5934\u6587\u4ef6 \u8bf4\u660e algorithm \u901a\u7528\u7b97\u6cd5 deque \u53cc\u7aef\u961f\u5217 vector \u5411\u91cf iterator \u8fed\u4ee3\u5668 stack \u6808 map \u56fe\uff08\u952e\u503c\u5bf9\uff09 list \u5217\u8868 string \u5b57\u7b26\u4e32 set \u96c6\u5408 queue \u961f\u5217 bitset bit\u7c7b numeric \u6570\u503c\u7b97\u6cd5","title":"c++ STL"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_2","text":"#include<cstdio> #include<cstring> #include<algorithm> #include<iostream> #include<string> #include<vector> #include<stack> #include<bitset> #include<cstdlib> #include<cmath> #include<set> #include<list> #include<deque> #include<map> #include<queue> using namespace std;","title":"\u5e38\u7528\u5934"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_3","text":"//\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c #define MAX(x,y) (((x)>(y)) ? (x) : (y)) #define MIN(x,y) (((x) < (y)) ? (x) : (y)) //\u53d6\u4f59 #define mod(x) ((x)%MOD) //for\u5faa\u73af #define FOR(i,f_start,f_end) for(int i=f_start;i<=f_end;++i) //\u8fd4\u56de\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 #define ARR_SIZE(a) (sizeof((a))/sizeof((a[0]))) //\u521d\u59cb\u5316\u6570\u7ec4 #define MT(x,i) memset(x,i,sizeof(x)) #define MEM(a,b) memset((a),(b),sizeof(a)) //\u7b26\u53f7\u91cd\u5b9a\u4e49 #define LL long long #define ull unsigned long long #define pii pair<int,int> //\u5e38\u89c1\u5e38\u6570 #define PI acos(-1.0) #define eps 1e-12 #define INF 0x3f3f3f3f //int\u6700\u5927\u503c const int INF_INT = 2147483647; const ll INF_LL = 9223372036854775807LL; const ull INF_ULL = 18446744073709551615Ull; const ll P = 92540646808111039LL; const ll maxn = 1e5 + 10, MOD = 1e9 + 7; const int Move[4][2] = {-1,0,1,0,0,1,0,-1}; const int Move_[8][2] = {-1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1};","title":"\u5e38\u7528\u5b8f\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_4","text":"","title":"\u7ed3\u6784\u4f53"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_5","text":"struct InitMember { int first\uff1b double second\uff1b char* third\uff1b float four; };","title":"\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_6","text":"","title":"\u521d\u59cb\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_7","text":"struct InitMember test = {-10,3.141590\uff0c\"method one\"\uff0c0.25}\uff1b","title":"\u65b9\u6cd5\u4e00\uff1a\u5b9a\u4e49\u65f6\u8d4b\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_8","text":"struct InitMember test\uff1b test.first = -10; test.second = 3.141590; test.third = \"method two\"; test.four = 0.25;","title":"\u65b9\u6cd5\u4e8c\uff1a\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#c_2","text":"struct InitMember test = { second\uff1a3.141590, third\uff1a\"method three\", first\uff1a-10, four\uff1a0.25 };","title":"\u65b9\u6cd5\u4e09\uff1a\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503c\uff08C++\u98ce\u683c\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_9","text":"//\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { ... ... ... return true; } } Graph; Graph g(8, false);","title":"\u65b9\u6cd5\u56db\uff1a\u6784\u9020\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_10","text":"typedef struct{int id;int h;} node; bool operator <(const node& a,const node & b){return (a.h)<(b.h);}","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#cnew","text":"","title":"c++new\u7684\u4f7f\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_11","text":"int *x = new int; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740(\u5373\u6307\u9488) int *a = new int(100); //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u6574\u6570\u7684\u521d\u503c\u4e3a100\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740 char *b = new char[10]; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5b57\u7b26\u6570\u7ec4(\u5305\u62ec10\u4e2a\u5143\u7d20)\u7684\u7a7a\u95f4\uff0c\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5730\u5740 float *p=new float (3.14159);//\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5355\u7cbe\u5ea6\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u5b9e\u6570\u7684\u521d\u503c\u4e3a//3.14159\uff0c\u5c06\u8fd4\u56de\u7684\u8be5\u7a7a\u95f4\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u9488\u53d8\u91cfp","title":"\u5e38\u89c4"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_12","text":"//\u5217\u503c\u56fa\u5b9a const int MAXCOL = 3; cin>>row; //\u7533\u8bf7\u4e00\u7ef4\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6210\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488 int *pp_arr = new int[nRow * MAXCOL]; int (*p)[MAXCOL] = (int(*)[MAXCOL])pp_arr; //\u6b64\u65f6p[i][j]\u5c31\u53ef\u6b63\u5e38\u4f7f\u7528","title":"\u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_13","text":"cin>>row>>col; int **p = new int*[row]; for (int i = 0; i < row; i ++) { p[i] = new int[col]; }","title":"\u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#stl","text":"\u53c2\u8003\uff1a https://blog.csdn.net/f_zyj/article/details/51594851 https://download.csdn.net/download/f_zyj/9988653","title":"\u5e38\u7528STL"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_14","text":"","title":"\u7b80\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#stl_1","text":"C++ STL \u7684\u5b9e\u73b0\uff1a \u5bb9\u5668 \u5b9e\u73b0 vector \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u6570\u7ec4 \uff0c\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee list \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u652f\u6301\u5feb\u901f\u589e\u5220 deque \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u4e00\u4e2a\u4e2d\u592e\u63a7\u5236\u5668\u548c\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u8be6\u7ec6\u89c1STL\u6e90\u7801\u5256\u6790P146\uff0c\u652f\u6301\u9996\u5c3e\uff08\u4e2d\u95f4\u4e0d\u80fd\uff09\u5feb\u901f\u589e\u5220\uff0c\u4e5f\u652f\u6301\u968f\u673a\u8bbf\u95ee deque \u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217(double-ended queue)\uff0c\u4e5f\u662f\u5728\u5806\u4e2d\u4fdd\u5b58\u5185\u5bb9\u7684.\u5b83\u7684\u4fdd\u5b58\u5f62\u5f0f\u5982\u4e0b:[\u58061] \u2013> [\u58062] \u2013>[\u58063] \u2013> \u2026\u6bcf\u4e2a\u5806\u4fdd\u5b58\u597d\u51e0\u4e2a\u5143\u7d20,\u7136\u540e\u5806\u548c\u5806\u4e4b\u95f4\u6709\u6307\u9488\u6307\u5411,\u770b\u8d77\u6765\u50cf\u662flist\u548cvector\u7684\u7ed3\u5408\u54c1 stack \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6 queue \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6\uff08stack\u548cqueue\u5176\u5b9e\u662f\u9002\u914d\u5668,\u800c\u4e0d\u53eb\u5bb9\u5668\uff0c\u56e0\u4e3a\u662f\u5bf9\u5bb9\u5668\u7684\u518d\u5c01\u88c5\uff09 priority_queue \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e3avector\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u5806heap\u4e3a\u5904\u7406\u89c4\u5219\u6765\u7ba1\u7406\u5e95\u5c42\u5bb9\u5668\u5b9e\u73b0 set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d hash_set \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d hash_map \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d hash_multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d","title":"STL\u5e95\u5c42\u8bf4\u660e"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#ccf-cstl","text":"\u5c31\u662f\u8981\u5728\u540e\u9762\u7684\u201c>\u201d\u4e4b\u95f4\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5982\u679c\u6709\u591a\u5c42\uff0c\u90a3\u6bcf\u5c42\u90fd\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 map<string,list<string> > user;","title":"CCF \u7f16\u8bd1\u51fa\u9519\u539f\u56e0\uff1a \u4e0d\u5141\u8bb8C++STL\u5bb9\u5668\u5d4c\u5957\uff08\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#algorithm","text":"\u5934\u6587\u4ef6\uff1aalgorithm \u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4ee5\u53ca\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u8bf7\u81ea\u884c\u53bb\u5934\u6587\u4ef6\u627e\u5b9a\u4e49\uff01\uff01\uff01","title":"algorithm"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_15","text":"\u51fd\u6570 \u8bf4\u660e adjacent_find \u67e5\u627e\u4e24\u4e2a\u76f8\u90bb\uff08Adjacent\uff09\u7684\u7b49\u4ef7\uff08Identical\uff09\u5143\u7d20 all_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 any_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6 count \u8fd4\u56de\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u4e2a\u6570 count_if \u8fd4\u56de\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570 equal \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u662f\u5426\u76f8\u7b49 find \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 find_end \u67e5\u627e\u8303\u56f4*A*\u4e2d\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e find_first_of \u67e5\u627e\u8303\u56f4*A*\u4e2d\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u4e2d\u4efb\u4e00\u5143\u7d20\u7b49\u4ef7\u7684\u5143\u7d20\u7684\u4f4d\u7f6e find_if \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 find_if_notC++11 \u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20 for_each \u5bf9\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u6307\u5b9a\u51fd\u6570 mismatch \u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u7b49\u4ef7\u7684\u4f4d\u7f6e none_ofC++11 \u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6 search \u5728\u8303\u56f4*A*\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4*B*\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e search_n \u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8fde\u7eed*n*\u4e2a\u5143\u7d20\u90fd\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e","title":"\u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_16","text":"\u51fd\u6570 \u8bf4\u660e copy \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_backward \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_ifC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 copy_nC++11 \u62f7\u8d1d n \u4e2a\u5143\u7d20\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 fill \u5c06\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c fill_n \u5c06\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c generate \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u8303\u56f4\u7684\u5143\u7d20\u4e2d\uff0c\u7528\u4e8e\u6279\u91cf\u8d4b\u503c\u8303\u56f4\u4e2d\u7684\u5143\u7d20 generate_n \u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u4e2d iter_swap \u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668\uff08Iterator\uff09\u6307\u5411\u7684\u5143\u7d20 moveC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 move_backwardC++11 \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904 random_shuffle \u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e remove \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 remove_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664 remove_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664 replace \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_copy_if \u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c replace_if \u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c reverse \u53cd\u8f6c\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 reverse_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u53cd\u8f6c\u6392\u5e8f\u7ed3\u679c rotate \u5faa\u73af\u79fb\u52a8\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20 rotate_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5faa\u73af\u79fb\u52a8\u7ed3\u679c shuffleC++11 \u7528\u6307\u5b9a\u7684\u968f\u673a\u6570\u5f15\u64ce\u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e swap \u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c swap_ranges \u4ea4\u6362\u4e24\u4e2a\u8303\u56f4\u7684\u5143\u7d20 transform \u5bf9\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u4ee5\u6539\u53d8\u5143\u7d20\u7684\u503c unique \u5220\u9664\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6240\u6709\u8fde\u7eed\u91cd\u590d\u5143\u7d20\uff0c\u4ec5\u4ec5\u7559\u4e0b\u6bcf\u7ec4\u7b49\u503c\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 unique_copy \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u552f\u4e00\u5316\uff08\u53c2\u8003\u4e0a\u8ff0\u7684 unique\uff09\u7ed3\u679c","title":"\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_17","text":"|\u51fd\u6570|\u8bf4\u660e| | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | |is_partitionedC++11| \u68c0\u6d4b\u67d0\u4e2a\u8303\u56f4\u662f\u5426\u6309\u6307\u5b9a\u8c13\u8bcd\uff08Predicate\uff09\u5212\u5206\u8fc7| |partition | \u5c06\u67d0\u4e2a\u8303\u56f4\u5212\u5206\u4e3a\u4e24\u7ec4| |partition_copyC++11 | \u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5212\u5206\u7ed3\u679c| |partition_pointC++11 | \u8fd4\u56de\u88ab\u5212\u5206\u8303\u56f4\u7684\u5212\u5206\u70b9| |stable_partition | \u7a33\u5b9a\u5212\u5206\uff0c\u4e24\u7ec4\u5143\u7d20\u5404\u7ef4\u6301\u76f8\u5bf9\u987a\u5e8f|","title":"\u5212\u5206\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_18","text":"\u51fd\u6570 \u8bf4\u660e is_sortedC++11 \u68c0\u6d4b\u6307\u5b9a\u8303\u56f4\u662f\u5426\u5df2\u6392\u5e8f is_sorted_untilC++11 \u8fd4\u56de\u6700\u5927\u5df2\u6392\u5e8f\u5b50\u8303\u56f4 nth_element \u90e8\u4efd\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8303\u56f4\u6309\u7ed9\u5b9a\u4f4d\u7f6e\u5904\u7684\u5143\u7d20\u5212\u5206 partial_sort \u90e8\u4efd\u6392\u5e8f partial_sort_copy \u62f7\u8d1d\u90e8\u5206\u6392\u5e8f\u7684\u7ed3\u679c sort \u6392\u5e8f stable_sort \u7a33\u5b9a\u6392\u5e8f","title":"\u6392\u5e8f\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_19","text":"\u51fd\u6570 \u8bf4\u660e binary_search \u5224\u65ad\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20 equal_range \u8fd4\u56de\u8303\u56f4\u4e2d\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u8303\u56f4 lower_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 upper_bound \u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668","title":"\u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_20","text":"\u51fd\u6570 \u8bf4\u660e includes \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 inplace_merge \u5c31\u7eea\u5408\u5e76 merge \u5408\u5e76 set_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6 set_intersection \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 set_symmetric_difference \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5bf9\u79f0\u5dee set_union \u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6","title":"\u96c6\u5408\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_21","text":"\u51fd\u6570 \u8bf4\u660e is_heap \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u662f\u5426\u6ee1\u8db3\u5806\u7ed3\u6784 is_heap_untilC++11 \u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u4e2d\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u6700\u5927\u5b50\u8303\u56f4 make_heap \u7528\u7ed9\u5b9a\u8303\u56f4\u6784\u9020\u51fa\u4e00\u4e2a\u5806 pop_heap \u4ece\u4e00\u4e2a\u5806\u4e2d\u5220\u9664\u6700\u5927\u7684\u5143\u7d20 push_heap \u5411\u5806\u4e2d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 sort_heap \u5c06\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u8303\u56f4\u6392\u5e8f","title":"\u5806\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_22","text":"\u51fd\u6570 \u8bf4\u660e is_permutationC++11 \u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684\u4e00\u79cd\u6392\u5e8f lexicographical_compare \u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u7684\u5b57\u5178\u5e8f max \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 max_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20 min \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 min_element \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20 minmaxC++11 \u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 minmax_elementC++11 \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20 next_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0b\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217 prev_permutation \u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0a\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217","title":"\u6700\u5927/\u6700\u5c0f\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#vector","text":"\u5934\u6587\u4ef6\uff1avector \u5728STL\u7684vector\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86vector\uff08\u5411\u91cf\u5bb9\u5668\u6a21\u7248\u7c7b\uff09\uff0cvector\u5bb9\u5668\u4ee5\u8fde\u7eed\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u5c06vector\u770b\u4f5c\u662f\u4ee5\u987a\u5e8f\u7ed3\u6784\u5b9e\u73b0\u7684\u7ebf\u6027\u8868\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u9700\u8981\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u65f6\uff0cvector\u5c06\u4f1a\u662f\u7406\u60f3\u7684\u9009\u62e9\uff0cvector\u53ef\u4ee5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u589e\u957f\u5b58\u50a8\u7a7a\u95f4\u3002 vector\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5206\u914d\u5668\u7684\u7c7b\u578b\uff0c\u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u914d\u5668 \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49vector\u5411\u91cf\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a vector<int> s; // \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684vector\u5bf9\u8c61\uff0c\u5b58\u50a8\u7684\u662fint\u7c7b\u578b\u7684\u5143\u7d20 vector<int> s(n); // \u5b9a\u4e49\u4e00\u4e2a\u542b\u6709n\u4e2aint\u5143\u7d20\u7684vector\u5bf9\u8c61 vector<int> s(first, last); // \u5b9a\u4e49\u4e00\u4e2avector\u5bf9\u8c61\uff0c\u5e76\u4ece\u7531\u8fed\u4ee3\u5668first\u548clast\u5b9a\u4e49\u7684\u5e8f\u5217[first, last)\u4e2d\u590d\u5236\u521d\u503c vector\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s[i] // \u76f4\u63a5\u4ee5\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20 s.front() // \u8fd4\u56de\u9996\u5143\u7d20 s.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 s.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x s.size() // \u8fd4\u56de\u8868\u957f s.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 s.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 s.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 s.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val s.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val s.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 s.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 s.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) s.reserve(n) // \u9884\u5206\u914d\u7f13\u51b2\u7a7a\u95f4\uff0c\u4f7f\u5b58\u50a8\u7a7a\u95f4\u81f3\u5c11\u53ef\u5bb9\u7eb3n\u4e2a\u5143\u7d20 s.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 s.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 s.swap(v) // \u5c06s\u4e0e\u53e6\u4e00\u4e2avector\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 s.assign(first, last) // \u5c06\u5e8f\u5217\u66ff\u6362\u6210\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\uff0c[first, last)\u4e0d\u80fd\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u90e8\u5206 // \u8981\u6ce8\u610f\u7684\u662f\uff0cresize\u64cd\u4f5c\u548cclear\u64cd\u4f5c\u90fd\u662f\u5bf9\u8868\u7684\u6709\u6548\u5143\u7d20\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8\u7f13\u51b2\u7a7a\u95f4\u7684\u5927\u5c0f // \u53e6\u5916\uff0cvector\u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5982\u53cd\u8f6c\u3001\u53d6\u53cd\u7b49\uff0c\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e // vector\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u5e8f\u5217\u4e4b\u95f4\u7684\u6bd4\u8f83\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff08>\u3001<\u3001>=\u3001<=\u3001==\u3001!=\uff09\uff0c\u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u3002 // \u8fd8\u662f\u6765\u770b\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u5427\u2026\u2026 /* * \u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u4e00\u7ec4\u6574\u6570\uff0c\u518d\u5c06\u8fd9\u7ec4\u6574\u6570\u6309\u5012\u5e8f\u8f93\u51fa */ #include <iostream> #include <vector> using namespace std; int main() { vector<int> L; int x; while(cin >> x) { L.push_back(x); } for (int i = L.size() - 1; i >= 0; i--) { cout << L[i] << \" \"; } cout << endl; return 0; }","title":"vector"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#list","text":"\u5934\u6587\u4ef6\uff1alist \u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49list\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a list<int>a{1,2,3} list<int>a(n) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f0 list<int>a(n, m) //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fm list<int>a(first, last) //\u58f0\u660e\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u5143\u7d20\u7684\u521d\u59cb\u503c\u6765\u6e90\u4e8e\u7531\u533a\u95f4\u6240\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff0cfirst\u548clast\u662f\u8fed\u4ee3\u5668 list\u7684\u57fa\u672c\u64cd\u4f5c\uff1a a.begin() // \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.end() // \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668 a.push_front(x) // \u5411\u8868\u5934\u63d2\u5165\u5143\u7d20x a.push_back(x) // \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x a.pop_back() // \u5220\u9664\u8868\u5c3e\u5143\u7d20 a.pop_front() // \u5220\u9664\u8868\u5934\u5143\u7d20 a.size() // \u8fd4\u56de\u8868\u957f a.empty() // \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047 a.resize(n) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.resize(n, val) // \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4 a.clear() // \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20 a.front() // \u8fd4\u56de\u9996\u5143\u7d20 a.back() // \u8fd4\u56de\u5c3e\u5143\u7d20 a.swap(v) // \u5c06a\u4e0e\u53e6\u4e00\u4e2alist\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362 a.merge(b) // \u8c03\u7528\u7ed3\u675f\u540eb\u53d8\u4e3a\u7a7a\uff0ca\u4e2d\u5143\u7d20\u5305\u542b\u539f\u6765a\u548cb\u7684\u5143\u7d20 a.insert(it, val) // \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val a.insert(it, n, val)// \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val a.insert(it, first, last) // \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 a.erase(it) // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 a.erase(first, last)// \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) a.remove(x) // \u5220\u9664\u4e86a\u4e2d\u6240\u6709\u503c\u4e3ax\u7684\u5143\u7d20 a.assign(n, val) // \u5c06a\u4e2d\u7684\u6240\u6709\u5143\u7d20\u66ff\u6362\u6210n\u4e2aval\u5143\u7d20 a.assign(b.begin(), b.end()) //\u5c06a\u53d8\u6210b","title":"list"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#string","text":"\u5934\u6587\u4ef6\uff1astring string\u662fSTL\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5b57\u7b26\u4e32\u3002\u800c\u5728\u4f7f\u7528string\u4e4b\u524d\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u7528 char* \u8868\u793a\u7684\u3002 string\u548c char* \u7684\u533a\u522b string\u662f\u4e00\u4e2a\u7c7b, char* \u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u3002 string\u5c01\u88c5\u4e86 char* \uff0c\u7ba1\u7406\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a char* \u578b\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4string\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u91cc\u9762\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f char* \u3002 string\u4e0d\u7528\u8003\u8651\u5185\u5b58\u91ca\u653e\u548c\u8d8a\u754c\u3002 string\u7ba1\u7406 char* \u6240\u5206\u914d\u7684\u5185\u5b58\u3002\u6bcf\u4e00\u6b21string\u7684\u590d\u5236\uff0c\u53d6\u503c\u90fd\u7531string\u7c7b\u8d1f\u8d23\u7ef4\u62a4\uff0c\u4e0d\u7528\u62c5\u5fc3\u590d\u5236\u8d8a\u754c\u548c\u53d6\u503c\u8d8a\u754c\u7b49\u3002 string\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570 \u67e5\u627efind\uff0c\u62f7\u8d1dcopy\uff0c\u5220\u9664erase\uff0c\u66ff\u6362replace\uff0c\u63d2\u5165insert. \u6784\u9020\u548c\u6790\u6784\u51fd\u6570: \u8868\u8fbe\u5f0f \u6548\u679c string s \u751f\u6210\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 string s(str) copy\u6784\u9020\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2astr\u7684\u590d\u5236\u54c1 string s(str,idx) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(str,idx,len) \u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u4e14\u957f\u5ea6\u6700\u591a\u4e3alen\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(cstr\uff0clen) \u4ee5C-string\u5b57\u7b26\u4e32cstr\u7684\u524dlen\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c string s(num\uff0cc) \u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542bnum\u4e2a\u5b57\u7b26c string s(beg\uff0cend) \u4ee5\u533a\u95f4[beg,end]\u5185\u6240\u6709\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c \u64cd\u4f5c\u51fd\u6570: \u64cd\u4f5c\u51fd\u6570 \u6548\u679c =\uff0cassign() \u8d4b\u4ee5\u65b0\u503c swap() \u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9 +=, append(),push_back() \u6dfb\u52a0\u5b57\u7b26 insert() \u63d2\u5165\u5b57\u7b26 erase() \u5220\u9664\u5b57\u7b26 clear() \u79fb\u9664\u5168\u90e8\u5b57\u7b26 resize() \u6539\u53d8\u5b57\u7b26\u6570\u91cf replace() \u66ff\u6362\u5b57\u7b26 + \u4e32\u8054\u5b57\u7b26\u4e32 ==\uff0c!=\uff0c<\uff0c<=\uff0c>\uff0c>=\uff0ccompare() \u6bd4\u8f83\u5b57\u7b26\u4e32\u5185\u5bb9 size(),length() \u8fd4\u56de\u5b57\u7b26\u6570\u91cf,\u7b49\u6548\u51fd\u6570 max_size() \u8fd4\u56de\u5b57\u7b26\u7684\u6700\u5927\u53ef\u80fd\u4e2a\u6570 empty() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a capacity() \u8fd4\u56de\u91cd\u65b0\u5206\u914d\u4e4b\u524d\u7684\u5b57\u7b26\u5bb9\u91cf reserve() \u4fdd\u7559\u4e00\u5b9a\u91cf\u5185\u5b58\u4ee5\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26 [ ]\uff0cat() \u5b58\u53d6\u5355\u4e00\u5b57\u7b26 \u00bb\uff0cgetline() \u4ecestream\u4e2d\u8bfb\u53d6\u67d0\u503c \u00ab \u5c06\u67d0\u503c\u5199\u5165stream copy() \u5c06\u5185\u5bb9\u590d\u5236\u4e3a\u4e00\u4e2aC-string c_str() \u5c06\u5185\u5bb9\u4ee5C-string\u5f62\u5f0f\u8fd4\u56de data() \u5c06\u5185\u5bb9\u4ee5\u5b57\u7b26\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de substr() \u8fd4\u56de\u67d0\u4e2a\u5b50\u5b57\u7b26\u4e32 begin()\uff0cend() \u63d0\u4f9b\u6b63\u5e38\u7684\u8fed\u4ee3\u5668\u652f\u6301 rbegin()\uff0crend() \u63d0\u4f9b\u9006\u5411\u8fed\u4ee3\u5668\u652f\u6301","title":"string"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#pair","text":"\u5934\u6587\u4ef6\uff1autility STL\u7684utility\u5934\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u5355\u7684\u6a21\u7248\u7c7bpair\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u6216\u5143\u7d20\u5bf9\uff0c\u5e76\u63d0\u4f9b\u4e86\u6309\u7167\u5b57\u5178\u5e8f\u5bf9\u5143\u7d20\u5bf9\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6a21\u7248\u51fd\u6570\u3002 Example\uff0c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5750\u6807\u70b9\uff0c\u5219\u53ef\u4ee5\uff1a pair<double, double> p; cin >> p.first >> p.second; pair\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u9996\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u548c\u5c3e\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002pair\u6a21\u7248\u7c7b\u5bf9\u8c61\u6709\u4e24\u4e2a\u6210\u5458\uff1afirst\u548csecond\uff0c\u5206\u522b\u8868\u793a\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002 \u5728\u5176\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86pair\u4e0a\u7684\u516d\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a<\u3001>\u3001<=\u3001>=\u3001==\u3001!=\uff0c\u5176\u89c4\u5219\u662f\u5148\u6bd4\u8f83first\uff0cfirst\u76f8\u7b49\u65f6\u518d\u6bd4\u8f83second\uff0c\u8fd9\u7b26\u5408\u5927\u591a\u6570\u5e94\u7528\u7684\u903b\u8f91\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u91cd\u8f7d\u8fd9\u51e0\u4e2a\u8fd0\u7b97\u7b26\u6765\u91cd\u65b0\u6307\u5b9a\u81ea\u5df1\u7684\u6bd4\u8f83\u903b\u8f91\u3002 \u9664\u4e86\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2apair\u5bf9\u8c61\u5916\uff0c\u5982\u679c\u9700\u8981\u5373\u65f6\u751f\u6210\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u7248\u51fd\u6570\uff1amake_pair\u3002make_pair\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u5143\u7d20\u5bf9\u7684\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002","title":"pair"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#map","text":"\u5934\u6587\u4ef6\uff1amap \u5728STL\u7684\u5934\u6587\u4ef6\u4e2dmap\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7bmap\u548cmultimap\uff0c\u7528\u6709\u5e8f\u4e8c\u53c9\u6811\u8868\u5b58\u50a8\u7c7b\u578b\u4e3a pair<const Key, T> \u7684\u5143\u7d20\u5bf9\u5e8f\u5217\u3002\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u4ee5const Key\u90e8\u5206\u4f5c\u4e3a\u6807\u8bc6\uff0cmap\u4e2d\u6240\u6709\u5143\u7d20\u7684Key\u503c\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0cmultimap\u5219\u5141\u8bb8\u6709\u91cd\u590d\u7684Key\u503c\u3002 \u53ef\u4ee5\u5c06map\u770b\u4f5c\u662f\u7531Key\u6807\u8bc6\u5143\u7d20\u7684\u5143\u7d20\u96c6\u5408\uff0c\u8fd9\u7c7b\u5bb9\u5668\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u8054\u5bb9\u5668\u201d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aKey\u503c\u6765\u5feb\u901f\u51b3\u5b9a\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u4e8e\u9700\u8981\u6309\u7167Key\u503c\u67e5\u627e\u5143\u7d20\u7684\u5bb9\u5668\u3002 map\u6a21\u7248\u7c7b\u9700\u8981\u56db\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u7b2c\u4e09\u4e2a\u662f\u6bd4\u8f83\u7b97\u5b50\uff0c\u7b2c\u56db\u4e2a\u662f\u5206\u914d\u5668\u7c7b\u578b\u3002\u5176\u4e2d\u952e\u503c\u7c7b\u578b\u548c\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\u3002 \u5b9a\u4e49map\u5bf9\u8c61\u7684\u4ee3\u7801\u793a\u4f8b\uff1a map<string, int> m; map\u7684\u57fa\u672c\u64cd\u4f5c\uff1a /* \u5411map\u4e2d\u63d2\u5165\u5143\u7d20 */ m[key] = value; // [key]\u64cd\u4f5c\u662fmap\u5f88\u6709\u7279\u8272\u7684\u64cd\u4f5c,\u5982\u679c\u5728map\u4e2d\u5b58\u5728\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9, \u5219\u8fd4\u56de\u8be5\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206,\u5426\u5219\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9,\u503c\u57df\u4e3a\u9ed8\u8ba4\u503c\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u8be5\u64cd\u4f5c\u5411map\u4e2d\u63d2\u5165\u5143\u7d20\u5bf9\u6216\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206\u3002 m.insert(make_pair(key, value)); // \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528insert\u65b9\u6cd5\u63d2\u5165\u5143\u7d20\u5bf9,insert\u64cd\u4f5c\u4f1a\u8fd4\u56de\u4e00\u4e2apair,\u5f53map\u4e2d\u6ca1\u6709\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u63d2\u5165\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5176second\u4e3atrue;\u82e5map\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e0ekey\u76f8\u7b49\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,second\u4e3afalse\u3002 /* \u67e5\u627e\u5143\u7d20 */ int i = m[key]; // \u8981\u6ce8\u610f\u7684\u662f,\u5f53\u4e0e\u8be5\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9\u4e0d\u5b58\u5728\u65f6,\u4f1a\u521b\u5efa\u952e\u503c\u4e3akey\uff08\u5f53\u53e6\u4e00\u4e2a\u5143\u7d20\u662f\u6574\u5f62\u65f6\uff0cm[key]=0\uff09\u7684\u5143\u7d20\u5bf9\u3002 map<string, int>::iterator it = m.find(key); // \u5982\u679cmap\u4e2d\u5b58\u5728\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,find\u64cd\u4f5c\u5c06\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5426\u5219,\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8emap\u7684end()(\u53c2\u89c1vector\u4e2d\u63d0\u5230\u7684begin()\u548cend()\u64cd\u4f5c)\u3002 /* \u5220\u9664\u5143\u7d20 */ m.erase(key); // \u5220\u9664\u4e0e\u6307\u5b9akey\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 m.erase(it); // \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5b9a\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668\u3002 /* \u5176\u4ed6\u64cd\u4f5c */ m.size(); // \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 m.empty(); // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a m.clear(); // \u6e05\u7a7a\u6240\u6709\u5143\u7d20","title":"map"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#stack","text":"\u5934\u6587\u4ef6\uff1astack stack\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728stack\u5934\u6587\u4ef6\u4e2d\u3002 stack\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u4f46\u662f\u53ea\u6709\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\uff0c\u5728\u4e0d\u6307\u5b9a\u5bb9\u5668\u7c7b\u578b\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u7684\u7c7b\u578b\u4e3adeque\u3002 \u5b9a\u4e49stack\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b: stack<int> s; stack<string> ss; stack\u7684\u57fa\u672c\u64cd\u4f5c\u6709\uff1a s.push(x); // \u5165\u6808 s.pop(); // \u51fa\u6808 s.top(); // \u8bbf\u95ee\u6808\u9876 s.empty(); // \u5f53\u6808\u7a7a\u65f6\uff0c\u8fd4\u56detrue s.size(); // \u8bbf\u95ee\u6808\u4e2d\u5143\u7d20\u4e2a\u6570","title":"stack"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#queue","text":"\u5934\u6587\u4ef6\uff1aqueue queue\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728queue\u5934\u6587\u4ef6\u4e2d\u3002 queue\u4e0estack\u76f8\u4f3c\uff0cqueue\u6a21\u7248\u7c7b\u4e5f\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7d20\u7c7b\u578b\u65f6\u5fc5\u987b\u7684\uff0c\u5bb9\u5668\u7c7b\u578b\u65f6\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3adeque\u7c7b\u578b\u3002 \u5b9a\u4e49queue\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5fc5\u987b\u5982\u4e0b\uff1a queue<int> q; queue<double> qq; queue\u7684\u57fa\u672c\u64cd\u4f5c\uff1a q.push(x); // \u5165\u961f\u5217 q.pop(); // \u51fa\u961f\u5217 q.front(); // \u8bbf\u95ee\u961f\u9996\u5143\u7d20 q.back(); // \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20 q.empty(); // \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a q.size(); // \u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570","title":"queue"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#set","text":"\u5934\u6587\u4ef6\uff1aset set\u662f\u4e0e\u96c6\u5408\u76f8\u5173\u7684\u5bb9\u5668\uff0cSTL\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86set\u7684\u5b9e\u73b0\uff0c\u5728\u7f16\u7a0b\u9898\u4e2d\u9047\u89c1\u96c6\u5408\u95ee\u9898\u76f4\u63a5\u8c03\u7528\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002 \u5b9a\u4e49set\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a set<int> s; set<double> ss; set\u7684\u57fa\u672c\u64cd\u4f5c\uff1a s.begin() // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() // \u6e05\u9664\u6240\u6709\u5143\u7d20 s.count() // \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570 s.empty() // \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue(\u771f\uff09 s.end() // \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20 s.equal_range() // \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0e\u7ed9\u5b9a\u503c\u76f8\u7b49\u7684\u4e0a\u4e0b\u9650\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668 s.erase() // \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 s.find() // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.get_allocator() // \u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668 s.insert() // \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 s.lower_bound() // \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.key_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570 s.max_size() // \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() // \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() // \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap() // \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound() // \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.value_comp() // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570","title":"set"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#multiset","text":"\u5934\u6587\u4ef6\uff1aset \u5728set\u5934\u6587\u4ef6\u4e2d\uff0c\u8fd8\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u6a21\u7248\u7c7bmultiset\uff08\u591a\u91cd\u96c6\u5408\uff09\u3002\u591a\u91cd\u96c6\u5408\u4e0e\u96c6\u5408\u7684\u533a\u522b\u5728\u4e8e\u96c6\u5408\u4e2d\u4e0d\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u800c\u591a\u91cd\u96c6\u5408\u4e2d\u53ef\u4ee5\u5b58\u5728\u3002 \u5b9a\u4e49multiset\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a multiset<int> s; multiset<double> ss; multiset\u548cset\u7684\u57fa\u672c\u64cd\u4f5c\u76f8\u4f3c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u96c6\u5408\u7684count()\u80fd\u8fd4\u56de0\uff08\u65e0\uff09\u6216\u80051\uff08\u6709\uff09\uff0c\u800c\u591a\u91cd\u96c6\u5408\u662f\u6709\u591a\u5c11\u4e2a\u8fd4\u56de\u591a\u5c11\u4e2a\u3002","title":"multiset"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#bitset","text":"\u5934\u6587\u4ef6\uff1abitset \u5728 STLSTL \u7684\u5934\u6587\u4ef6\u4e2d bitset\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7b bitsetbitset\uff0c\u7528\u6765\u65b9\u4fbf\u5730\u7ba1\u7406\u4e00\u7cfb\u5217\u7684 bitbit \u4f4d\u7684\u7c7b\u3002bitsetbitset \u9664\u4e86\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u4e0b\u6807\u7684 bitbit \u4f4d\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u628a\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570\u6765\u8fdb\u884c\u67d0\u4e9b\u7edf\u8ba1\u3002 bitsetbitset \u6a21\u677f\u7c7b\u9700\u8981\u4e00\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7528\u6765\u660e\u786e\u6307\u5b9a\u542b\u6709\u591a\u5c11\u4f4d\u3002 \u5b9a\u4e49 bitsetbitset \u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\uff1a const int MAXN = 32; bitset<MAXN> bt; // bt \u5305\u62ec MAXN \u4f4d\uff0c\u4e0b\u6807 0 ~ MAXN - 1\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a 0 bitset<MAXN> bt1(0xf); // 0xf \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570 f\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1111\uff0c\u5c06 bt1 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1 bitset<MAXN> bt2(012); // 012 \u8868\u793a\u516b\u8fdb\u5236\u6570 12\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1010\uff0c\u5373\u5c06 bt2 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt3(\"1010\"); // \u5c06 bt3 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010 bitset<MAXN> bt4(s, pos, n);// \u5c06 01 \u5b57\u7b26\u4e32 s \u7684 pos \u4f4d\u5f00\u59cb\u7684 n \u4f4d\u521d\u59cb\u5316 bt4 bitsetbitset \u57fa\u672c\u64cd\u4f5c\uff1a bt.any() // bt \u4e2d\u662f\u5426\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\uff1f bt.none() // bt \u4e2d\u4e0d\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u5417\uff1f bt.count() // bt \u4e2d\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt.size() // bt \u4e2d\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570 bt[pos] // \u8bbf\u95ee bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d bt.test(pos) // bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u662f\u5426\u4e3a 1 bt.set() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 1 bt.set(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a 1 bt.reset() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 0 bt.reset(pos) // \u628a bt \u4e2d\u5728pos\u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a0 bt.flip() // \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u9010\u4f4d\u53d6\u53cd bt.flip(pos) // \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd bt[pos].flip() // \u540c\u4e0a bt.to_ulong() // \u7528 bt \u4e2d\u540c\u6837\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fd4\u56de\u4e00\u4e2a unsigned long \u503c os << bt // \u628a bt \u4e2d\u7684\u4f4d\u96c6\u8f93\u51fa\u5230 os \u6d41","title":"bitset"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_23","text":"","title":"\u56fe\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_24","text":"#include <iostream> #include <vector> #include <set> using namespace std; #define MAX(a, b) ((a) > (b) ? (a) : (b) ) //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1) {} Vertex(int nid) : id(nid) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); } return true; } //\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> BFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); visited.insert(start); while(g.size() > 0) { int id = g[0]; g.erase(g.begin()); rst.push_back(id); for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); visited.insert(id1); } } } return rst; } //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 vector<int> DFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); //cout << \"push \" << start << \" \"; visited.insert(start); rst.push_back(start); bool found; while(g.size() > 0) { int id = g[g.size()-1]; found = false; for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); rst.push_back(id1); visited.insert(id1); //cout << \"push \" << id1 << \" \"; found = true; break; } } if (!found) { int id2 = g[g.size()-1]; rst.push_back(-1 * id2); //cout << \"pop \" << id2 << \" \"; g.pop_back(); } } //cout << endl; return rst; } } Graph; int main() { Graph g(8, false); g.addEdge(0, 1); g.addEdge(0, 3); g.addEdge(1, 2); g.addEdge(3, 4); g.addEdge(3, 5); g.addEdge(4, 5); g.addEdge(4, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(6, 7); vector<int> bv = g.BFS(0); cout << \"\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; for(int j = 0; j < bv.size(); j++) cout << bv[j] << \" \"; cout << endl; cout << \"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a\"; Graph g1(6, false); g1.addEdge(0, 1); g1.addEdge(0, 4); g1.addEdge(0, 5); g1.addEdge(1, 5); g1.addEdge(4, 5); g1.addEdge(5, 2); g1.addEdge(5, 3); g1.addEdge(2, 3); vector<int> route = g1.DFS(0); for(int i = 0; i < route.size(); i++) cout << route[i] << \" \"; cout << endl; char ch; cin >> ch; return 0; }","title":"\u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#2019","text":"#include <algorithm> #include <iostream> #include <vector> #include <queue> #define MAX(a, b) ((a) > (b) ? (a) : (b) ) using namespace std; int n,m; vector<int> inDegreelist,outDegreelist; //\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a typedef struct Graph { vector<Vertex> vertexs; //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f int nVertexs; //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570 bool isDAG; //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); vertexs[id1].outDegree++; vertexs[id2].inDegree++; } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); vertexs[id1].outDegree++; vertexs[id1].inDegree++; vertexs[id2].outDegree++; vertexs[id2].inDegree++; } return true; } } Graph; Graph g; void init(){ cin>>n>>m; g=Graph(n, true); int src,dst; while(m--){ cin>>src>>dst; g.addEdge(src,dst); } vector<Vertex>::iterator it = g.vertexs.begin(); while(it!=g.vertexs.end()){ inDegreelist.push_back(it->inDegree); outDegreelist.push_back(it->outDegree); it++; } } int countin(int n){ return count(inDegreelist.begin(),inDegreelist.end(),n); } int countout(int n){ return count(outDegreelist.begin(),outDegreelist.end(),n); } bool Is_List(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u548c\u4e00\u4e2aoutDegree\u4e3a0\u7684\u5c3e\uff0c\u4e14\u5176\u4f59\u8282\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e3a1; return (countin(0)==1)&&(countout(0)==1)&&(countin(1)==n-1)&&(countout(1)==n-1); } bool Is_Tree(){ //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u4e14\u5176\u4f59\u8282\u70b9inDegree\u5747\u4e3a1\uff0c\u4e14\u4e0d\u662f\u94fe\u8868; return (countin(0)==1)&&(countin(1)==n-1); } bool topologicalSort(){//\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6709\u73af\u65e0\u73af int num=0;//\u8bb0\u5f55\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570 queue<int> q; for(int i=0;i<n;i++){ if(inDegreelist[i]==0){ q.push(i);//\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u961f } } while(!q.empty()){ int u=q.front();//\u53d6\u961f\u9996\u9876\u70b9u q.pop(); for(int i=0;i<g.vertexs[u].connectors.size();i++){ int v=g.vertexs[u].connectors[i];//u\u7684\u540e\u7ee7\u8282\u70b9v inDegreelist[v]--;//v\u7684\u5165\u5ea6\u51cf1 if(inDegreelist[v]==0){//\u9876\u70b9v\u7684\u5165\u5ea6\u51cf\u4e3a0\u5219\u5165\u961f q.push(v); } } g.vertexs[u].connectors.clear();//\u6e05\u7a7au\u7684\u6240\u6709\u51fa\u8fb9 num++;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570\u52a01 } if(num==n) return true;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u4e3an\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u6210\u529f\uff0c\u56fe\u65e0\u73af else return false;//\u5426\u5219\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u56fe\u6709\u73af } int main(){ init(); if(n==0||m==0){ cout<<\"error\"<<endl; } if(Is_List()){ cout<<\"list\"<<endl; } else if(Is_Tree()){ cout<<\"tree\"<<endl; } else if(topologicalSort()){ cout<<\"no ring\"<<endl; } else{ cout<<\"have ring\"<<endl; } return 0; }","title":"\u5e26\u51fa\u5165\u5ea6\u7684 (2019\u63a8\u514d\u8bd5\u9898)"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#uv-","text":"#include<stdio.h> #include<stdlib.h> #ifndef BASE #define BASE #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2 typedef int Status; typedef int bool; #endif #define VertexType char //\u70b9\u7c7b\u578b #define VRType int //\u8fb9\u7c7b\u578b #define maxSize 100 void Visit(VertexType e) { printf(\"%c\", e); } #define MAX_VERTEX_NUM 20 typedef enum{DG, UDG} GraphKind; typedef struct ArcNode{ int adjV; //\u8fb9\u6307\u5411\u7684\u9876\u70b9 VRType weight; //\u6743\u91cd struct ArcNode *next; }ArcNode; //\u8fb9 typedef struct VNode{ VertexType data; ArcNode *firstarc; }VNode, AdjList[MAX_VERTEX_NUM]; //\u9876\u70b9 typedef struct{ GraphKind kind; int vernum,arcnum; AdjList vers; }ALGraph; /*------------------------ |7.14 \u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868| ------------------------*/ Status InitGraph_AL(ALGraph *pG) { //\u521d\u59cb\u5316 int i; pG->arcnum = 0; pG->vernum = 0; for (i=0; i<MAX_VERTEX_NUM; ++i) pG->vers[i].firstarc = NULL; //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc return OK; } int LocateVex_AL(ALGraph G, VertexType e) { //\u5b9a\u4f4d\u503c\u4e3ae\u7684\u5143\u7d20\u4e0b\u6807 int i; for (i=0; i<G.vernum; ++i) { if (G.vers[i].data == e) { return i; } } return -1; } Status CreateDG_AL(ALGraph *pG) { //\u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868 //\u8f93\u5165\u89c4\u5219\uff1a\u9876\u70b9\u6570\u76ee->\u5f27\u7684\u6570\u76ee->\u5404\u9876\u70b9\u7684\u4fe1\u606f->\u5404\u6761\u5f27\u7684\u4fe1\u606f int i,a,b; char tmp[MAX_VERTEX_NUM]; char h,t; ArcNode *p, *q; InitGraph_AL(pG); //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc\uff0c\u5982\u679c\u4e0d\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3aNULL\uff0c\u4f1a\u51fa\u9519 //\u56fe\u7684\u7c7b\u578b pG->kind = DG; //\u9876\u70b9\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->vernum = i; //\u5f27\u7684\u6570\u76ee scanf(\"%d\", &i); if (i<0) return ERROR; pG->arcnum = i; //\u5404\u9876\u70b9\u4fe1\u606f scanf(\"%s\", tmp); for (i=0; i<pG->vernum; ++i) pG->vers[i].data=tmp[i]; //\u5f27\u7684\u4fe1\u606f for (i=0; i<pG->arcnum; ++i) { scanf(\"%s\", tmp); h = tmp[0]; t = tmp[2]; a = LocateVex_AL(*pG, h); b = LocateVex_AL(*pG, t); if (a<0 || b<0) return ERROR; p = (ArcNode *)malloc(sizeof(ArcNode)); if (!p) exit(OVERFLOW); p->adjV=b;p->next=NULL; if (pG->vers[a].firstarc) { //\u5df2\u7ecf\u6709\u8fb9\u4e86 for (q = pG->vers[a].firstarc; q->next; q=q->next) ; //\u627e\u5230\u6700\u540e\u4e00\u6761 q->next = p; } else { //\u7b2c\u4e00\u6761\u8fb9 pG->vers[a].firstarc = p; } } return OK; } /*---------------------------------------------------------------- |7.28 \u6709\u5411\u56fe-\u4eceu-v\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84 | ----------------------------------------------------------------*/ int visit[MAX_VERTEX_NUM]; //\u524d\u9762\u5b9a\u4e49\u4e86 VertexType paths[maxSize][MAX_VERTEX_NUM]; //\u5b58\u653e\u8def\u5f84 int path[MAX_VERTEX_NUM]; //\u8def\u5f84 int pathnum=0; //\u5f53\u524d\u662f\u7b2c\u51e0\u6761\u8def\u5f84 void FindAllPath(ALGraph G, int u,int v,int k) { //u->v\u5f53\u524d\u662f\u7b2ck\u4e2a\u4f4d\u7f6e int i; ArcNode *p; visit[u]=1; //\u8d70\u5230\u4e86u path[k]=u; //\u6dfb\u52a0\u5230\u8def\u5f84->\u4e0b\u6807\u4f4d\u7f6e\u4e3ak\u7684\u7ed3\u70b9\u662fu\uff08\u7b2ck+1\u4e2a\u662fu\uff09 if (u==v) { //\u627e\u5230\u4e86 for (i=0; i<=k; i++) {//\u590d\u5236\u5230paths paths[pathnum][i] = G.vers[path[i]].data; } paths[pathnum][i]='\\0'; //\u7ed3\u675f\u7b26 pathnum++; //\u627e\u4e0b\u4e00\u6761\u8def\u5f84 } else { //u\u7684\u90bb\u8fb9\u5f00\u59cb\u627e for (p=G.vers[u].firstarc; p; p=p->next) { if (visit[p->adjV]==0) FindAllPath(G, p->adjV, v, k+1); //\u53bb\u8fd9\u4e2a\u90bb\u63a5\u70b9\u627e } } // \u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u7ed3\u70b9 // \u6ce8\u610f\uff1a\u56de\u6eaf\u5e94\u8be5\u5199\u5728\u5916\u9762-->\u4e5f\u5c31\u662f\u4e0d\u7ba1\u6709\u6ca1\u6709\u627e\u5230\u90fd\u8981\u56de\u6eaf visit[u]=0; path[k]=0; } int main() { /*7.28 6 11 ABCDEF B,A B,D C,B C,F D,C D,E D,F E,A F,A F,B F,E B->A A->B D->A */ int i,j; int cnt; ALGraph G; char tmp[20]; CreateDG_AL(&G); while (1) { scanf(\"%s\", tmp); //A->B i = LocateVex_AL(G, tmp[0]); j = LocateVex_AL(G, tmp[3]); for (cnt=0; cnt<MAX_VERTEX_NUM; cnt++) visit[cnt]=0; pathnum=0; printf(\"7.28 \u8f93\u51fa\u6240\u6709 %c \u5230 %c \u7684\u8def\u5f84\\n\", tmp[0], tmp[3]); FindAllPath(G, i, j, 0); if (pathnum==0) { printf(\"\\t- \u8d70\u4e0d\u901a\\n\"); } for (i=0; i<pathnum; i++) { printf(\"\\t%d %s\\n\", i+1, paths[i]); } } return 0; }","title":"\u56fe\u7b97\u6cd5\uff1a\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_25","text":"","title":"\u6811\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#_26","text":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; // \u4e2d\u5e8f+\u5148\u5e8f=>\u4e8c\u53c9\u6811 int mid_pr_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u5148\u5e8f\u904d\u5386 { // \u8fd9\u91cc\u4e0d\u80fd\u7b49\u4e8e\uff0c\u56e0\u4e3a\u5047\u8bbe\uff1alen==1\uff0c\u5219la==ra\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u6709\u4e00\u4e2a rt \u7684\uff0c\u5374\u6ca1\u88ab\u5efa\u7acb if(la>ra) return 0; int rt=pr[lb]; // \u56e0\u4e3a\u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u4e2d\u5e8f+\u540e\u5e8f=>\u4e8c\u53c9\u6811 int mid_po_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386 lb,rb\uff1a\u8868\u793a\u540e\u5e8f\u904d\u5386 { if(la>ra) return 0; int rt=po[rb]; // \u56e0\u4e3a\u540e\u5e8f\u904d\u5386\u6700\u540e\u4e00\u4e2a\u662f\u6839\u8282\u70b9 int p1=la,p2; while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9 p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09 return rt; } // \u6c42\u6811\u9ad8 int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } // \u5c42\u5e8f\u904d\u5386 void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); // \u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01 } // \u5148\u5e8f\u904d\u5386 void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } // \u4e2d\u5e8f\u904d\u5386 void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } // \u540e\u5e8f\u904d\u5386 void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // \u540e\u5e8f\u7ed3\u70b9 // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); // \u5148\u5e8f\u7ed3\u70b9 for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); // \u4e2d\u5e8f\u7ed3\u70b9 int rt=mid_po_build(0,n-1,0,n-1); // \u4e2d+\u540e\uff0c\u8fd4\u56de\u6839\u8282\u70b9 // int rt=mid_pr_build(0,n-1,0,n-1); // \u4e2d+\u5148\uff0c\u8fd4\u56de\u6839\u8282\u70b9 bfs(rt); // \u5c42\u5e8f\u904d\u5386 // preT(rt); // \u5148\u5e8f\u904d\u5386 // puts(\"\"); // postT(rt); // \u540e\u5e8f\u904d\u5386 // puts(\"\"); // midT(rt); // \u4e2d\u5e8f\u904d\u5386 // puts(\"\"); } return 0; }","title":"\u6ce8\u91ca\u7248"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#val-as-index1-n","text":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; int mid_pr_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=pr[lb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); return rt; } int mid_po_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=po[rb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); return rt; } int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); } void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); int rt=mid_po_build(0,n-1,0,n-1); // int rt=mid_pr_build(0,n-1,0,n-1); bfs(rt); // preT(rt); // postT(rt); // midT(rt); } return 0; }","title":"\u7b80\u5316\u7248\uff08Val As Index\uff0c\u82e5\u6570\u636e\u4e0d\u57281-N\u5185\uff0c\u5219\u53ef\u80fd\u8d8a\u754c\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E5%B8%B8%E7%94%A8STL/#val-not-as-index-val","text":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a) #define ssclr(ss) ss.clear(), ss.str(\"\") #define INF 0x3f3f3f3f #define MOD 1000000007 using namespace std; typedef long long ll; const int maxn=5e4+1000; int f; int pre[maxn], in[maxn]; struct node { int l,r,d; }T[maxn]; int create(int l1,int r1,int l2,int r2) // in pre { if(l2>r2) return -1; int rt=l2; int p1=l1,p2; while(in[p1]!=pre[rt]) p1++; p2=p1-l1; T[rt].d=pre[rt]; T[rt].l=create(l1,p1-1,l2+1,l2+p2); T[rt].r=create(p1+1,r1,l2+p2+1,r2); return rt; } void postT(int rt) { if(rt==-1 || !f) return; postT(T[rt].l); postT(T[rt].r); if(f) f=0, printf(\"%d\\n\",T[rt].d); } int main() { int n; scanf(\"%d\",&n); for(int i=0;i<n;i++) scanf(\"%d\",&pre[i]); for(int i=0;i<n;i++) scanf(\"%d\",&in[i]); int rt=create(0,n-1,0,n-1); f=1, postT(rt); return 0; }","title":"\u7b80\u5316\u7248\uff08Val Not As Index\uff0c\u53ef\u4ee5\u5b58\u4efb\u610f\u7684 Val\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/","text":"\u7ecf\u5178\u9762\u8bd5\u5408\u96c6 \u00b6 \u6a21\u677f \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 \u7b97\u6cd5 \u00b6 \u7b97\u6cd5 - Algorithms \u6392\u5e8f\u7b97\u6cd5\uff1a\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f \u641c\u7d22\u7b97\u6cd5\uff1a\u56de\u6eaf\u3001\u9012\u5f52\u3001\u526a\u679d\u6280\u5de7 \u56fe\u8bba\uff1a\u6700\u77ed\u8def\u3001\u6700\u5c0f\u751f\u6210\u6811\u3001\u7f51\u7edc\u6d41\u5efa\u6a21 \u52a8\u6001\u89c4\u5212\uff1a\u80cc\u5305\u95ee\u9898\u3001\u6700\u957f\u5b50\u5e8f\u5217\u3001\u8ba1\u6570\u95ee\u9898 \u57fa\u7840\u6280\u5de7\uff1a\u5206\u6cbb\u3001\u500d\u589e\u3001\u4e8c\u5206\u3001\u8d2a\u5fc3 \u6570\u636e\u7ed3\u6784 - Data Structures \u6570\u7ec4\u4e0e\u94fe\u8868\uff1a\u5355 / \u53cc\u5411\u94fe\u8868\u3001\u8df3\u821e\u94fe \u6808\u4e0e\u961f\u5217 \u6811\u4e0e\u56fe\uff1a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u5e76\u67e5\u96c6 \u54c8\u5e0c\u8868 \u5806\uff1a\u5927 / \u5c0f\u6839\u5806\u3001\u53ef\u5e76\u5806 \u5b57\u7b26\u4e32\uff1a\u5b57\u5178\u6811\u3001\u540e\u7f00\u6811 \u6392\u5e8f \u00b6 \u4e00\u3001\u5feb\u901f\u6392\u5e8f \u00b6 \u4e8c\u3001\u5806\u6392 \u00b6 \u4e09\u3001\u63d2\u5165\u6392\u5e8f \u00b6 leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u00b6 //test4 //C++ upper_bound() lower_bound() //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 #include <iostream> #include <algorithm> #include <vector> #include <unordered_map> #include <string> #include <deque> using namespace std ; int main () { vector < int > nums = { 1 , 4 , 2 , 3 , 5 , 8 }; int k = 5 ; vector < double > ans ; int left = 0 ; int right = k ; deque < long long > window ; for ( int i = 0 ; i < k ; i ++ ){ //begin() refer to the first element //end() refer to the pass-the-end element //deque\u4e3a\u7a7a\u65f6 end()\u548cbegin()\u4e00\u6837 window.end()-window.begin()=0 //deque\u4e0d\u4e3a\u7a7a\u65f6 \u4e3a\u957f\u5ea6 //upper_bound\u6ca1\u627e\u5230\u65f6 \u5c31\u662f\u5728wi ndow.end()\u7684\u4f4d\u7f6e \u540c\u65f6\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u548cwindow.end()\u4e00\u6837\u4e3a\u7a7a \u53ea\u6709\u5728\u63d2\u5165\u64cd\u4f5c\u540e\u624d\u6709\u503c deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); cout << ( window . end () - window . begin ()) << \" \" <<* ( insert_p ) << \" \" << ( insert_p - window . begin ()) << endl ; window . insert ( insert_p , nums [ i ]); } ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } cout << ans [ 0 ] << endl ; return 0 ; } \u56db\u3001\u5f52\u5e76\u6392\u5e8f \u00b6 \u4e94\u3001\u5192\u6ce1\u6392\u5e8f \u00b6 \u516d\u3001\u9009\u62e9\u6392\u5e8f \u00b6 \u641c\u7d22 \u00b6 \u4e00\u3001DFS \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.DFS+\u56de\u6eaf+\u526a\u679d \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.DFS+\u6811 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 3.DFS+\u7f51\u683c\u578b \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.DFS+\u56fe \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 46. \u5168\u6392\u5217 \ud83e\udde1&&\ud83d\udca5 \u2160 1 78. \u5b50\u96c6 \ud83e\udde1&&\ud83d\udca5 \u2160 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 200. \u5c9b\u5c7f\u6570\u91cf \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 \u2162 1 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \ud83e\udde1 \u2162 1 \u56de\u6eaf\u6a21\u677f\u9898\uff1a \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 vector < string > permutation ( string s ) { vector < string > ans ; dfs ( s , ans , 0 ); return ans ; } void dfs ( string s , vector < string >& ans , int depth ){ if ( depth >= s . size () -1 ) { ans . push_back ( s ); return ; } unordered_set < char > used ; for ( int i = depth ; i < s . size (); ++ i ){ if ( used . find ( s [ i ]) != used . end ()) continue ; used . insert ( s [ i ]); swap ( s [ depth ], s [ i ]); dfs ( s , ans , depth + 1 ); swap ( s [ i ], s [ depth ]); } } 46. \u5168\u6392\u5217 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 //\u6ce8\u91ca\u90e8\u5206\u662f\u770b\u9898\u89e3\u5199\u7684 //\u672a\u6ce8\u91ca\u90e8\u5206\u662f\u6309\u7167 \u5251\u6307offer38.\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u90a3\u9898\u6a21\u677f\u5199\u7684.. //\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a vector < vector < int >> permute ( vector < int >& nums ) { vector < vector < int > > ans ; // vector<int> res; // vector<int> used(nums.size(), 0); // helper(ans, nums, res, used); helper ( ans , nums , 0 ); return ans ; } // void helper(vector<vector<int> >& ans,vector<int>& nums, vector<int>& res, vector<int>& used){ // if(res.size()==nums.size()){ // ans.push_back(res); // return; // } // for(int i=0;i<nums.size();++i){ // if(used[i]!=0) continue; // else{ // res.push_back(nums[i]); // used[i] = 1; // helper(ans, nums, res, used); // res.pop_back(); // used[i]=0; // } // } // } void helper ( vector < vector < int > >& ans , vector < int >& nums , int depth ){ if ( depth == nums . size () -1 ){ ans . push_back ( nums ); return ; } unordered_set < int > used ; for ( int i = depth ; i < nums . size (); ++ i ){ if ( used . find ( nums [ i ]) != used . end ()) continue ; used . insert ( nums [ i ]); swap ( nums [ depth ], nums [ i ]); helper ( ans , nums , depth + 1 ); swap ( nums [ depth ], nums [ i ]); } } \u7f51\u683c DFS \u904d\u5386\u7684\u57fa\u672c\u6846\u67b6 \u53c2\u8003 void dfs ( vector < vector < int > >& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 dfs ( grid , r + 1 , c ); dfs ( grid , r -1 , c ); dfs ( grid , r , c -1 ); dfs ( grid , r , c + 1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int > >& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size ; } 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef int maxAreaOfIsland ( vector < vector < int >>& grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . size (); ++ i ){ for ( int j = 0 ; j < grid [ 0 ]. size (); ++ j ){ if ( grid [ i ][ j ] == 1 ){ int r = dfs ( grid , i , j ); ans = max ( ans , r ); } } } return ans ; } int dfs ( vector < vector < int >>& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return 0 ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return 0 ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 return 1 + dfs ( grid , r + 1 , c ) + dfs ( grid , r -1 , c ) + dfs ( grid , r , c + 1 ) + dfs ( grid , r , c -1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int >>& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size (); } \u4e8c\u3001BFS \u00b6 \u5c42\u5e8f\u904d\u5386\uff1a \u300cBFS \u904d\u5386\u300d\u3001\u300c\u5c42\u5e8f\u904d\u5386\u300d\u3001\u300c\u6700\u77ed\u8def\u5f84\u300d\u5b9e\u9645\u4e0a\u662f\u9012\u8fdb\u7684\u5173\u7cfb\u3002\u5728 BFS \u904d\u5386\u7684\u57fa\u7840\u4e0a\u533a\u5206\u904d\u5386\u7684\u6bcf\u4e00\u5c42\uff0c\u5c31\u5f97\u5230\u4e86\u5c42\u5e8f\u904d\u5386\u3002\u5728\u5c42\u5e8f\u904d\u5386\u7684\u57fa\u7840\u4e0a\u8bb0\u5f55\u5c42\u6570\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u77ed\u8def\u5f84\u3002 \u4e09\u3001\u4e8c\u5206\u67e5\u627e \u00b6 \u4e00\u822c\u7528\u4e8e\u6709\u5e8f\u6570\u7ec4\u6216BST, \u4e8c\u5206\u67e5\u627e\u6548\u7387\u5f88\u9ad8O(logn) \u52a8\u6001\u89c4\u5212 \u00b6 \u5927\u591a\u6570\u9012\u5f52\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u91cd\u5199 \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u80cc\u5305\u95ee\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u52a8\u6001\u89c4\u5212\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83d\udc9a\ud83e\udde1 && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 72. \u7f16\u8f91\u8ddd\u79bb \ud83e\udde1 && \ud83d\udca5 \u2160 1 221. \u6700\u5927\u6b63\u65b9\u5f62 \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \ud83d\udc9a && \ud83d\udc8c \u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 72. \u7f16\u8f91\u8ddd\u79bb \u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 //\u4f7f\u7528dpTable //\u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a //\u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b int minDistance ( string word1 , string word2 ) { int m = word1 . size (); int n = word2 . size (); vector < vector < int > > dp ( m + 1 , vector < int > ( n + 1 )); for ( int i = 0 ; i <= m ; ++ i ) dp [ i ][ 0 ] = i ; for ( int j = 0 ; j <= n ; ++ j ) dp [ 0 ][ j ] = j ; for ( int i = 1 ; i <= m ; ++ i ){ for ( int j = 1 ; j <= n ; ++ j ){ //\u5f53\u524d\u5b57\u7b26\u4e32\u76f8\u7b49 \u5219\u53cc\u6307\u9488\u90fd\u524d\u79fb if ( word1 [ i -1 ] == word2 [ j -1 ]) dp [ i ][ j ] = dp [ i -1 ][ j -1 ]; else dp [ i ][ j ] = min ( min ( dp [ i -1 ][ j ] + 1 , dp [ i ][ j -1 ] + 1 ), dp [ i -1 ][ j -1 ] + 1 ); } } return dp [ m ][ n ]; } \u53c2\u8003 \u57fa\u7840\u6280\u5de7 \u00b6 \u4e8c\u5206 \u00b6 \u53cc\u6307\u9488 \u00b6 \u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57 \u6ed1\u52a8\u7a97\u53e3 \u00b6 \u603b\u7ed3\uff1a \u6ed1\u52a8\u7a97\u53e3+\u53cc\u6307\u9488+hash\u8868 \uff08\u6216\u8005unordered_set\uff09\u5e38\u5e38\u7ed3\u5408\u5728\u4e00\u8d77 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 \u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u7b80\u5355 && \u540c3 2 \u221a \u4e8c\u6b21AC 8min 2021-3-11 \u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 2 \u770b\u89e3\u7b54 2021-3-11 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 1 \u770b\u89e3\u7b54 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 && HOT100 2 \u221a \u4e00\u6b21AC 10min 2021-3-11 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u4e2d\u7b49 && HOT100 2 \u770b\u89e3\u7b54 2021-3-11 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 424. \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26 \u4e2d\u7b49 1 480. \u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u56f0\u96be 1 \u770b\u89e3\u7b54 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7b80\u5355 2 ac 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 t \u3002\u8fd4\u56de s \u4e2d\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c s \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u6ce8\u610f\uff1a\u5982\u679c s \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"ADOBECODEBANC\", t = \"ABC\" \u8f93\u51fa\uff1a\"BANC\" \u6ed1\u52a8\u7a97\u53e3\u601d\u60f3\uff1a \u603b\u7ed3(Conclusion) \u2460\u7a97\u53e3\u7531\u4e24\u4e2a\u6307\u9488\u6784\u6210\uff0c\u4e00\u4e2a\u5de6\u6307\u9488left\uff0c\u4e00\u4e2a\u53f3\u6307\u9488right\uff0c\u7136\u540e[left,right]\u8868\u793a\u7684\u7d22\u5f15\u8303\u56f4\u662f\u4e00\u4e2a\u7a97\u53e3\u4e86\u3002 \u2461\u53f3\u6307\u9488right\u7684\u529f\u80fd\u662f\u7528\u6765\u6269\u5c55\u7a97\u53e3\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u6ca1\u6709\u8fbe\u5230\u9898\u76ee\u8981\u6c42\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u79fb\u52a8\u53f3\u6307\u9488right\u76f4\u5230\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u7b2c\u4e00\u6b21\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e3a\u6b62\u3002 \u2462\u5de6\u6307\u9488left\u7684\u529f\u80fd\u662f\u7528\u6765\u7f29\u5c0f\u7a97\u53e3\u7684\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u5df2\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u6216\u591a\u4e8e\u9898\u76ee\u6761\u4ef6\u65f6\uff08\u7a97\u53e3\u6ea2\u51fa\uff09\uff0c\u6211\u4eec\u7f29\u5c0f\u7a97\u53e3\uff0c\u4e5f\u5c31\u662f\u5de6\u6307\u9488left\u9700\u8981\u53f3\u79fb\u76f4\u5230\u7a97\u53e3\u6761\u4ef6\u4e0d\u6ee1\u8db3\u4e3a\u6b62\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5e76\u66f4\u65b0\u76ee\u524d\u4e3a\u6b62\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7a97\u53e3\u8bb0\u5f55\u3002\u4e4b\u540e\uff0c\u518d\u6b21\u6269\u5c55\u53f3\u6307\u9488right\uff0c\u4f7f\u5f97\u7a97\u53e3\u6ee1\u8db3\u9898\u76ee\u7684\u6761\u4ef6\u3002 \u6ce8\uff1a\u6ed1\u52a8\u7a97\u53e3\u7528\u6765\u5904\u7406\u8fde\u7eed\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684\u8fde\u7eed\u533a\u95f4\u7684\u6027\u8d28\uff08\u957f\u5ea6\u7b49\uff09\u95ee\u9898\u7684\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u8d77\u59cb\u4e8e\u539f\u70b9\uff0c\u5e76\u4e00\u524d\u4e00\u540e\u5411\u7ec8\u70b9\u524d\u8fdb\u3002 \u6846\u67b6 func movingWindow () { /* 1. \u521d\u59cb\u5316\u7a97\u53e3\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bb0\u5f55\u7a97\u53e3\u5185\u7684\u4fe1\u606f */ first , last := 0 , 0 // \u7a97\u53e3\u7684\u5de6\u53f3\u8fb9\u754c for last < len ( s ) { /* 2. \u628a last \u6307\u5411\u7684\u5143\u7d20\u52a0\u5165\u7a97\u53e3 */ for first < len ( s ) && /* 3. \u5224\u65ad\u5f53\u524d\u7a97\u53e3\u5185\u7684\u5143\u7d20\u662f\u5426\u7b26\u5408\u6761\u4ef6 */ { /* 4.a \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5c0f\u503c\u7684\u4ee3\u7801 */ /* 5. \u628a first \u6307\u5411\u7684\u5143\u7d20\u79fb\u51fa\u7a97\u53e3 */ first ++ } /* 4.b \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5927\u503c\u7684\u4ee3\u7801 */ last ++ } } leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528multiset\u6765\u6c42\u51fa\u4e2d\u4f4d\u6570\uff08\u56e0\u4e3amultiset\u5e95\u5c42\u4f7f\u7528\u7684\u662f\u4e8c\u53c9\u641c\u7d22\u6811BST\u7684\u6570\u636e\u7ed3\u6784\uff0c\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u5229\u7528multiset\u7684\u81ea\u6392\u5e8f\u529f\u80fd\u53ef\u4ee5\u5f88\u5feb\u6c42\u51fa\u4e2d\u4f4d\u6570\u3002multiset\u4f5c\u4e3a\u5927\u5c0f\u4e3ak\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u6bcf\u6b21\u63d2\u5165\u65b0\u63d2\u5165\u5143\u7d20\uff0c\u9700\u5c06\u7a97\u53e3\u79fb\u52a8\u3002\u82e5\u65b0\u63d2\u5165\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u5219\u9700\u8981\u5c06mid\u5de6\u79fb\uff08\u56e0\u4e3a\u65b0\u63d2\u5165\u7684\u5143\u7d20\u6bd4\u4e2d\u4f4d\u6570\u5c0f\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u80af\u5b9a\u4f1a\u88ab\u62c9\u4f4e\uff09\uff1b\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u82e5\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5c06mid\u53f3\u79fb\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5220\u9664\u5143\u7d20\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528erase\u6839\u636evalue\u6765\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5220\u9664\u591a\u4e2a\u503c\u4e00\u6837\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u7528lower_bound\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u76ee\u6807\u503c\u7684\u6570\uff0c\u901a\u8fc7iterator\u6765\u5220\u6389\u786e\u5b9a\u7684\u4e00\u4e2a\u6570\u5b57\u3002 \u5173\u4e8enext()\u4e0eprev()\u51fd\u6570\u7684\u89e3\u91ca\uff1a Here //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 class Solution { public : vector < double > medianSlidingWindow ( vector < int >& nums , int k ) { vector < double > ans ; if ( nums . size () == 0 ) return ans ; int left = 0 ; int right = k ; //\u7531\u4e8e\u53ef\u80fdtestcase [2147483647,2147483647] k=2 //\u53d1\u751f\u6ea2\u51fa \u6240\u4ee5window\u8bbe\u7f6e\u4e3along long\u7c7b\u578b deque < long long > window ; //\u63d2\u5165\u6392\u5e8f //\u901a\u8fc7upper_bound lower_bound(\u5e95\u5c42\u90fd\u662f\u4e8c\u5206\u6cd5\u5b9e\u73b0)\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668 //lower_bound\u51c6\u786e\u627e\u5230\u8be5\u5220\u7684\u8282\u70b9 upper_bound\u627e\u5230\u8be5\u63d2\u5165\u7684\u8282\u70b9 for ( int i = 0 ; i < k ; i ++ ){ deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); //deque\u7684insert\u8981\u4f20\u8fed\u4ee3\u5668\u548cval\u3002 window . insert ( insert_p , nums [ i ]); } //ans\u4e3adouble\u7c7b\u578b \u9664\u4ee52.0\u4f7flong long\u53d8\u4e3adouble ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); //erase\u4f1a\u5220\u9664\u591a\u4e2a\u540c\u503c\u7684 \u6240\u4ee5\u5fc5\u987b\u4f20\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } return ans ; } }; \u524d\u7f00\u548c \u00b6 \u53c2\u8003 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 \u5206\u6cbb \u00b6 \u8d2a\u5fc3 \u00b6 \u5355\u8c03\u6808 \u00b6 \u601d\u7ef4\u9898 \u00b6 \u77e9\u9635\u76f8\u5173 \u00b6 \u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 54. \u87ba\u65cb\u77e9\u9635 \u4e2d\u7b49 2 \u221a \u4e00\u6b21ac 10min 2021-3-15 59. \u87ba\u65cb\u77e9\u9635 II \u7b80\u5355 2 \u221a \u4e00\u6b21ac 8min 2021-3-16 \u9762\u8bd5\u9898 01.07. \u65cb\u8f6c\u77e9\u9635 \u00b6 \u7ed9\u4f60\u4e00\u5e45\u7531 N \u00d7 N \u77e9\u9635\u8868\u793a\u7684\u56fe\u50cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u3002\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\uff0c\u5c06\u56fe\u50cf\u65cb\u8f6c 90 \u5ea6\u3002 \u4e0d\u5360\u7528\u989d\u5916\u5185\u5b58\u7a7a\u95f4\u80fd\u5426\u505a\u5230\uff1f \u65cb\u8f6c270\u00b0\u662f\u8f6c\u7f6e\u3002\u65cb\u8f6c180\u00b0\u662f\u5148\u4e0a\u4e0b\u5bf9\u79f0\uff0c\u518d\u5de6\u53f3\u5bf9\u79f0\u3002\u65cb\u8f6c90\u00b0\u662f\u5148\u8f6c\u7f6e,\u7136\u540e\u5de6\u53f3\u5bf9\u79f0\u8fc7\u53bb\u3002 \u76f8\u540c\u9898\uff1a 48. \u65cb\u8f6c\u56fe\u50cf \u9762\u8bd5\u9898 01.08. \u96f6\u77e9\u9635 \u00b6 \u7f16\u5199\u4e00\u79cd\u7b97\u6cd5\uff0c\u82e5M \u00d7 N\u77e9\u9635\u4e2d\u67d0\u4e2a\u5143\u7d20\u4e3a0\uff0c\u5219\u5c06\u5176\u6240\u5728\u7684\u884c\u4e0e\u5217\u6e05\u96f6\u3002 54. \u87ba\u65cb\u77e9\u9635 \u00b6 \u7ed9\u4f60\u4e00\u4e2a m \u884c n \u5217\u7684\u77e9\u9635 matrix \uff0c\u8bf7\u6309\u7167 \u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f \uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 221. \u6700\u5927\u6b63\u65b9\u5f62 \u00b6 \u5728\u4e00\u4e2a\u7531 '0' \u548c '1' \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b '1' \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002 \u6570\u5b66\u95ee\u9898 \u00b6 \u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 \u00b6 470. \u7528 Rand7() \u5b9e\u73b0 Rand10() \u00b6 (randx()-1)Y + randx() \u80fd\u968f\u673a\u751f\u6210[1,x*Y]\u5185\u7684\u968f\u673a\u6570 \u4f4d\u8fd0\u7b97 \u00b6 \u4f4d\u8fd0\u7b97\u77e5\u8bc6\u70b9\uff1a \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II \u2b50 \ud83e\udde1 && \ud83d\udc8c \u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \ud83d\udc9a && \ud83d\udc8c 78. \u5b50\u96c6 \ud83e\udde1 && \ud83d\udca5 2\u2611\ufe0f ac 5min 2021-3-19 169. \u591a\u6570\u5143\u7d20 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u2705 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 1min 2021-3-19 338. \u6bd4\u7279\u4f4d\u8ba1\u6570 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 461. \u6c49\u660e\u8ddd\u79bb \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 \u8bbe\u8ba1\u9898 \u00b6 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 146. LRU \u7f13\u5b58\u673a\u5236 \ud83d\udc34\u2b50 \ud83e\udde1 && \ud83d\udca5 1 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \ud83e\udde1 && \ud83d\udca5 1 \u6570\u636e\u7ed3\u6784 \u00b6 1.\u6570\u7ec4 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Nsum \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5Easy && TOP\u2705\ud83d\udc34\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 2.\u94fe\u8868 \u00b6 \u603b\u7ed3\uff1a 1.\u4e86\u89e3\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9a\u4e49\u94fe\u8868 2.\u5b66\u4f1a\u4f7f\u7528dummyHead \u8fd9\u6837\u80fd\u5f88\u597d\u5904\u7406\u8fb9\u754c\u60c5\u51b5\u3002\u5220\u9664\u94fe\u8868\u8282\u70b9\u7684\u9898\u578b\u4e2d\u5c24\u4e3a\u5178\u578b\u5982\uff1a19\u3001203 3.**\u5220\u9664\u94fe\u8868\u8282\u70b9**\u7c7b\u578b\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u8bb0\u5f97\u91ca\u653e\u8282\u70b9\u5185\u5b58\u3002\u5426\u5219\u4f1a\u6709\u5185\u5b58\u6cc4\u6f0f\u3002 \u598282\u300183 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u53cd\u8f6c\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u56de\u6587\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u94fe\u8868\u8282\u70b9\u5220\u9664 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.\u5408\u5e76\u5347\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 5.\u6392\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 6.\u73af\u5f62\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 7.\u94fe\u8868\u6570\u636e\u7ed3\u6784 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 8.\u94fe\u8868\u8fd0\u7b97 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 Easy && TOP\u2705\ud83d\udc34 \u2160 2 \uff08\u8fed\u4ee3\u4e0e\u9012\u5f52\uff09 61. \u65cb\u8f6c\u94fe\u8868 Medium \u2160 1 ac(\u8fb9\u754c\u8c03\u8bd5\u4e86\u4e00\u4f1a) 15min 2021-3-18 92. \u53cd\u8f6c\u94fe\u8868 II Medium \u2160 1\u2611\ufe0f ac 30min 2021-3-18 234. \u56de\u6587\u94fe\u8868 Easy && HOT100 \u2161 2\u2611\ufe0f ac 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 Easy && HOT100 \u2162 2\u2611\ufe0f ac 5min 2021-3-18 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II Med \u2162 1\u2611\ufe0f ac 10min 2021-3-18 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 Easy \u2162 1\u2611\ufe0f ac 3min 2021-3-18 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 Easy && HOT100 \u2163 2\u2611\ufe0f ac 5min 2021-3-10 23. \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 \u2b50 Hard && HOT100 \u2163 1 ac 148. \u6392\u5e8f\u94fe\u8868 \u2b50 Medium && HOT100 \u2164 1 \u770b\u89e3\u7b54 ... ... 141. \u73af\u5f62\u94fe\u8868 Easy && HOT100 \u2165 2\u2611\ufe0f ac 2min 2021-3-18 142. \u73af\u5f62\u94fe\u8868 II Medium && HOT100 \u2165 2\u2611\ufe0f ac 5min 160. \u76f8\u4ea4\u94fe\u8868 (\u540coffer52) Easy && HOT100 \u2165 2\u2611\ufe0f ac \u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u2b50 \u5251\u6307offer \u2166 1 \u770b\u89e3\u7b54 2. \u4e24\u6570\u76f8\u52a0 \u2b50 Med && HOT100 \u2167 1 ac 86. \u5206\u9694\u94fe\u8868 Med \u2167 1 ac 20min 2021-3-18 3.\u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u80fd\u52a8\u5f52\u7684\u522b\u56de\u6eaf\uff0c\u5bb9\u6613\u8d85\u65f6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u5b57\u7b26\u4e32+\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.\u56de\u6587\u5b50\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u5b57\u7b26\u4e32+\u6808 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u5b57\u7b26\u4e32+\u56de\u6eaf\uff08\u7ec4\u5408\u53ca\u5207\u5206\u95ee\u9898\uff09 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u5b57\u7b26\u4e32+\u5206\u7c7b\u8ba8\u8bba \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 ... ... 72. \u7f16\u8f91\u8ddd\u79bb Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 Medium \u2160 1 \u56de\u6eaf\u8d85\u65f6... 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 Medium \u2161 2\u2611\ufe0f \u4e00\u6b21ac 10min 131. \u5206\u5272\u56de\u6587\u4e32 Hard \u2161 1 \u770b\u89e3\u7b54 132. \u5206\u5272\u56de\u6587\u4e32 II Hard && \u51fa\u8fc7 \u2160&&\u2161 1 \u4e00\u6b21ac 647. \u56de\u6587\u5b50\u4e32 Medium \u2161 1 \u4e00\u6b21ac \u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 Medium \u2164 1 ac 45min 394. \u5b57\u7b26\u4e32\u89e3\u7801 Medium \u2162&&\u2164 1 \u770b\u89e3\u7b54 \u5b57\u7b26\u4e32\u6392\u5e8f \u5355\u8bcd\u67e5\u627e\u6811 \u5b50\u5b57\u7b26\u4e32\u67e5\u627e \u6b63\u5219\u8868\u8fbe\u5f0f \u6570\u636e\u538b\u7f29 \u5b57\u5178\u6811 \u524d\u7f00(\u540e\u7f00)\u6811 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c KMP 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u7c7b\u4f3c\u9898\uff1a \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c \u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5 s2 \u662f\u5426\u4e3a s1 \u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c waterbottle \u662f erbottlewat \u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002 **\u89e3\u9898\u601d\u8def\uff1a**\u65b0\u5b9a\u4e49ss=s2+s2;\u7136\u540e\u5224\u65ads1\u662f\u5426\u662fss\u5b50\u4e32(\u66b4\u529b\u6216KMP\u6216\u81ea\u5e26api) 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 4.\u6808\u4e0e\u961f\u5217 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u8bbe\u8ba1\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u6808\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u2b50 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \ud83d\udc34 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c&&\ud83d\udc34 \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \ud83d\udc9a && \ud83d\udc8c \u2160 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \ud83e\udde1 && \ud83d\udc8c \u2160 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 224. \u57fa\u672c\u8ba1\u7b97\u5668 227. \u57fa\u672c\u8ba1\u7b97\u5668 II \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762 5.\u6811 \u00b6 **\u603b\u7ed3\uff1a**\u4e8c\u53c9\u6811\u9898\u76ee\u4e0e**\u9012\u5f52\u3001\u56db\u79cd\u904d\u5386\u548cDFS\u641c\u7d22**\u76f8\u5173\u6027\u975e\u5e38\u5927\u3002\u540c\u65f6\u5f88\u591a\u9898\u76ee\u8981\u6c42**\u8fed\u4ee3\u548c\u9012\u5f52**\u4e24\u79cd\u65b9\u6cd5 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u4e8c\u53c9\u6811\u7684\u56db\u79cd\u904d\u5386 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u4e8c\u53c9\u6811\u4e0e\u9012\u5f52 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u4e8c\u53c9\u6811\u4e0e\u641c\u7d22DFS \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u4e8c\u53c9\u6811\u5e8f\u5217\u5316 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u4e8c\u53c9\u6811\u4e0e\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1\u2611\ufe0f 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1 98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 2\u2611\ufe0f ac 10min 2021-3-18 617. \u5408\u5e76\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 \u2161 1\u2611\ufe0f ac 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 &&\ud83d\udc8c \u2161 2 ac(\u9012\u5f52+\u8fed\u4ee3) 10min 2021-3-18 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 \u2b50 Med \u2162 1 \u770b\u89e3\u7b54 99. \u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 \ud83d\udc98 \u2162 1 \u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u2b50 \ud83d\udc98 && \ud83d\udca5 &&\ud83d\udc8c \u2163 1 \u770b\u89e3\u7b54 ... 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 \u2b50 \ud83e\udde1 && \u7c7b\u4f3coffer 37 \u2163 1 \u770b\u89e3\u7b54(\u4e0d\u592a\u4f1a) ... 2021-3-12 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II \u2b50 \ud83e\udde1 \u2164 1 \u83ab\u91cc\u65af\u904d\u5386 \u4e8c\u53c9\u641c\u7d22\u6811 \u5e73\u8861\u4e8c\u53c9\u6811 **\u83ab\u91cc\u65af\u904d\u5386:**\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u7684\u65b9\u5f0f\u90fd\u4f7f\u7528\u4e86\u8f85\u52a9\u7684\u7a7a\u95f4\uff0c\u800c\u83ab\u91cc\u65af\u904d\u5386\u7684\u4f18\u70b9\u662f\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8f85\u52a9\u7a7a\u95f4\u3002\u7f3a\u70b9\u662f\u6539\u53d8\u4e86\u6574\u4e2a\u6811\u7684\u7ed3\u6784\u3002 \u4e8c\u53c9\u641c\u7d22\u6811\uff1a \u67e5\u627e \u63d2\u5165 \u5efa\u6811 \u5220\u9664 \u9012\u5f52 \u00b6 \u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II vector < TreeNode *> generateTrees ( int n ) { if ( n == 0 ) return vector < TreeNode *> ( 0 ); //\u4e3a0\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684\u5411\u91cf return helper ( 1 , n ); // } vector < TreeNode *> helper ( int start , int end ){ vector < TreeNode *> ans ; if ( start > end ){ ans . push_back ( NULL ); //\u4e00\u5b9a\u8981push\u4e00\u4e2aNULL\u8fdb\u53bb \u8fd9\u6837size\u81f3\u5c11\u4e3a1 \u5426\u5219\u540e\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5728\u4e00\u4e2a\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u7ee7\u7eed return ans ; } for ( int i = start ; i <= end ; ++ i ){ //i\u4ee3\u8868\u4e0d\u540c\u7684\u503c\u505a\u6839\u8282\u70b9 vector < TreeNode *> lefts = helper ( start , i -1 ); //\u5de6\u5b50\u6811\u96c6\u5408 vector < TreeNode *> rights = helper ( i + 1 , end ); //\u53f3\u5b50\u6811\u96c6\u5408 //\u4e0b\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5c31\u662f\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ec4\u5408\u60c5\u51b5 for ( int k = 0 ; k < lefts . size (); k ++ ){ //\u904d\u5386\u5de6\u5b50\u6811\u96c6\u5408 for ( int j = 0 ; j < rights . size (); j ++ ){ //\u904d\u5386\u53f3\u5b50\u6811\u96c6\u5408 TreeNode * root = new TreeNode ( i ); //\u521b\u5efa\u4e00\u4e2a\u5f53\u524d\u503c\u7684\u6839\u8282\u70b9 root -> left = lefts [ k ]; //\u9009\u53d6\u5de6\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5de6\u5b50\u6811 root -> right = rights [ j ]; //\u9009\u53d6\u53f3\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u53f3\u5b50\u6811 ans . push_back ( root ); //\u5c06\u5f53\u524d\u7684\u6811\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d } } } return ans ; } 99.\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 //\u8981\u6c42O(1)\u7a7a\u95f4 \u53ea\u80fdMorris\u904d\u5386 void recoverTree ( TreeNode * root ) { bool flag = false ; TreeNode * rt = root ; stack < TreeNode *> S ; TreeNode * pre = NULL ; //\u5b9a\u4e49\u4e00\u4e2a\u91ce\u6307\u9488\u65f6\u4e00\u5b9a\u8981\u58f0\u660e\u662fNULL TM\u7684\u88ab\u8fd9\u4e2a\u641e\u4e86\u4e00\u4e0b\u5348 \u64cd\u64cd\u64cd TreeNode * fi = NULL ; while ( rt || ! S . empty ()){ if ( rt != NULL ){ S . push ( rt ); rt = rt -> left ; } else { rt = S . top (); S . pop (); if ( pre != NULL ) { //\u7b2c\u4e00\u4e2a\u8981\u4ea4\u6362\u7684\u8282\u70b9 \u4ed6\u7684\u503c\u5c0f\u4e8e\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u3002 if ( flag == false && pre -> val >= rt -> val ) { flag = true ; fi = pre ; } //flag\u4e3atrue\u5219\u8bf4\u660e\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9 \u7b2c\u4e8c\u4e2a\u8981\u627e\u7684\u8282\u70b9\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u70b9 //1.\u8981\u4e48\u4ed6\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u503c\u5927\u4e8e\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u503c //2.\u8981\u4e48\u4ed6\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e86 \u9000\u51fawhile\u5faa\u73af\u76f4\u63a5\u4ea4\u4e92\u5373\u53ef if ( flag == true && rt -> val > fi -> val ) { swap ( fi -> val , pre -> val ); return ; } } pre = rt ; rt = rt -> right ; } } swap ( fi -> val , pre -> val ); return ; } \u5361\u7279\u5170\u6570 \u00b6 \u516c\u5f0f\uff1a G ( n )= G (0)\u2217 G ( n \u22121)+ G (1)\u2217 G ( n \u22122)+...+ G ( n \u22121)\u2217 G (0) \u9002\u7528\u95ee\u9898\uff1a n\u5bf9\u62ec\u53f7\u6b63\u786e\u5339\u914d\u6570\u76ee \u51f8\u591a\u8fb9\u5f62\u4e09\u89d2\u5212\u5206 \u51fa\u6808\u6b21\u5e8f \u77e9\u9635\u8fde\u4e58\u62ec\u53f7\u5316\uff1a\u77e9\u9635\u8fde\u4e58\uff1a P=a1\u00d7a2\u00d7a3\u00d7\u2026\u2026\u00d7an\uff0c\u4f9d\u636e\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6539\u53d8\u5176\u987a\u5e8f\uff0c\u53ea\u7528\u62ec\u53f7\u8868\u793a\u6210\u5bf9\u7684\u4e58\u79ef\uff0c\u8bd5\u95ee\u6709\u51e0\u79cd\u62ec\u53f7\u5316\u7684\u65b9\u6848\u3002\uff08 h(n) \u79cd\uff09 96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 //\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6570\u5b66\u95ee\u9898\u3002\u5c31\u662f\u6c42\u5361\u7279\u5170\u6570 int numTrees ( int n ) { vector < int > dp ( n + 1 ); dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < n + 1 ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) dp [ i ] += dp [ j ] * dp [ i -1 - j ]; return dp [ n ]; } 6.\u56fe \u00b6 \u603b\u7ed3\uff1a\u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a.... 207. \u8bfe\u7a0b\u8868 399. \u9664\u6cd5\u6c42\u503c const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; } 7.Hash \u00b6 \u603b\u7ed3\uff1aHash\u5e38\u4e0e\u53cc\u6307\u9488\u548c\u6ed1\u52a8\u7a97\u53e3\u7ec4\u5408\u3002\u5728\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u4e2d\u5c24\u4e3a\u5e38\u89c1\u3002 unordered_map\u67e5\u8be2\u624d\u662fO(1) map\u67e5\u8be2\u662fO(logn) \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Hash\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.Hash\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.Hash\u4e0e\u53cc\u6307\u9488/\u6ed1\u52a8\u7a97\u53e3 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.Hash\u8bbe\u8ba1 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 &&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 ac 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 \ud83e\udde1 && \ud83d\udca5 \u2160 1 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u2b50 \ud83d\udc98 && \ud83d\udca5 \u2160&& \u2162 2 \u770b\u89e3\u7b54 705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408 \ud83d\udc9a && \ud83d\udd05 1 \u770b\u89e3\u7b54 5min 2021-3-13 706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04 \ud83d\udc9a && \ud83d\udd05 1 \u4e24\u6b21ac 10min 2021-3-14 8.\u5806 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \ud83e\udde1&&\ud83d\udc8c \u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \ud83d\udc98&&\ud83d\udc8c 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 9.\u5e76\u67e5\u96c6 \u00b6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 \u7ecf\u9a8c\u79ef\u7d2f \u00b6 \u6a21\u677f \u00b6 \u6a21\u677f IO\u5904\u7406 \u00b6 \u603b\u7ed3\uff1a\u53ef\u4ee5\u770b\u770bC++\u8f93\u5165\u8f93\u51fa\u5904\u7406 \u5c24\u5176\u662fstringstream \u548c getline\u7b49\u7528\u6cd5 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 C++:cin\u3001cin.getline()\u3001getline()\u7684\u7528\u6cd5 \u5f53 cin \u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u4f20\u9012\u5e76\u5ffd\u7565\u4efb\u4f55\u524d\u5bfc\u767d\u8272\u7a7a\u683c\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u5236\u8868\u7b26\u6216\u6362\u884c\u7b26\uff09\u3002\u4e00\u65e6\u5b83\u63a5\u89e6\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u5373\u5f00\u59cb\u9605\u8bfb\uff0c\u5f53\u5b83\u8bfb\u53d6\u5230\u4e0b\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5b83\u5c06\u505c\u6b62\u8bfb\u53d6\u3002 getline\u51fd\u6570\u53ef\u8bfb\u53d6\u6574\u884c\uff0c\u5305\u62ec\u524d\u5bfc\u548c\u5d4c\u5165\u7684\u7a7a\u683c\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u5bf9\u8c61\u4e2d\u3002 getline(cin,'\\n'); cin\u4e3a\u8f93\u5165\u6d41 '\\n'\u4e3a\u7ed3\u675f\u7b26 \u4e5f\u53ef\u5199\u4f5cgetline(str, tmp, ',') \u5c31\u662f\u8f93\u5165\u5b57\u7b26\u4e32\u4e3astr, \u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u4e3atmp \u3002','\u4e3a\u7ed3\u675f\u7b26 \u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0C++\u4e2d\u6ca1\u6709\u7684split\u65b9\u6cd5 C++\u8bed\u6cd5 \u00b6 C++ Lambda\u8868\u8fbe\u5f0f \u53c2\u8003 auto \u5173\u952e\u5b57 \u53c2\u8003 \u9012\u5f52 \u00b6 \u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 7\u4e2a\u5b57\u6bcd\u6570\u5b57\u5224\u65ad\u76f8\u5173\u7684\u51fd\u6570 \u00b6 \u4f8b125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u8bb0\u4e00\u7b14 c++\u7684\u51e0\u4e2a\u5185\u7f6e\u51fd\u6570 islower(char c) \u662f\u5426\u4e3a\u5c0f\u5199\u5b57\u6bcd isupper(char c) \u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd isdigit(char c) \u662f\u5426\u4e3a\u6570\u5b57 isalpha(char c) \u662f\u5426\u4e3a\u5b57\u6bcd isalnum(char c) \u662f\u5426\u4e3a\u5b57\u6bcd\u6216\u8005\u6570\u5b57 toupper(char c) \u5b57\u6bcd\u5c0f\u8f6c\u5927 tolower(char c) \u5b57\u6bcd\u5927\u8f6c\u5c0f TIPs \u00b6 \u957f\u5ea6\u4e3ak\u7684\u6709\u5e8f\u5411\u91cf\u7684**\u4e2d\u4f4d\u6570\u6c42\u6cd5**\uff1a\u65e0\u8bba\u5947\u5076,\u90fd\u662f( num[k/2]+num[(k-1)/2])/2 \u4e5f\u5373**\u7d22\u5f15\u4e3a(size-1)/2\u548csize/2\u5904\u503c\u548c\u7684\u5e73\u5747** **\u4e2d\u95f4\u7684\u6570mid**\u4e00\u822c\u4e3ak/2,k\u4e3a\u5076\u6570\u65f6\u4e3a\u504f\u540e\u7684\u90a3\u4e00\u4e2a\u4e2d\u95f4\u6570 \u4e00\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5 \uff1amultiset window(nums.begin(),nums.begin()+k); \u521b\u5efaiterator\u5bf9\u8c61 \u3002\u5982 c++ vector<int> a(20,1); vector<int>::iterator tmp = upper_bound(a.begin(), a.end(), val; \u5bb9\u5668\u9002\u914d\u5668 stack\u3001queue \u548c priority_queue \u6ca1\u6709\u8fed\u4ee3\u5668 \u5c3e\u9012\u5f52( tail-recursive )\uff1a\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory() // \u5c3e\u9012\u5f52\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 } function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory()\uff0c\u5c0f\u548c\u5c1a\u542c\u4e86\uff0c\u627e\u4e86\u5757\u8c46\u8150\u649e\u6b7b\u4e86 // \u975e\u5c3e\u9012\u5f52\uff0c\u4e0b\u4e00\u4e2a\u51fd\u6570\u7ed3\u675f\u4ee5\u540e\u6b64\u51fd\u6570\u8fd8\u6709\u540e\u7eed\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u5b58\u672c\u8eab\u7684\u73af\u5883\u4ee5\u4f9b\u5904\u7406\u8fd4\u56de\u503c\u3002 } string\u52a0\u6cd5\u7528\u201c+\u201d\u5f88\u8017\u65f6 \u7528append()\u548cpush_back()\u65b9\u6cd5\u66f4\u597d \u4f20\u5f15\u7528\u901f\u5ea6\u8981\u5feb\u5f88\u591a \u5b57\u7b26\u4e32 tmp.substr(start, num) tmp.erase(tmp.size()-word.size()-1, word.size()+1); \u5220\u9664\u5012\u6570k\u4e2a\u5143\u7d20 tmp.erase(tmp.size()-k, k) \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u5e38\u7528\u51fd\u6570\uff1a \u00b6 //range [first,last) //parameters (first, last, val) //return iterator lower_bound (); //first position that not less than the value upper_bound (); //first position that greater than the value // lower_bound/upper_bound example #include <iostream> // std::cout #include <algorithm> // std::lower_bound, std::upper_bound, std::sort #include <vector> // std::vector int main () { int myints [] = { 10 , 20 , 30 , 30 , 20 , 10 , 10 , 20 }; std :: vector < int > v ( myints , myints + 8 ); // 10 20 30 30 20 10 10 20 std :: sort ( v . begin (), v . end ()); // 10 10 10 20 20 20 30 30 std :: vector < int >:: iterator low , up ; low = std :: lower_bound ( v . begin (), v . end (), 20 ); // ^ up = std :: upper_bound ( v . begin (), v . end (), 20 ); // ^ std :: cout << \"lower_bound at position \" << ( low - v . begin ()) << '\\n' ; std :: cout << \"upper_bound at position \" << ( up - v . begin ()) << '\\n' ; return 0 ; } \u7b97\u6cd5\u8d44\u6e90 \u00b6 LeetBook + Top100 + \u516c\u53f8\u4e13\u9898 + \u5251\u6307offer + \u9762\u8bd5\u91d1\u5178 + \u725b\u5ba2 \u529b\u6263\u52a0\u52a0 \u7b97\u6cd5\u6a21\u677f\u63d2\u4ef6 \u7b97\u6cd5\u7b14\u8bb0+\u7b97\u6cd54+\u5de6\u7a0b\u4e91\u6700\u4f18\u89e3 PAT labuladong AcWing","title":"\u7ecf\u5178\u9762\u8bd5\u5408\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_1","text":"\u6a21\u677f \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"\u7ecf\u5178\u9762\u8bd5\u5408\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_2","text":"\u7b97\u6cd5 - Algorithms \u6392\u5e8f\u7b97\u6cd5\uff1a\u5feb\u901f\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f \u641c\u7d22\u7b97\u6cd5\uff1a\u56de\u6eaf\u3001\u9012\u5f52\u3001\u526a\u679d\u6280\u5de7 \u56fe\u8bba\uff1a\u6700\u77ed\u8def\u3001\u6700\u5c0f\u751f\u6210\u6811\u3001\u7f51\u7edc\u6d41\u5efa\u6a21 \u52a8\u6001\u89c4\u5212\uff1a\u80cc\u5305\u95ee\u9898\u3001\u6700\u957f\u5b50\u5e8f\u5217\u3001\u8ba1\u6570\u95ee\u9898 \u57fa\u7840\u6280\u5de7\uff1a\u5206\u6cbb\u3001\u500d\u589e\u3001\u4e8c\u5206\u3001\u8d2a\u5fc3 \u6570\u636e\u7ed3\u6784 - Data Structures \u6570\u7ec4\u4e0e\u94fe\u8868\uff1a\u5355 / \u53cc\u5411\u94fe\u8868\u3001\u8df3\u821e\u94fe \u6808\u4e0e\u961f\u5217 \u6811\u4e0e\u56fe\uff1a\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u5e76\u67e5\u96c6 \u54c8\u5e0c\u8868 \u5806\uff1a\u5927 / \u5c0f\u6839\u5806\u3001\u53ef\u5e76\u5806 \u5b57\u7b26\u4e32\uff1a\u5b57\u5178\u6811\u3001\u540e\u7f00\u6811","title":"\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_3","text":"","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_4","text":"","title":"\u4e00\u3001\u5feb\u901f\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_5","text":"","title":"\u4e8c\u3001\u5806\u6392"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_6","text":"","title":"\u4e09\u3001\u63d2\u5165\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#leetcode480","text":"//test4 //C++ upper_bound() lower_bound() //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 #include <iostream> #include <algorithm> #include <vector> #include <unordered_map> #include <string> #include <deque> using namespace std ; int main () { vector < int > nums = { 1 , 4 , 2 , 3 , 5 , 8 }; int k = 5 ; vector < double > ans ; int left = 0 ; int right = k ; deque < long long > window ; for ( int i = 0 ; i < k ; i ++ ){ //begin() refer to the first element //end() refer to the pass-the-end element //deque\u4e3a\u7a7a\u65f6 end()\u548cbegin()\u4e00\u6837 window.end()-window.begin()=0 //deque\u4e0d\u4e3a\u7a7a\u65f6 \u4e3a\u957f\u5ea6 //upper_bound\u6ca1\u627e\u5230\u65f6 \u5c31\u662f\u5728wi ndow.end()\u7684\u4f4d\u7f6e \u540c\u65f6\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u548cwindow.end()\u4e00\u6837\u4e3a\u7a7a \u53ea\u6709\u5728\u63d2\u5165\u64cd\u4f5c\u540e\u624d\u6709\u503c deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); cout << ( window . end () - window . begin ()) << \" \" <<* ( insert_p ) << \" \" << ( insert_p - window . begin ()) << endl ; window . insert ( insert_p , nums [ i ]); } ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } cout << ans [ 0 ] << endl ; return 0 ; }","title":"leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_7","text":"","title":"\u56db\u3001\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_8","text":"","title":"\u4e94\u3001\u5192\u6ce1\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_9","text":"","title":"\u516d\u3001\u9009\u62e9\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_10","text":"","title":"\u641c\u7d22"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#dfs","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.DFS+\u56de\u6eaf+\u526a\u679d \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.DFS+\u6811 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 3.DFS+\u7f51\u683c\u578b \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.DFS+\u56fe \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \ud83e\udde1&&\ud83d\udc8c \u2160 1 \u770b\u89e3\u7b54 46. \u5168\u6392\u5217 \ud83e\udde1&&\ud83d\udca5 \u2160 1 78. \u5b50\u96c6 \ud83e\udde1&&\ud83d\udca5 \u2160 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1 200. \u5c9b\u5c7f\u6570\u91cf \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 \u2162 1 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \ud83e\udde1 \u2162 1 \u56de\u6eaf\u6a21\u677f\u9898\uff1a \u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 vector < string > permutation ( string s ) { vector < string > ans ; dfs ( s , ans , 0 ); return ans ; } void dfs ( string s , vector < string >& ans , int depth ){ if ( depth >= s . size () -1 ) { ans . push_back ( s ); return ; } unordered_set < char > used ; for ( int i = depth ; i < s . size (); ++ i ){ if ( used . find ( s [ i ]) != used . end ()) continue ; used . insert ( s [ i ]); swap ( s [ depth ], s [ i ]); dfs ( s , ans , depth + 1 ); swap ( s [ i ], s [ depth ]); } } 46. \u5168\u6392\u5217 \u7ed9\u5b9a\u4e00\u4e2a \u6ca1\u6709\u91cd\u590d \u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002 //\u6ce8\u91ca\u90e8\u5206\u662f\u770b\u9898\u89e3\u5199\u7684 //\u672a\u6ce8\u91ca\u90e8\u5206\u662f\u6309\u7167 \u5251\u6307offer38.\u5b57\u7b26\u4e32\u7684\u6392\u5217 \u90a3\u9898\u6a21\u677f\u5199\u7684.. //\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a vector < vector < int >> permute ( vector < int >& nums ) { vector < vector < int > > ans ; // vector<int> res; // vector<int> used(nums.size(), 0); // helper(ans, nums, res, used); helper ( ans , nums , 0 ); return ans ; } // void helper(vector<vector<int> >& ans,vector<int>& nums, vector<int>& res, vector<int>& used){ // if(res.size()==nums.size()){ // ans.push_back(res); // return; // } // for(int i=0;i<nums.size();++i){ // if(used[i]!=0) continue; // else{ // res.push_back(nums[i]); // used[i] = 1; // helper(ans, nums, res, used); // res.pop_back(); // used[i]=0; // } // } // } void helper ( vector < vector < int > >& ans , vector < int >& nums , int depth ){ if ( depth == nums . size () -1 ){ ans . push_back ( nums ); return ; } unordered_set < int > used ; for ( int i = depth ; i < nums . size (); ++ i ){ if ( used . find ( nums [ i ]) != used . end ()) continue ; used . insert ( nums [ i ]); swap ( nums [ depth ], nums [ i ]); helper ( ans , nums , depth + 1 ); swap ( nums [ depth ], nums [ i ]); } } \u7f51\u683c DFS \u904d\u5386\u7684\u57fa\u672c\u6846\u67b6 \u53c2\u8003 void dfs ( vector < vector < int > >& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 dfs ( grid , r + 1 , c ); dfs ( grid , r -1 , c ); dfs ( grid , r , c -1 ); dfs ( grid , r , c + 1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int > >& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size ; } 695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef int maxAreaOfIsland ( vector < vector < int >>& grid ) { int ans = 0 ; for ( int i = 0 ; i < grid . size (); ++ i ){ for ( int j = 0 ; j < grid [ 0 ]. size (); ++ j ){ if ( grid [ i ][ j ] == 1 ){ int r = dfs ( grid , i , j ); ans = max ( ans , r ); } } } return ans ; } int dfs ( vector < vector < int >>& grid , int r , int c ){ //base case if ( ! inArea ( grid , r , c )) return 0 ; //\u4e0d\u662f\u5c9b\u5c7f \u76f4\u63a5\u8fd4\u56de if ( grid [ r ][ c ] != 1 ) return 0 ; grid [ r ][ c ] = 2 ; //\u5c06\u683c\u5b50\u6807\u4e3a\u904d\u5386\u8fc7 //\u5bf9\u4e0a\u4e0b\u5de6\u53f3\u8fdb\u884c\u904d\u5386 return 1 + dfs ( grid , r + 1 , c ) + dfs ( grid , r -1 , c ) + dfs ( grid , r , c + 1 ) + dfs ( grid , r , c -1 ); } //\u5224\u65ad\u5c9b\u5c7f\u662f\u5426\u5728\u683c\u5b50\u4e2d bool inArea ( vector < vector < int >>& grid , int r , int c ){ return 0 <= r && r < grid . size () && 0 <= c && c < grid [ 0 ]. size (); }","title":"\u4e00\u3001DFS"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#bfs","text":"\u5c42\u5e8f\u904d\u5386\uff1a \u300cBFS \u904d\u5386\u300d\u3001\u300c\u5c42\u5e8f\u904d\u5386\u300d\u3001\u300c\u6700\u77ed\u8def\u5f84\u300d\u5b9e\u9645\u4e0a\u662f\u9012\u8fdb\u7684\u5173\u7cfb\u3002\u5728 BFS \u904d\u5386\u7684\u57fa\u7840\u4e0a\u533a\u5206\u904d\u5386\u7684\u6bcf\u4e00\u5c42\uff0c\u5c31\u5f97\u5230\u4e86\u5c42\u5e8f\u904d\u5386\u3002\u5728\u5c42\u5e8f\u904d\u5386\u7684\u57fa\u7840\u4e0a\u8bb0\u5f55\u5c42\u6570\uff0c\u5c31\u5f97\u5230\u4e86\u6700\u77ed\u8def\u5f84\u3002","title":"\u4e8c\u3001BFS"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_11","text":"\u4e00\u822c\u7528\u4e8e\u6709\u5e8f\u6570\u7ec4\u6216BST, \u4e8c\u5206\u67e5\u627e\u6548\u7387\u5f88\u9ad8O(logn)","title":"\u4e09\u3001\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_12","text":"\u5927\u591a\u6570\u9012\u5f52\u90fd\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u91cd\u5199 \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u80cc\u5305\u95ee\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u52a8\u6001\u89c4\u5212\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u52a8\u6001\u89c4\u5212\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83d\udc9a\ud83e\udde1 && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 72. \u7f16\u8f91\u8ddd\u79bb \ud83e\udde1 && \ud83d\udca5 \u2160 1 221. \u6700\u5927\u6b63\u65b9\u5f62 \u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c \ud83d\udc9a && \ud83d\udc8c \u9644\u4e0a01\u80cc\u5305\u95ee\u9898\u7684\u6a21\u7248\uff1a //01\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = m ; j >= V [ i ]; j -- ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } //\u5b8c\u5168\u80cc\u5305 for ( int i = 0 ; i < n ; i ++ ) { for ( int j = V [ i ]; j <= m ; j ++ ) { f [ j ] = max ( f [ j ], f [ j - V [ i ]] + W [ i ]); } } f[j]\u4ee3\u8868\u5f53\u524d\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u83b7\u53d6\u7684\u6700\u5927\u4ef7\u503c\u3002\u5b8c\u5168\u80cc\u5305\u662f\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff0cf[j-V[i]]\u53d6\u5230\u7684\u662f\u62ff\u7b2ci\u4e2a\u7269\u54c1\u65f6\u7684\u503c\uff0c\u662f\u65b0\u503c\uff0c\u53ef\u4ee5\u91cd\u590d\u65e0\u9650\u7684\u62ff\uff0cf[j]\u7684\u503c\u4e5f\u4f1a\u968f\u4e4b\u589e\u52a0\u3002 V\uff1a\u5546\u54c1\u7684\u4f53\u79ef W\uff1a\u5546\u54c1\u7684\u4ef7\u503c 72. \u7f16\u8f91\u8ddd\u79bb \u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c\u8bf7\u4f60\u8ba1\u7b97\u51fa\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570 \u3002 \u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u63d2\u5165\u4e00\u4e2a\u5b57\u7b26 \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 \u66ff\u6362\u4e00\u4e2a\u5b57\u7b26 //\u4f7f\u7528dpTable //\u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a //\u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b int minDistance ( string word1 , string word2 ) { int m = word1 . size (); int n = word2 . size (); vector < vector < int > > dp ( m + 1 , vector < int > ( n + 1 )); for ( int i = 0 ; i <= m ; ++ i ) dp [ i ][ 0 ] = i ; for ( int j = 0 ; j <= n ; ++ j ) dp [ 0 ][ j ] = j ; for ( int i = 1 ; i <= m ; ++ i ){ for ( int j = 1 ; j <= n ; ++ j ){ //\u5f53\u524d\u5b57\u7b26\u4e32\u76f8\u7b49 \u5219\u53cc\u6307\u9488\u90fd\u524d\u79fb if ( word1 [ i -1 ] == word2 [ j -1 ]) dp [ i ][ j ] = dp [ i -1 ][ j -1 ]; else dp [ i ][ j ] = min ( min ( dp [ i -1 ][ j ] + 1 , dp [ i ][ j -1 ] + 1 ), dp [ i -1 ][ j -1 ] + 1 ); } } return dp [ m ][ n ]; } \u53c2\u8003","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_13","text":"","title":"\u57fa\u7840\u6280\u5de7"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_14","text":"","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_15","text":"\u5251\u6307 Offer 57. \u548c\u4e3as\u7684\u4e24\u4e2a\u6570\u5b57","title":"\u53cc\u6307\u9488"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_16","text":"\u603b\u7ed3\uff1a \u6ed1\u52a8\u7a97\u53e3+\u53cc\u6307\u9488+hash\u8868 \uff08\u6216\u8005unordered_set\uff09\u5e38\u5e38\u7ed3\u5408\u5728\u4e00\u8d77 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 \u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 42 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c \u5251\u6307 Offer 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u7b80\u5355 && \u540c3 2 \u221a \u4e8c\u6b21AC 8min 2021-3-11 \u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 2 \u770b\u89e3\u7b54 2021-3-11 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \u7b80\u5355 && \u7ecf\u5178 1 \u770b\u89e3\u7b54 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \u7b80\u5355 && HOT100 2 \u221a \u4e00\u6b21AC 10min 2021-3-11 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u4e2d\u7b49 && HOT100 2 \u770b\u89e3\u7b54 2021-3-11 209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 424. \u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26 \u4e2d\u7b49 1 480. \u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u56f0\u96be 1 \u770b\u89e3\u7b54 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7b80\u5355 2 ac 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u3001\u4e00\u4e2a\u5b57\u7b26\u4e32 t \u3002\u8fd4\u56de s \u4e2d\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c s \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u6ce8\u610f\uff1a\u5982\u679c s \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"ADOBECODEBANC\", t = \"ABC\" \u8f93\u51fa\uff1a\"BANC\" \u6ed1\u52a8\u7a97\u53e3\u601d\u60f3\uff1a \u603b\u7ed3(Conclusion) \u2460\u7a97\u53e3\u7531\u4e24\u4e2a\u6307\u9488\u6784\u6210\uff0c\u4e00\u4e2a\u5de6\u6307\u9488left\uff0c\u4e00\u4e2a\u53f3\u6307\u9488right\uff0c\u7136\u540e[left,right]\u8868\u793a\u7684\u7d22\u5f15\u8303\u56f4\u662f\u4e00\u4e2a\u7a97\u53e3\u4e86\u3002 \u2461\u53f3\u6307\u9488right\u7684\u529f\u80fd\u662f\u7528\u6765\u6269\u5c55\u7a97\u53e3\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u6ca1\u6709\u8fbe\u5230\u9898\u76ee\u8981\u6c42\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u79fb\u52a8\u53f3\u6307\u9488right\u76f4\u5230\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u7b2c\u4e00\u6b21\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u4e3a\u6b62\u3002 \u2462\u5de6\u6307\u9488left\u7684\u529f\u80fd\u662f\u7528\u6765\u7f29\u5c0f\u7a97\u53e3\u7684\uff1a\u5f53\u7a97\u53e3\u5185\u7684\u6761\u4ef6\u5df2\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u6216\u591a\u4e8e\u9898\u76ee\u6761\u4ef6\u65f6\uff08\u7a97\u53e3\u6ea2\u51fa\uff09\uff0c\u6211\u4eec\u7f29\u5c0f\u7a97\u53e3\uff0c\u4e5f\u5c31\u662f\u5de6\u6307\u9488left\u9700\u8981\u53f3\u79fb\u76f4\u5230\u7a97\u53e3\u6761\u4ef6\u4e0d\u6ee1\u8db3\u4e3a\u6b62\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u5e76\u66f4\u65b0\u76ee\u524d\u4e3a\u6b62\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7a97\u53e3\u8bb0\u5f55\u3002\u4e4b\u540e\uff0c\u518d\u6b21\u6269\u5c55\u53f3\u6307\u9488right\uff0c\u4f7f\u5f97\u7a97\u53e3\u6ee1\u8db3\u9898\u76ee\u7684\u6761\u4ef6\u3002 \u6ce8\uff1a\u6ed1\u52a8\u7a97\u53e3\u7528\u6765\u5904\u7406\u8fde\u7eed\u6ee1\u8db3\u4e00\u5b9a\u6761\u4ef6\u7684\u8fde\u7eed\u533a\u95f4\u7684\u6027\u8d28\uff08\u957f\u5ea6\u7b49\uff09\u95ee\u9898\u7684\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u8d77\u59cb\u4e8e\u539f\u70b9\uff0c\u5e76\u4e00\u524d\u4e00\u540e\u5411\u7ec8\u70b9\u524d\u8fdb\u3002 \u6846\u67b6 func movingWindow () { /* 1. \u521d\u59cb\u5316\u7a97\u53e3\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bb0\u5f55\u7a97\u53e3\u5185\u7684\u4fe1\u606f */ first , last := 0 , 0 // \u7a97\u53e3\u7684\u5de6\u53f3\u8fb9\u754c for last < len ( s ) { /* 2. \u628a last \u6307\u5411\u7684\u5143\u7d20\u52a0\u5165\u7a97\u53e3 */ for first < len ( s ) && /* 3. \u5224\u65ad\u5f53\u524d\u7a97\u53e3\u5185\u7684\u5143\u7d20\u662f\u5426\u7b26\u5408\u6761\u4ef6 */ { /* 4.a \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5c0f\u503c\u7684\u4ee3\u7801 */ /* 5. \u628a first \u6307\u5411\u7684\u5143\u7d20\u79fb\u51fa\u7a97\u53e3 */ first ++ } /* 4.b \u5728\u8fd9\u5199\u66f4\u65b0\u7a97\u53e3\u6700\u5927\u503c\u7684\u4ee3\u7801 */ last ++ } } leetcode480.\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528multiset\u6765\u6c42\u51fa\u4e2d\u4f4d\u6570\uff08\u56e0\u4e3amultiset\u5e95\u5c42\u4f7f\u7528\u7684\u662f\u4e8c\u53c9\u641c\u7d22\u6811BST\u7684\u6570\u636e\u7ed3\u6784\uff0c\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(logn)\uff09\uff0c\u5229\u7528multiset\u7684\u81ea\u6392\u5e8f\u529f\u80fd\u53ef\u4ee5\u5f88\u5feb\u6c42\u51fa\u4e2d\u4f4d\u6570\u3002multiset\u4f5c\u4e3a\u5927\u5c0f\u4e3ak\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u6bcf\u6b21\u63d2\u5165\u65b0\u63d2\u5165\u5143\u7d20\uff0c\u9700\u5c06\u7a97\u53e3\u79fb\u52a8\u3002\u82e5\u65b0\u63d2\u5165\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u5219\u9700\u8981\u5c06mid\u5de6\u79fb\uff08\u56e0\u4e3a\u65b0\u63d2\u5165\u7684\u5143\u7d20\u6bd4\u4e2d\u4f4d\u6570\u5c0f\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u80af\u5b9a\u4f1a\u88ab\u62c9\u4f4e\uff09\uff1b\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u540e\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u5220\u9664\u4e00\u4e2a\u5143\u7d20\uff0c\u82e5\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u5c0f\u4e8emid\u6307\u5411\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u5c06mid\u53f3\u79fb\u3002\u6ce8\u610f\uff1a\u5bf9\u4e8e\u5220\u9664\u5143\u7d20\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528erase\u6839\u636evalue\u6765\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5220\u9664\u591a\u4e2a\u503c\u4e00\u6837\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u7528lower_bound\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u76ee\u6807\u503c\u7684\u6570\uff0c\u901a\u8fc7iterator\u6765\u5220\u6389\u786e\u5b9a\u7684\u4e00\u4e2a\u6570\u5b57\u3002 \u5173\u4e8enext()\u4e0eprev()\u51fd\u6570\u7684\u89e3\u91ca\uff1a Here //480\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570 class Solution { public : vector < double > medianSlidingWindow ( vector < int >& nums , int k ) { vector < double > ans ; if ( nums . size () == 0 ) return ans ; int left = 0 ; int right = k ; //\u7531\u4e8e\u53ef\u80fdtestcase [2147483647,2147483647] k=2 //\u53d1\u751f\u6ea2\u51fa \u6240\u4ee5window\u8bbe\u7f6e\u4e3along long\u7c7b\u578b deque < long long > window ; //\u63d2\u5165\u6392\u5e8f //\u901a\u8fc7upper_bound lower_bound(\u5e95\u5c42\u90fd\u662f\u4e8c\u5206\u6cd5\u5b9e\u73b0)\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668 //lower_bound\u51c6\u786e\u627e\u5230\u8be5\u5220\u7684\u8282\u70b9 upper_bound\u627e\u5230\u8be5\u63d2\u5165\u7684\u8282\u70b9 for ( int i = 0 ; i < k ; i ++ ){ deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); //deque\u7684insert\u8981\u4f20\u8fed\u4ee3\u5668\u548cval\u3002 window . insert ( insert_p , nums [ i ]); } //ans\u4e3adouble\u7c7b\u578b \u9664\u4ee52.0\u4f7flong long\u53d8\u4e3adouble ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); for ( int i = k ; i < nums . size (); i ++ ){ deque < long long >:: iterator delete_p = lower_bound ( window . begin (), window . end (), nums [ i - k ]); //erase\u4f1a\u5220\u9664\u591a\u4e2a\u540c\u503c\u7684 \u6240\u4ee5\u5fc5\u987b\u4f20\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 window . erase ( delete_p ); deque < long long >:: iterator insert_p = upper_bound ( window . begin (), window . end (), nums [ i ]); window . insert ( insert_p , nums [ i ]); ans . push_back (( window [ k / 2 ] + window [( k -1 ) / 2 ]) / 2.0 ); } return ans ; } };","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_17","text":"\u53c2\u8003 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 560. \u548c\u4e3aK\u7684\u5b50\u6570\u7ec4 \u2b50\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_18","text":"","title":"\u5206\u6cbb"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_19","text":"","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_20","text":"","title":"\u5355\u8c03\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_21","text":"","title":"\u601d\u7ef4\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_22","text":"\u9898\u76ee \u96be\u5ea6 \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 54. \u87ba\u65cb\u77e9\u9635 \u4e2d\u7b49 2 \u221a \u4e00\u6b21ac 10min 2021-3-15 59. \u87ba\u65cb\u77e9\u9635 II \u7b80\u5355 2 \u221a \u4e00\u6b21ac 8min 2021-3-16","title":"\u77e9\u9635\u76f8\u5173"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#0107","text":"\u7ed9\u4f60\u4e00\u5e45\u7531 N \u00d7 N \u77e9\u9635\u8868\u793a\u7684\u56fe\u50cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u7684\u5927\u5c0f\u4e3a 4 \u5b57\u8282\u3002\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u79cd\u7b97\u6cd5\uff0c\u5c06\u56fe\u50cf\u65cb\u8f6c 90 \u5ea6\u3002 \u4e0d\u5360\u7528\u989d\u5916\u5185\u5b58\u7a7a\u95f4\u80fd\u5426\u505a\u5230\uff1f \u65cb\u8f6c270\u00b0\u662f\u8f6c\u7f6e\u3002\u65cb\u8f6c180\u00b0\u662f\u5148\u4e0a\u4e0b\u5bf9\u79f0\uff0c\u518d\u5de6\u53f3\u5bf9\u79f0\u3002\u65cb\u8f6c90\u00b0\u662f\u5148\u8f6c\u7f6e,\u7136\u540e\u5de6\u53f3\u5bf9\u79f0\u8fc7\u53bb\u3002 \u76f8\u540c\u9898\uff1a 48. \u65cb\u8f6c\u56fe\u50cf","title":"\u9762\u8bd5\u9898 01.07. \u65cb\u8f6c\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#0108","text":"\u7f16\u5199\u4e00\u79cd\u7b97\u6cd5\uff0c\u82e5M \u00d7 N\u77e9\u9635\u4e2d\u67d0\u4e2a\u5143\u7d20\u4e3a0\uff0c\u5219\u5c06\u5176\u6240\u5728\u7684\u884c\u4e0e\u5217\u6e05\u96f6\u3002","title":"\u9762\u8bd5\u9898 01.08. \u96f6\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#54","text":"\u7ed9\u4f60\u4e00\u4e2a m \u884c n \u5217\u7684\u77e9\u9635 matrix \uff0c\u8bf7\u6309\u7167 \u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f \uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002","title":"54. \u87ba\u65cb\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#221","text":"\u5728\u4e00\u4e2a\u7531 '0' \u548c '1' \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b '1' \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002","title":"221. \u6700\u5927\u6b63\u65b9\u5f62"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_23","text":"","title":"\u6570\u5b66\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#offer-62","text":"","title":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#470-rand7-rand10","text":"(randx()-1)Y + randx() \u80fd\u968f\u673a\u751f\u6210[1,x*Y]\u5185\u7684\u968f\u673a\u6570","title":"470. \u7528 Rand7() \u5b9e\u73b0 Rand10()"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_24","text":"\u4f4d\u8fd0\u7b97\u77e5\u8bc6\u70b9\uff1a \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II \u2b50 \ud83e\udde1 && \ud83d\udc8c \u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \ud83d\udc9a && \ud83d\udc8c 78. \u5b50\u96c6 \ud83e\udde1 && \ud83d\udca5 2\u2611\ufe0f ac 5min 2021-3-19 169. \u591a\u6570\u5143\u7d20 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u2705 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 1min 2021-3-19 338. \u6bd4\u7279\u4f4d\u8ba1\u6570 \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19 461. \u6c49\u660e\u8ddd\u79bb \ud83d\udc9a && \ud83d\udca5 2\u2611\ufe0f\ud83c\udd97 ac 2min 2021-3-19","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_25","text":"\u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 146. LRU \u7f13\u5b58\u673a\u5236 \ud83d\udc34\u2b50 \ud83e\udde1 && \ud83d\udca5 1 208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811) \ud83e\udde1 && \ud83d\udca5 1","title":"\u8bbe\u8ba1\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_26","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#1","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Nsum \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5Easy && TOP\u2705\ud83d\udc34\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"1.\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#2","text":"\u603b\u7ed3\uff1a 1.\u4e86\u89e3\u94fe\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u81ea\u5df1\u5b9a\u4e49\u94fe\u8868 2.\u5b66\u4f1a\u4f7f\u7528dummyHead \u8fd9\u6837\u80fd\u5f88\u597d\u5904\u7406\u8fb9\u754c\u60c5\u51b5\u3002\u5220\u9664\u94fe\u8868\u8282\u70b9\u7684\u9898\u578b\u4e2d\u5c24\u4e3a\u5178\u578b\u5982\uff1a19\u3001203 3.**\u5220\u9664\u94fe\u8868\u8282\u70b9**\u7c7b\u578b\u7684\u9898\u76ee\u4e00\u5b9a\u8981\u8bb0\u5f97\u91ca\u653e\u8282\u70b9\u5185\u5b58\u3002\u5426\u5219\u4f1a\u6709\u5185\u5b58\u6cc4\u6f0f\u3002 \u598282\u300183 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u53cd\u8f6c\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u56de\u6587\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u94fe\u8868\u8282\u70b9\u5220\u9664 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.\u5408\u5e76\u5347\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 5.\u6392\u5e8f\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 6.\u73af\u5f62\u94fe\u8868 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 7.\u94fe\u8868\u6570\u636e\u7ed3\u6784 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 8.\u94fe\u8868\u8fd0\u7b97 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 206. \u53cd\u8f6c\u94fe\u8868 Easy && TOP\u2705\ud83d\udc34 \u2160 2 \uff08\u8fed\u4ee3\u4e0e\u9012\u5f52\uff09 61. \u65cb\u8f6c\u94fe\u8868 Medium \u2160 1 ac(\u8fb9\u754c\u8c03\u8bd5\u4e86\u4e00\u4f1a) 15min 2021-3-18 92. \u53cd\u8f6c\u94fe\u8868 II Medium \u2160 1\u2611\ufe0f ac 30min 2021-3-18 234. \u56de\u6587\u94fe\u8868 Easy && HOT100 \u2161 2\u2611\ufe0f ac 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 Easy && HOT100 \u2162 2\u2611\ufe0f ac 5min 2021-3-18 82. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II Med \u2162 1\u2611\ufe0f ac 10min 2021-3-18 203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 Easy \u2162 1\u2611\ufe0f ac 3min 2021-3-18 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 Easy && HOT100 \u2163 2\u2611\ufe0f ac 5min 2021-3-10 23. \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 \u2b50 Hard && HOT100 \u2163 1 ac 148. \u6392\u5e8f\u94fe\u8868 \u2b50 Medium && HOT100 \u2164 1 \u770b\u89e3\u7b54 ... ... 141. \u73af\u5f62\u94fe\u8868 Easy && HOT100 \u2165 2\u2611\ufe0f ac 2min 2021-3-18 142. \u73af\u5f62\u94fe\u8868 II Medium && HOT100 \u2165 2\u2611\ufe0f ac 5min 160. \u76f8\u4ea4\u94fe\u8868 (\u540coffer52) Easy && HOT100 \u2165 2\u2611\ufe0f ac \u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u2b50 \u5251\u6307offer \u2166 1 \u770b\u89e3\u7b54 2. \u4e24\u6570\u76f8\u52a0 \u2b50 Med && HOT100 \u2167 1 ac 86. \u5206\u9694\u94fe\u8868 Med \u2167 1 ac 20min 2021-3-18","title":"2.\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#3","text":"\u5b57\u7b26\u4e32\u80fd\u52a8\u5f52\u7684\u522b\u56de\u6eaf\uff0c\u5bb9\u6613\u8d85\u65f6 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u5b57\u7b26\u4e32+\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 2.\u56de\u6587\u5b50\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u5b57\u7b26\u4e32+\u6808 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u5b57\u7b26\u4e32+\u56de\u6eaf\uff08\u7ec4\u5408\u53ca\u5207\u5206\u95ee\u9898\uff09 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u5b57\u7b26\u4e32+\u5206\u7c7b\u8ba8\u8bba \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 ... ... 72. \u7f16\u8f91\u8ddd\u79bb Hard && Hot100 \u2160 1 \u770b\u89e3\u7b54 115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 Medium \u2160 1 \u56de\u6eaf\u8d85\u65f6... 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 Medium \u2161 2\u2611\ufe0f \u4e00\u6b21ac 10min 131. \u5206\u5272\u56de\u6587\u4e32 Hard \u2161 1 \u770b\u89e3\u7b54 132. \u5206\u5272\u56de\u6587\u4e32 II Hard && \u51fa\u8fc7 \u2160&&\u2161 1 \u4e00\u6b21ac 647. \u56de\u6587\u5b50\u4e32 Medium \u2161 1 \u4e00\u6b21ac \u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 Medium \u2164 1 ac 45min 394. \u5b57\u7b26\u4e32\u89e3\u7801 Medium \u2162&&\u2164 1 \u770b\u89e3\u7b54 \u5b57\u7b26\u4e32\u6392\u5e8f \u5355\u8bcd\u67e5\u627e\u6811 \u5b50\u5b57\u7b26\u4e32\u67e5\u627e \u6b63\u5219\u8868\u8fbe\u5f0f \u6570\u636e\u538b\u7f29 \u5b57\u5178\u6811 \u524d\u7f00(\u540e\u7f00)\u6811 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c KMP 567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002 \u7c7b\u4f3c\u9898\uff1a \u9762\u8bd5\u9898 01.09. \u5b57\u7b26\u4e32\u8f6e\u8f6c \u5b57\u7b26\u4e32\u8f6e\u8f6c\u3002\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\u68c0\u67e5 s2 \u662f\u5426\u4e3a s1 \u65cb\u8f6c\u800c\u6210\uff08\u6bd4\u5982\uff0c waterbottle \u662f erbottlewat \u65cb\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\uff09\u3002 **\u89e3\u9898\u601d\u8def\uff1a**\u65b0\u5b9a\u4e49ss=s2+s2;\u7136\u540e\u5224\u65ads1\u662f\u5426\u662fss\u5b50\u4e32(\u66b4\u529b\u6216KMP\u6216\u81ea\u5e26api) 30. \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002","title":"3.\u5b57\u7b26\u4e32"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#4","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u8bbe\u8ba1\u9898 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u6808\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u2b50 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 \ud83d\udc34 \ud83d\udc9a && \ud83d\udca5&&\ud83d\udc8c&&\ud83d\udc34 \u2160 2\u2611\ufe0f\ud83c\udd97 \u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \ud83d\udc9a && \ud83d\udc8c \u2160 \u5251\u6307 Offer 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c \ud83e\udde1 && \ud83d\udc8c \u2160 150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c 224. \u57fa\u672c\u8ba1\u7b97\u5668 227. \u57fa\u672c\u8ba1\u7b97\u5668 II \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u540e\u7f00\u8868\u8fbe\u5f0f \u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u7684\u540e\u9762","title":"4.\u6808\u4e0e\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#5","text":"**\u603b\u7ed3\uff1a**\u4e8c\u53c9\u6811\u9898\u76ee\u4e0e**\u9012\u5f52\u3001\u56db\u79cd\u904d\u5386\u548cDFS\u641c\u7d22**\u76f8\u5173\u6027\u975e\u5e38\u5927\u3002\u540c\u65f6\u5f88\u591a\u9898\u76ee\u8981\u6c42**\u8fed\u4ee3\u548c\u9012\u5f52**\u4e24\u79cd\u65b9\u6cd5 \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u4e8c\u53c9\u6811\u7684\u56db\u79cd\u904d\u5386 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.\u4e8c\u53c9\u6811\u4e0e\u9012\u5f52 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.\u4e8c\u53c9\u6811\u4e0e\u641c\u7d22DFS \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 4.\u4e8c\u53c9\u6811\u5e8f\u5217\u5316 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 5.\u4e8c\u53c9\u6811\u4e0e\u52a8\u6001\u89c4\u5212 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1\u2611\ufe0f 102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 1 98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u2705 \ud83d\udc9a && \ud83d\udca5 \u2160 2\u2611\ufe0f ac 10min 2021-3-18 617. \u5408\u5e76\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 \u2161 1\u2611\ufe0f ac 101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \ud83d\udc9a && \ud83d\udca5 &&\ud83d\udc8c \u2161 2 ac(\u9012\u5f52+\u8fed\u4ee3) 10min 2021-3-18 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 \u2b50 Med \u2162 1 \u770b\u89e3\u7b54 99. \u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 \ud83d\udc98 \u2162 1 \u5251\u6307 Offer 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u2b50 \ud83d\udc98 && \ud83d\udca5 &&\ud83d\udc8c \u2163 1 \u770b\u89e3\u7b54 ... 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 \u2b50 \ud83e\udde1 && \u7c7b\u4f3coffer 37 \u2163 1 \u770b\u89e3\u7b54(\u4e0d\u592a\u4f1a) ... 2021-3-12 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II \u2b50 \ud83e\udde1 \u2164 1 \u83ab\u91cc\u65af\u904d\u5386 \u4e8c\u53c9\u641c\u7d22\u6811 \u5e73\u8861\u4e8c\u53c9\u6811 **\u83ab\u91cc\u65af\u904d\u5386:**\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u7684\u65b9\u5f0f\u90fd\u4f7f\u7528\u4e86\u8f85\u52a9\u7684\u7a7a\u95f4\uff0c\u800c\u83ab\u91cc\u65af\u904d\u5386\u7684\u4f18\u70b9\u662f\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8f85\u52a9\u7a7a\u95f4\u3002\u7f3a\u70b9\u662f\u6539\u53d8\u4e86\u6574\u4e2a\u6811\u7684\u7ed3\u6784\u3002 \u4e8c\u53c9\u641c\u7d22\u6811\uff1a \u67e5\u627e \u63d2\u5165 \u5efa\u6811 \u5220\u9664","title":"5.\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_27","text":"\u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002 95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II vector < TreeNode *> generateTrees ( int n ) { if ( n == 0 ) return vector < TreeNode *> ( 0 ); //\u4e3a0\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684\u5411\u91cf return helper ( 1 , n ); // } vector < TreeNode *> helper ( int start , int end ){ vector < TreeNode *> ans ; if ( start > end ){ ans . push_back ( NULL ); //\u4e00\u5b9a\u8981push\u4e00\u4e2aNULL\u8fdb\u53bb \u8fd9\u6837size\u81f3\u5c11\u4e3a1 \u5426\u5219\u540e\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5728\u4e00\u4e2a\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\u65e0\u6cd5\u7ee7\u7eed return ans ; } for ( int i = start ; i <= end ; ++ i ){ //i\u4ee3\u8868\u4e0d\u540c\u7684\u503c\u505a\u6839\u8282\u70b9 vector < TreeNode *> lefts = helper ( start , i -1 ); //\u5de6\u5b50\u6811\u96c6\u5408 vector < TreeNode *> rights = helper ( i + 1 , end ); //\u53f3\u5b50\u6811\u96c6\u5408 //\u4e0b\u9762\u7684\u4e24\u5c42for\u5faa\u73af\u5c31\u662f\u5de6\u5b50\u6811\u4e0e\u53f3\u5b50\u6811\u7684\u6240\u6709\u7ec4\u5408\u60c5\u51b5 for ( int k = 0 ; k < lefts . size (); k ++ ){ //\u904d\u5386\u5de6\u5b50\u6811\u96c6\u5408 for ( int j = 0 ; j < rights . size (); j ++ ){ //\u904d\u5386\u53f3\u5b50\u6811\u96c6\u5408 TreeNode * root = new TreeNode ( i ); //\u521b\u5efa\u4e00\u4e2a\u5f53\u524d\u503c\u7684\u6839\u8282\u70b9 root -> left = lefts [ k ]; //\u9009\u53d6\u5de6\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5de6\u5b50\u6811 root -> right = rights [ j ]; //\u9009\u53d6\u53f3\u5b50\u6811\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u4f5c\u4e3a\u53f3\u5b50\u6811 ans . push_back ( root ); //\u5c06\u5f53\u524d\u7684\u6811\u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d } } } return ans ; } 99.\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 //\u8981\u6c42O(1)\u7a7a\u95f4 \u53ea\u80fdMorris\u904d\u5386 void recoverTree ( TreeNode * root ) { bool flag = false ; TreeNode * rt = root ; stack < TreeNode *> S ; TreeNode * pre = NULL ; //\u5b9a\u4e49\u4e00\u4e2a\u91ce\u6307\u9488\u65f6\u4e00\u5b9a\u8981\u58f0\u660e\u662fNULL TM\u7684\u88ab\u8fd9\u4e2a\u641e\u4e86\u4e00\u4e0b\u5348 \u64cd\u64cd\u64cd TreeNode * fi = NULL ; while ( rt || ! S . empty ()){ if ( rt != NULL ){ S . push ( rt ); rt = rt -> left ; } else { rt = S . top (); S . pop (); if ( pre != NULL ) { //\u7b2c\u4e00\u4e2a\u8981\u4ea4\u6362\u7684\u8282\u70b9 \u4ed6\u7684\u503c\u5c0f\u4e8e\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u3002 if ( flag == false && pre -> val >= rt -> val ) { flag = true ; fi = pre ; } //flag\u4e3atrue\u5219\u8bf4\u660e\u627e\u5230\u4e86\u7b2c\u4e00\u4e2a\u8282\u70b9 \u7b2c\u4e8c\u4e2a\u8981\u627e\u7684\u8282\u70b9\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u70b9 //1.\u8981\u4e48\u4ed6\u7684\u540e\u4e00\u4e2a\u8282\u70b9\u503c\u5927\u4e8e\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u503c //2.\u8981\u4e48\u4ed6\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e86 \u9000\u51fawhile\u5faa\u73af\u76f4\u63a5\u4ea4\u4e92\u5373\u53ef if ( flag == true && rt -> val > fi -> val ) { swap ( fi -> val , pre -> val ); return ; } } pre = rt ; rt = rt -> right ; } } swap ( fi -> val , pre -> val ); return ; }","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_28","text":"\u516c\u5f0f\uff1a G ( n )= G (0)\u2217 G ( n \u22121)+ G (1)\u2217 G ( n \u22122)+...+ G ( n \u22121)\u2217 G (0) \u9002\u7528\u95ee\u9898\uff1a n\u5bf9\u62ec\u53f7\u6b63\u786e\u5339\u914d\u6570\u76ee \u51f8\u591a\u8fb9\u5f62\u4e09\u89d2\u5212\u5206 \u51fa\u6808\u6b21\u5e8f \u77e9\u9635\u8fde\u4e58\u62ec\u53f7\u5316\uff1a\u77e9\u9635\u8fde\u4e58\uff1a P=a1\u00d7a2\u00d7a3\u00d7\u2026\u2026\u00d7an\uff0c\u4f9d\u636e\u4e58\u6cd5\u7ed3\u5408\u5f8b\uff0c\u4e0d\u6539\u53d8\u5176\u987a\u5e8f\uff0c\u53ea\u7528\u62ec\u53f7\u8868\u793a\u6210\u5bf9\u7684\u4e58\u79ef\uff0c\u8bd5\u95ee\u6709\u51e0\u79cd\u62ec\u53f7\u5316\u7684\u65b9\u6848\u3002\uff08 h(n) \u79cd\uff09 96.\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 //\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6570\u5b66\u95ee\u9898\u3002\u5c31\u662f\u6c42\u5361\u7279\u5170\u6570 int numTrees ( int n ) { vector < int > dp ( n + 1 ); dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; for ( int i = 2 ; i < n + 1 ; ++ i ) for ( int j = 0 ; j < i ; ++ j ) dp [ i ] += dp [ j ] * dp [ i -1 - j ]; return dp [ n ]; }","title":"\u5361\u7279\u5170\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#6","text":"\u603b\u7ed3\uff1a\u56fe\u7684\u76f8\u5173\u7b97\u6cd5\u95ee\u9898\u8981\u52a0\u5f3a\u554a.... 207. \u8bfe\u7a0b\u8868 399. \u9664\u6cd5\u6c42\u503c const double eps = 1e-6 ; const int inf = 0x3f3f3f3f ; vector < double > calcEquation ( vector < vector < string >>& equations , vector < double >& values , vector < vector < string >>& queries ) { unordered_map < string , int > dir ; //\u5b57\u7b26\u603b\u6570 int cnt = 0 ; //\u7edf\u8ba1equations\u4e2d\u7684\u5b57\u7b26 \u5e76\u4e14\u5b57\u7b26\u6620\u5c04\u5230\u7d22\u5f15 for ( auto & e : equations ){ if ( ! dir . count ( e [ 0 ])) dir [ e [ 0 ]] = cnt ++ ; if ( ! dir . count ( e [ 1 ])) dir [ e [ 1 ]] = cnt ++ ; } //dp\u662f\u6743\u503c\u77e9\u9635 vector < vector < double > > dp ( cnt , vector < double > ( cnt , inf )); for ( int i = 0 ; i < cnt ; ++ i ) dp [ i ][ i ] = 1.0 ; //\u7ed9\u8def\u5f84\u8d4b\u53cc\u5411\u6743\u503c for ( int i = 0 ; i < equations . size (); ++ i ){ int u = dir [ equations [ i ][ 0 ]]; int v = dir [ equations [ i ][ 1 ]]; double w = values [ i ]; dp [ u ][ v ] = w ; dp [ v ][ u ] = 1 / w ; } //floyd\u7b97\u6cd5 for ( int k = 0 ; k < cnt ; ++ k ){ for ( int i = 0 ; i < cnt ; ++ i ){ for ( int j = 0 ; j < cnt ; ++ j ){ //abs(dp[i][l]-inf>eps) \u610f\u5373 dp[i][k]!=inf \u7cbe\u5ea6\u8981\u6c42 if ( abs ( dp [ i ][ k ] - inf ) > eps && abs ( dp [ k ][ j ] - inf ) > eps ) dp [ i ][ j ] = dp [ i ][ k ] * dp [ k ][ j ]; } } } vector < double > ans ; for ( auto & q : queries ){ //map\u7684count\u8ba1\u6570\u7528\u6cd5 \u7528!dir[q[0]] \u5219\u4e0d\u884c if ( ! dir . count ( q [ 0 ]) || ! dir . count ( q [ 1 ])){ ans . push_back ( -1.0 ); continue ; } int u = dir [ q [ 0 ]]; int v = dir [ q [ 1 ]]; if ( abs ( dp [ u ][ v ] - inf ) > eps ) ans . push_back ( dp [ u ][ v ]); else ans . push_back ( -1.0 ); } return ans ; }","title":"6.\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#7hash","text":"\u603b\u7ed3\uff1aHash\u5e38\u4e0e\u53cc\u6307\u9488\u548c\u6ed1\u52a8\u7a97\u53e3\u7ec4\u5408\u3002\u5728\u5b57\u7b26\u4e32\u6216\u8005\u6570\u7ec4\u4e2d\u5c24\u4e3a\u5e38\u89c1\u3002 unordered_map\u67e5\u8be2\u624d\u662fO(1) map\u67e5\u8be2\u662fO(logn) \u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.Hash\u4e0e\u5b57\u7b26\u4e32 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 2.Hash\u4e0e\u6570\u7ec4 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 3.Hash\u4e0e\u53cc\u6307\u9488/\u6ed1\u52a8\u7a97\u53e3 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 4.Hash\u8bbe\u8ba1 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 \ud83d\udc34 \ud83e\udde1 && \ud83d\udca5 &&\ud83d\udc8c \u2160 2\u2611\ufe0f\ud83c\udd97 ac 49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 \ud83e\udde1 && \ud83d\udca5 \u2160 1 76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 \u2b50 \ud83d\udc98 && \ud83d\udca5 \u2160&& \u2162 2 \u770b\u89e3\u7b54 705. \u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408 \ud83d\udc9a && \ud83d\udd05 1 \u770b\u89e3\u7b54 5min 2021-3-13 706. \u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04 \ud83d\udc9a && \ud83d\udd05 1 \u4e24\u6b21ac 10min 2021-3-14","title":"7.Hash"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#8","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 \ud83e\udde1&&\ud83d\udc8c \u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \ud83d\udc98&&\ud83d\udc8c 215. \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20 \ud83e\udde1&&\ud83d\udca5 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"8.\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#9","text":"\u7c7b\u578b \u91cd\u8981\u7a0b\u5ea6 \u96be\u5ea6 \u638c\u63e1\u7a0b\u5ea6 1.\u9898\u578b \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50 \u9898\u76ee \u96be\u5ea6&\u91cd\u8981\u7a0b\u5ea6 \u7c7b\u578b \u7ec3\u4e60\u6b21\u6570 \u6700\u540e\u4e00\u6b21\u60c5\u51b5 \u5b8c\u6210\u65f6\u95f4 \u4e0a\u6b21\u65f6\u95f4 \u2b50 \u2b55\ud83d\udc98\ud83e\udde1\ud83d\udc9a && \ud83d\udca5\u2705\ud83d\udc34\ud83d\udc8c\ud83d\udd05 \u2160 2\u2611\ufe0f\ud83c\udd97 Medium \u2160 1","title":"9.\u5e76\u67e5\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_29","text":"","title":"\u7ecf\u9a8c\u79ef\u7d2f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_30","text":"\u6a21\u677f","title":"\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#io","text":"\u603b\u7ed3\uff1a\u53ef\u4ee5\u770b\u770bC++\u8f93\u5165\u8f93\u51fa\u5904\u7406 \u5c24\u5176\u662fstringstream \u548c getline\u7b49\u7528\u6cd5 331. \u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316 C++:cin\u3001cin.getline()\u3001getline()\u7684\u7528\u6cd5 \u5f53 cin \u8bfb\u53d6\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u4f20\u9012\u5e76\u5ffd\u7565\u4efb\u4f55\u524d\u5bfc\u767d\u8272\u7a7a\u683c\u5b57\u7b26\uff08\u7a7a\u683c\u3001\u5236\u8868\u7b26\u6216\u6362\u884c\u7b26\uff09\u3002\u4e00\u65e6\u5b83\u63a5\u89e6\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u5373\u5f00\u59cb\u9605\u8bfb\uff0c\u5f53\u5b83\u8bfb\u53d6\u5230\u4e0b\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5b83\u5c06\u505c\u6b62\u8bfb\u53d6\u3002 getline\u51fd\u6570\u53ef\u8bfb\u53d6\u6574\u884c\uff0c\u5305\u62ec\u524d\u5bfc\u548c\u5d4c\u5165\u7684\u7a7a\u683c\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u5bf9\u8c61\u4e2d\u3002 getline(cin,'\\n'); cin\u4e3a\u8f93\u5165\u6d41 '\\n'\u4e3a\u7ed3\u675f\u7b26 \u4e5f\u53ef\u5199\u4f5cgetline(str, tmp, ',') \u5c31\u662f\u8f93\u5165\u5b57\u7b26\u4e32\u4e3astr, \u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53d8\u91cf\u4e3atmp \u3002','\u4e3a\u7ed3\u675f\u7b26 \u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5b9e\u73b0C++\u4e2d\u6ca1\u6709\u7684split\u65b9\u6cd5","title":"IO\u5904\u7406"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#c","text":"C++ Lambda\u8868\u8fbe\u5f0f \u53c2\u8003 auto \u5173\u952e\u5b57 \u53c2\u8003","title":"C++\u8bed\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_31","text":"\u82e5\u975e\u5c3e\u9012\u5f52\uff0c\u9012\u5f52\u4f1a\u6d88\u8017O(logn)\u7684\u7a7a\u95f4\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u4fdd\u7559O(logn)\u7684\u5806\u6808\u5e27\u3002 \u4e00\u822c\u80fd\u7528\u9012\u5f52\u5199\u7684\u90fd\u80fd\u7528\u52a8\u6001\u89c4\u5212\u91cd\u5199\u3002\u800c\u4e14\u5728\u6570\u5b66\u76f8\u5173\u95ee\u9898\u4e2d\uff0c\u9012\u5f52\u975e\u5e38\u5bb9\u6613\u8d85\u65f6\u3002","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#7","text":"\u4f8b125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u8bb0\u4e00\u7b14 c++\u7684\u51e0\u4e2a\u5185\u7f6e\u51fd\u6570 islower(char c) \u662f\u5426\u4e3a\u5c0f\u5199\u5b57\u6bcd isupper(char c) \u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd isdigit(char c) \u662f\u5426\u4e3a\u6570\u5b57 isalpha(char c) \u662f\u5426\u4e3a\u5b57\u6bcd isalnum(char c) \u662f\u5426\u4e3a\u5b57\u6bcd\u6216\u8005\u6570\u5b57 toupper(char c) \u5b57\u6bcd\u5c0f\u8f6c\u5927 tolower(char c) \u5b57\u6bcd\u5927\u8f6c\u5c0f","title":"7\u4e2a\u5b57\u6bcd\u6570\u5b57\u5224\u65ad\u76f8\u5173\u7684\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#tips","text":"\u957f\u5ea6\u4e3ak\u7684\u6709\u5e8f\u5411\u91cf\u7684**\u4e2d\u4f4d\u6570\u6c42\u6cd5**\uff1a\u65e0\u8bba\u5947\u5076,\u90fd\u662f( num[k/2]+num[(k-1)/2])/2 \u4e5f\u5373**\u7d22\u5f15\u4e3a(size-1)/2\u548csize/2\u5904\u503c\u548c\u7684\u5e73\u5747** **\u4e2d\u95f4\u7684\u6570mid**\u4e00\u822c\u4e3ak/2,k\u4e3a\u5076\u6570\u65f6\u4e3a\u504f\u540e\u7684\u90a3\u4e00\u4e2a\u4e2d\u95f4\u6570 \u4e00\u4e9b\u521d\u59cb\u5316\u65b9\u6cd5 \uff1amultiset window(nums.begin(),nums.begin()+k); \u521b\u5efaiterator\u5bf9\u8c61 \u3002\u5982 c++ vector<int> a(20,1); vector<int>::iterator tmp = upper_bound(a.begin(), a.end(), val; \u5bb9\u5668\u9002\u914d\u5668 stack\u3001queue \u548c priority_queue \u6ca1\u6709\u8fed\u4ee3\u5668 \u5c3e\u9012\u5f52( tail-recursive )\uff1a\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory() // \u5c3e\u9012\u5f52\uff0c\u8fdb\u5165\u4e0b\u4e00\u4e2a\u51fd\u6570\u4e0d\u518d\u9700\u8981\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u73af\u5883\u4e86\uff0c\u5f97\u51fa\u7ed3\u679c\u4ee5\u540e\u76f4\u63a5\u8fd4\u56de\u3002 } function story() { \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u4e00\u5929\u8001\u548c\u5c1a\u5bf9\u5c0f\u548c\u5c1a\u8bb2\u6545\u4e8b\uff1astory()\uff0c\u5c0f\u548c\u5c1a\u542c\u4e86\uff0c\u627e\u4e86\u5757\u8c46\u8150\u649e\u6b7b\u4e86 // \u975e\u5c3e\u9012\u5f52\uff0c\u4e0b\u4e00\u4e2a\u51fd\u6570\u7ed3\u675f\u4ee5\u540e\u6b64\u51fd\u6570\u8fd8\u6709\u540e\u7eed\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u5b58\u672c\u8eab\u7684\u73af\u5883\u4ee5\u4f9b\u5904\u7406\u8fd4\u56de\u503c\u3002 } string\u52a0\u6cd5\u7528\u201c+\u201d\u5f88\u8017\u65f6 \u7528append()\u548cpush_back()\u65b9\u6cd5\u66f4\u597d \u4f20\u5f15\u7528\u901f\u5ea6\u8981\u5feb\u5f88\u591a \u5b57\u7b26\u4e32 tmp.substr(start, num) tmp.erase(tmp.size()-word.size()-1, word.size()+1); \u5220\u9664\u5012\u6570k\u4e2a\u5143\u7d20 tmp.erase(tmp.size()-k, k) \u9012\u63a8\u6cd5\u81ea\u5e95\u5411\u4e0a \u9012\u5f52\u6cd5\u81ea\u9876\u5411\u4e0b","title":"TIPs"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_32","text":"//range [first,last) //parameters (first, last, val) //return iterator lower_bound (); //first position that not less than the value upper_bound (); //first position that greater than the value // lower_bound/upper_bound example #include <iostream> // std::cout #include <algorithm> // std::lower_bound, std::upper_bound, std::sort #include <vector> // std::vector int main () { int myints [] = { 10 , 20 , 30 , 30 , 20 , 10 , 10 , 20 }; std :: vector < int > v ( myints , myints + 8 ); // 10 20 30 30 20 10 10 20 std :: sort ( v . begin (), v . end ()); // 10 10 10 20 20 20 30 30 std :: vector < int >:: iterator low , up ; low = std :: lower_bound ( v . begin (), v . end (), 20 ); // ^ up = std :: upper_bound ( v . begin (), v . end (), 20 ); // ^ std :: cout << \"lower_bound at position \" << ( low - v . begin ()) << '\\n' ; std :: cout << \"upper_bound at position \" << ( up - v . begin ()) << '\\n' ; return 0 ; }","title":"\u5e38\u7528\u51fd\u6570\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E9%A2%98%E9%9B%86/%E7%AE%97%E6%B3%95%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/#_33","text":"LeetBook + Top100 + \u516c\u53f8\u4e13\u9898 + \u5251\u6307offer + \u9762\u8bd5\u91d1\u5178 + \u725b\u5ba2 \u529b\u6263\u52a0\u52a0 \u7b97\u6cd5\u6a21\u677f\u63d2\u4ef6 \u7b97\u6cd5\u7b14\u8bb0+\u7b97\u6cd54+\u5de6\u7a0b\u4e91\u6700\u4f18\u89e3 PAT labuladong AcWing","title":"\u7b97\u6cd5\u8d44\u6e90"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/","text":"\u4e0d\u7ba1\u662f\u6625\u62db\u8fd8\u662f\u79cb\u62db\uff0c\u6821\u62db\u751f\u662f\u907f\u514d\u4e0d\u4e86\u5237\u9898\u64cd\u4f5c\u7684\uff0c\u4eca\u5929\u6211\u603b\u7ed3\u4e86\u4e00\u4e0b\u81ea\u5df1\u79cb\u62db\u8fc7\u7a0b\u5bf9leetcode\u9898\u76ee\u8fdb\u884c\u5206\u7c7b\u5e76\u9488\u5bf9\u6027\u7ec3\u4e60\u7684\u8fc7\u7a0b\u3002 \u4e00\u4e9b\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u7ec3\u4e60\uff0c\u5efa\u8bae\u7ed3\u5408\u5927\u8bdd\u6570\u636e\u7ed3\u6784\u8fd9\u672c\u4e66\u98df\u7528\u3002\u91cc\u9762\u6709\u4e00\u90e8\u5206\u8bed\u8a00\u7279\u6027\uff0c\u6ce8\u610f\u603b\u7ed3\u4e0e\u5206\u6790\uff0c\u6709\u52a9\u4e8e\u52a0\u6df1\u6570\u636e\u7ed3\u6784\u57fa\u7840\u7684\u7406\u89e3\u3002 \u57fa\u672c\u6570\u636e\u7ed3\u6784\u603b\u7ed3 \u63a8\u8350\u9898\u76ee\uff1a LeetCode 1. Two Sum LeetCode 187. Repeated DNA Sequences LeetCode 706. Design HashMap LeetCode 652. Find Duplicate Subtrees LeetCode 560. Subarray Sum Equals K LeetCode 547. Friend Circles LeetCode 684. Redundant Connection LeetCode 692. Top K Frequent Words LeetCode 295. Find Median from Data Stream LeetCode 352. Data Stream as Disjoint Intervals \u4e8c\u5206\u67e5\u627e\u4e00\u822c\u662f\u5728\u5355\u8c03\u6709\u5e8f\u7684\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u800c\u5b9e\u9645\u7684\u53d8\u4f53\u5374\u662f\u5f88\u7075\u6d3b\u7684\u3002\u4f8b\u5982lc287\u9898\u5c31\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u5e94\u7528\uff0c\u5173\u4e8e\u4e8c\u5206\u5185\u5bb9\uff0c\u63a8\u8350\u4e0b\u9762\u51e0\u9053\u9898\u76ee\uff0c\u6263\u597d\u8fb9\u754c\u662f\u5173\u952e\u3002 \u4e8c\u5206\u4e13\u9898 Leetcode 69. sqrt x Leetcode 35. Search insert position LeetCode 34. Find First and Last Position of Element in Sorted Array LeetCode 74. Search a 2D Matrix LeetCode 153. Find Minimum in Rotated Sorted Array LeetCode 33. Search in Rotated Sorted Array LeetCode 278. First Bad Version LeetCode 162. Find Peak Element LeetCode 287. Find the Duplicate Number LeetCode 275. H-Index II \u5173\u4e8e\u94fe\u8868\uff0c\u8003\u70b9\u5c45\u591a\uff0c\u4f46\u662f\u5e38\u8003\u7684\u9898\u76ee\u56fa\u5b9a\uff0c\u6821\u62db\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u7684\u66f4\u591a\u7684\u662f\u9006\u7f6e\u7b49\u95ee\u9898\uff0c\u8fd9\u91cc\u603b\u7ed3\u4e86\u51e0\u9053\u9898\u76ee\uff0c\u4e2a\u4eba\u5efa\u8bae\u5c06\u94fe\u8868\u6392\u5e8f\u8fd9\u90e8\u5206\u7740\u91cd\u590d\u4e60\uff0c\u4f8b\u5982\u94fe\u8868\u5feb\u6392\uff0c\u94fe\u8868\u63d2\u6392\uff0c\u94fe\u8868\u5f52\u5e76\u6392\uff0c\u90fd\u8003\u8fc7\uff0c\u5c24\u5176\u662f\u5b57\u8282\u7684\u9762\u8bd5\u5b98\uff0c\u975e\u5e38\u559c\u6b22\u8003\u94fe\u8868\u7684\u9898\u76ee\uff0c\u8fd9\u90e8\u5206\u9898\u76ee\uff0c\u6263\u597d\u7ec6\u8282\u5373\u53ef\u3002 \u94fe\u8868\u4e13\u9898 \u63a8\u8350\u9898\u76ee: LeetCode 19. Remove Nth Node From End of List LeetCode 237. Delete Node in a Linked List LeetCode 83. Remove Duplicates from Sorted List LeetCode 61. Rotate List LeetCode 24. Swap Nodes in Pairs LeetCode 206. Reverse Linked List LeetCode 92. Reverse Linked List II LeetCode 160. Intersection of Two Linked Lists LeetCode 142. Linked List Cycle II LeetCode 148. Sort List \u6811\u4e0e\u4e8c\u53c9\u6811\u540c\u6837\u662f\u5b57\u8282\u9762\u8bd5\u5b98\u559c\u6b22\u8003\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u80fd\u591f\u5f88\u597d\u7684\u9a8c\u8bc1\u9762\u8bd5\u8005\u5bf9\u9012\u5f52\u64cd\u4f5c\u5f97\u7406\u89e3\u4e0e\u638c\u63e1\u3002\u5185\u5bb9\u4ee5\u4e8c\u53c9\u6811\u5c45\u591a\uff0c\u4e8c\u53c9\u6811\u7684\u51e0\u79cd\u904d\u5386\u65b9\u6cd5\u9700\u8981\u70c2\u719f\u4e8e\u5fc3\uff08\u975e\u9012\u5f52\u7248\u672c\uff09 \u6811\u4e13\u9898 \u63a8\u8350\u9898\u76ee: LeetCode 98. Validate Binary Search Tree LeetCode 101. Symmetric Tree LeetCode 94. Binary Tree Inorder Traversal LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal LeetCode 102. Binary Tree Level Order Traversal LeetCode 236. Lowest Common Ancestor of a Binary Tree LeetCode 297. Serialize and Deserialize Binary Tree LeetCode 543. Diameter of Binary Tree LeetCode 124. Binary Tree Maximum Path Sum LeetCode 173. Binary Search Tree Iterator \u5b57\u7b26\u4e32\u5904\u7406\u662f\u5e38\u89c1\u9898\u76ee\uff0c\u8fd9\u90e8\u5206\u4e0d\u591a\u8bf4\uff0c\u4e3b\u8981\u7a7a\u683c\u548c\u9017\u53f7\uff0c\u5c5e\u4e8e\u4e00\u4e9b\u5e38\u89c4\u9898\u76ee\uff0c\u7b80\u5355\u63a8\u8350\u51e0\u9053\uff0c\u53ef\u4ee5\u5305\u542b\u51e0\u79cd\u5e38\u89c1\u7684\u7c7b\u578b\u4e86 \u5b57\u7b26\u4e32\u5904\u7406 \u63a8\u8350\u9898\u76ee: LeetCode 38. Count and Say LeetCode 49. Group Anagrams LeetCode 151. Reverse Words in a String LeetCode 165. Compare Version Numbers LeetCode 929. Unique Email Addresses LeetCode 5. Longest Palindromic Substring LeetCode 6. ZigZag Conversion LeetCode 3. Longest Substring Without Repeating Characters LeetCode 208. Implement Trie (Prefix Tree) LeetCode 273. Integer to English Words \u4ece\u8fd9\u5f00\u59cb\uff0c\u8fdb\u5165\u8650\u5fc3\u6a21\u5f0f\uff0c\u8fd9\u90e8\u5206\u9898\u76ee\u6211\u5237\u4e86\u6574\u6574\u4e24\u5929\uff0c\u5237\u7684\u6e05\u723d\u7684\u4e0d\u5f97\u4e86\u3002\u4e3b\u8981\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u4e0e\u56de\u6eaf\uff0c\u8fd9\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u5927\uff0c\u7ecf\u5e38\u96be\u4ee5\u627e\u5230\u5408\u9002\u7684\u601d\u8def\u3002 \u56de\u6eaf\u6cd5\u4e0e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u63a8\u8350\u9898\u76ee\uff1a LeetCode 17. Letter Combinations of a Phone Number LeetCode 79. Word Search LeetCode 46. Permutations LeetCode 47. Permutations II LeetCode 78. Subsets LeetCode 90. Subsets II LeetCode 216. Combination Sum III LeetCode 52. N-Queens II LeetCode 37. Sudoku Solver LeetCode 473. Matchsticks to Square \u8fd9\u90e8\u5206\u9898\u76ee\u6d89\u53ca\u5230\u4e00\u4e9b\u8f83\u4e3a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c \u6ed1\u52a8\u7a97\u53e3\u3001\u53cc\u6307\u9488\u4e0e\u5355\u8c03\u961f\u5217/\u6808 \u63a8\u8350\u9898\u76ee\uff1a LeetCode 167. Two Sum II - Input array is sorted LeetCode 88. Merge Sorted Array LeetCode 26. Remove Duplicates from Sorted Array LeetCode 76. Minimum Window Substring LeetCode 32. Longest Valid Parentheses LeetCode 155. Min Stack LeetCode 42. Trapping Rain Water LeetCode 84. Largest Rectangle in Histogram LeetCode 239. Sliding Window Maximum LeetCode 918. Maximum Sum Circular Subarray \u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u6700\u96be\u7684\u90e8\u5206\uff0c\u4f46\u662f\u5b66\u4f1a\u4e4b\u540e\u5c31\u4f1a\u5f88\u8212\u670d\u3002DP\u65e5\u6e10\u6210\u4e3a\u5404\u5927\u516c\u53f8\u9762\u8bd5\u7684\u5fc5\u8003\u70b9\u3002\u901a\u8fc7DP\u53ef\u4ee5\u6709\u6548\u7684\u51cf\u5c11\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u91cd\u590d\u8ba1\u7b97\u3002 \u52a8\u6001\u89c4\u5212 \u63a8\u8350\u9898\u76ee\uff1a LeetCode 53. Maximum Subarray LeetCode 120. Triangle LeetCode 63. Unique Paths II LeetCode 91. Decode Ways LeetCode 198. House Robber LeetCode 300. Longest Increasing Subsequence LeetCode 72. Edit Distance LeetCode 518. Coin Change 2 LeetCode 664. Strange Printer LeetCode 10. Regular Expression Matching \u4ee5\u4e0a\uff0c\u662f\u6211\u5237\u7684\u90e8\u5206leetcode\u9898\u76ee\uff0c\u5076\u5c14\u8fd8\u4f1a\u6253\u6253\u5468\u8d5b\u3002\u53e6\u5916\uff0c\u5251\u6307offer\u662f\u5fc5\u5237\u7684\u3002\u4e2a\u4eba\u6bd4\u8f83\u63a8\u8350\u725b\u5ba2\u7f51\u7684\u5251\u6307offer\u9898\u76ee\u3002\u6700\u540e\uff0c\u795d\u5404\u4f4d\u540c\u5b66\u9762\u8bd5\u987a\u5229\uff0c\u62ff\u5230\u6ee1\u610f\u7684offer \u4e8c\u5206\u67e5\u627e \u00b6 \u4e8c\u5206\u67e5\u627e [\u725b\u5ba2]\uff1aLC\u4e0a\u627e\u4e0d\u5230\u4e00\u6a21\u4e00\u6837\u7684\u3002 \u6c42\u5e73\u65b9\u6839 \u6ed1\u52a8\u7a97\u53e3 \u00b6 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570* \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u6570\u7ec4 \u00b6 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u6570\u7ec4\u4e2d\u51fa\u73b0\u8d85\u8fc7\u4e00\u534a\u7684\u6570* \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \u63a5\u96e8\u6c34 \u87ba\u65cb\u77e9\u9635 \u9006\u5e8f\u5bf9* \u94fe\u8868 \u00b6 \u53cd\u8f6c\u94fe\u8868 k\u4e2a\u4e00\u7ec4\u53cd\u8f6c\u94fe\u8868 \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u73af\u5f62\u94fe\u8868 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \u5408\u5e76\u6709\u5e8f\u94fe\u8868 \u94fe\u8868\u6c42\u548c \u56de\u6587\u94fe\u8868 \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868 \u4e8c\u53c9\u6811 \u00b6 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u5927\u8282\u70b9 \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84* \u4e8c\u53c9\u6811\u7684\u6700\u5927\u8def\u5f84\u548c \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe* TopK \u00b6 \u6700\u5c0f\u7684k\u4e2a\u6570 \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20 \u8bbe\u8ba1\u9898 \u00b6 \u6700\u5c0f\u6808 \u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 LRU\u7f13\u5b58\u673a\u5236 \u52a8\u6001\u89c4\u5212 \u00b6 \u9752\u86d9\u8df3\u53f0\u9636 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u7f16\u8f91\u8ddd\u79bb* \u96f6\u94b1\u5151\u63622* \u5176\u4ed6 \u00b6 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570* \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d* \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570* \u590d\u539fIP\u5730\u5740 \u7cfb\u5217\u9898 \u00b6 X\u6570\u4e4b\u548c\u7cfb\u5217\uff1a \u00b6 \u4e24\u6570\u4e4b\u548c \u4e09\u6570\u4e4b\u548c \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c* \u80a1\u7968\u7cfb\u5217\uff1a \u00b6 \u8fd9\u7cfb\u5217\u8fd8\u67094\uff0c\u6709\u4f59\u529b\u7684\u540c\u5b66\u53ef\u4ee5\u505a\u505a \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a1 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a2 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a3 \u62ec\u53f7\u7cfb\u5217\uff1a \u00b6 \u6ce8\u610f\u89e3\u6cd5\u4e0a\u7684\u4f18\u5316\uff0c\u8fd9\u7cfb\u5217\u8981\u641e\u5b9a\u6700\u4f18\u89e3 \u6709\u6548\u62ec\u53f7 \u6700\u957f\u6709\u6548\u62ec\u53f7 \u5404\u516c\u53f8\u5e38\u8003\u9898\u8865\u5145 \u00b6 \u4e0b\u65b9\u5217\u8868\uff0c\u5c55\u793a\u7684\u662f\u9664\u4e86\u4e0a\u9762\u63d0\u5230\u7684\u9898\u76ee\u4ee5\u5916\uff0c\u5404\u81ea\u8fd8\u5e38\u8003\u7684\u9898\u76ee\u3002 \u5b57\u8282\uff08\u5f85\u9a8c\u8bc1\uff09 \u00b6 \u5355\u8bcd\u641c\u7d22 \u91cd\u6392\u94fe\u8868 \u9a8c\u8bc1\u6808\u5e8f\u5217 \u5b57\u5178\u5e8f\u6392\u6570 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u526a\u7ef3\u5b50I \u526a\u7ef3\u5b50II \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e0b\u4e00\u4e2a\u6570","title":"\u7cbe\u9009Leetcode"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_1","text":"\u4e8c\u5206\u67e5\u627e [\u725b\u5ba2]\uff1aLC\u4e0a\u627e\u4e0d\u5230\u4e00\u6a21\u4e00\u6837\u7684\u3002 \u6c42\u5e73\u65b9\u6839","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_2","text":"\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570* \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_3","text":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u6570\u7ec4\u4e2d\u51fa\u73b0\u8d85\u8fc7\u4e00\u534a\u7684\u6570* \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef \u63a5\u96e8\u6c34 \u87ba\u65cb\u77e9\u9635 \u9006\u5e8f\u5bf9*","title":"\u6570\u7ec4"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_4","text":"\u53cd\u8f6c\u94fe\u8868 k\u4e2a\u4e00\u7ec4\u53cd\u8f6c\u94fe\u8868 \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u73af\u5f62\u94fe\u8868 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \u5408\u5e76\u6709\u5e8f\u94fe\u8868 \u94fe\u8868\u6c42\u548c \u56de\u6587\u94fe\u8868 \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868","title":"\u94fe\u8868"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_5","text":"\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c k \u5927\u8282\u70b9 \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84* \u4e8c\u53c9\u6811\u7684\u6700\u5927\u8def\u5f84\u548c \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe*","title":"\u4e8c\u53c9\u6811"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#topk","text":"\u6700\u5c0f\u7684k\u4e2a\u6570 \u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20","title":"TopK"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_6","text":"\u6700\u5c0f\u6808 \u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 LRU\u7f13\u5b58\u673a\u5236","title":"\u8bbe\u8ba1\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_7","text":"\u9752\u86d9\u8df3\u53f0\u9636 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 \u7f16\u8f91\u8ddd\u79bb* \u96f6\u94b1\u5151\u63622*","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_8","text":"\u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570* \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d* \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570* \u590d\u539fIP\u5730\u5740","title":"\u5176\u4ed6"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_9","text":"","title":"\u7cfb\u5217\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#x","text":"\u4e24\u6570\u4e4b\u548c \u4e09\u6570\u4e4b\u548c \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c*","title":"X\u6570\u4e4b\u548c\u7cfb\u5217\uff1a"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_10","text":"\u8fd9\u7cfb\u5217\u8fd8\u67094\uff0c\u6709\u4f59\u529b\u7684\u540c\u5b66\u53ef\u4ee5\u505a\u505a \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a1 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a2 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a3","title":"\u80a1\u7968\u7cfb\u5217\uff1a"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_11","text":"\u6ce8\u610f\u89e3\u6cd5\u4e0a\u7684\u4f18\u5316\uff0c\u8fd9\u7cfb\u5217\u8981\u641e\u5b9a\u6700\u4f18\u89e3 \u6709\u6548\u62ec\u53f7 \u6700\u957f\u6709\u6548\u62ec\u53f7","title":"\u62ec\u53f7\u7cfb\u5217\uff1a"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_12","text":"\u4e0b\u65b9\u5217\u8868\uff0c\u5c55\u793a\u7684\u662f\u9664\u4e86\u4e0a\u9762\u63d0\u5230\u7684\u9898\u76ee\u4ee5\u5916\uff0c\u5404\u81ea\u8fd8\u5e38\u8003\u7684\u9898\u76ee\u3002","title":"\u5404\u516c\u53f8\u5e38\u8003\u9898\u8865\u5145"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9BLeetCode%E7%B2%BE%E9%80%89%E9%A2%98%E7%9B%AE/#_13","text":"\u5355\u8bcd\u641c\u7d22 \u91cd\u6392\u94fe\u8868 \u9a8c\u8bc1\u6808\u5e8f\u5217 \u5b57\u5178\u5e8f\u6392\u6570 \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u526a\u7ef3\u5b50I \u526a\u7ef3\u5b50II \u6700\u957f\u56de\u6587\u5b50\u4e32 \u4e0b\u4e00\u4e2a\u6570","title":"\u5b57\u8282\uff08\u5f85\u9a8c\u8bc1\uff09"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%90%84%E5%85%AC%E5%8F%B8%E6%8A%95%E7%AE%80%E5%8E%86%E5%AE%98%E6%96%B9%E5%9C%B0%E5%9D%80/","text":"\u6821\u62db\u4fe1\u606f\u53ef\u4ee5\u770b\u54ea\u4e9b\u7f51\u7ad9 \u5e94\u5c4a\u751f\u6c42\u804c\u7f51\uff1ahttp://www.yingjiesheng.com/ \u4f1a\u6709\u4e00\u4e9b\u516c\u53f8\u62db\u8058\u5b9e\u4e60\u751f\u548c\u5e94\u5c4a\u751f\u7684\u4fe1\u606f\uff0c\u4e00\u822c\u4f1a\u7559\u4e0b\u7b80\u5386\u6295\u9012\u65b9\u5f0f\uff0c\u6295\u9012\u7b80\u5386\u540e\u5173\u6ce8\u7535\u8bdd\u5c31\u884c\u4e86 \u62c9\u52fe\u7f51\uff1ahttps://www.lagou.com/ \u9002\u5408\u627e\u5185\u63a8\u3002 \u5927\u8857\u7f51\uff1ahttp://www.dajie.com/ \u6709\u6821\u56ed\u9891\u9053\uff0c\u4f1a\u6709\u4e00\u4e9b\u4f01\u4e1a\u7684\u62db\u8058\u4fe1\u606f \u5feb\u641c\u641c\uff1ahttp://www.ksousou.com/ \u505a\u6821\u4f01\u62db\u8058\u7684\uff0c\u4e0a\u9762\u6709\u5f88\u591a\u4f01\u4e1a\u7684\u62db\u8058\u4fe1\u606f\u53ef\u4ee5\u81ea\u5df1\u53bb\u770b \u725b\u5ba2\u7f51\uff1ahttps://www.nowcoder.com/ \u65b0\u664b\u5347\u7684\u4e92\u8054\u7f51\u62db\u8058\u65b0\u8d35\uff0c\u4e13\u6ce8\u6821\u62db \u5404\u5927\u4e92\u8054\u7f51\u516c\u53f8\u6821\u62db\u5b98\u7f51\uff1a \u5fae\u8f6f\uff1ahttp://www.joinms.com/cn_c/index.html \u963f\u91cc\uff1ahttps://campus.alibaba.com/index.htm \u767e\u5ea6\uff1ahttps://talent.baidu.com/external/baidu/campus.html \u817e\u8baf\uff1ahttps://join.qq.com/ \u4eac\u4e1c\uff1a http://campus.jd.com \u534e\u4e3a\uff1ahttp://career.huawei.com/reccampportal/next/mini/index.html \u7f51\u6613\uff1a http://campus.163.com \u7f51\u6613\u6e38\u620f\uff1a http://game.campus.163.com/ 360\uff1ahttp://campus.chinahr.com/2019/qihu360/index.html \u643a\u7a0b\uff1ahttp://campus.ctrip.com/ \u5b8c\u7f8e\u4e16\u754c:http://campus.wanmei.com/ 4399\uff1ahttp://web.4399.com/campus/ \u53bb\u54ea\u513f\uff1ahttp://qunar.zhiye.com/xyindex \u6597\u9c7c\uff1ahttp://douyu.zhiye.com/Campus \u77e5\u4e4e\uff1ahttp://zhihu.zhiye.com/Campus \u987a\u4e30\uff1ahttp://campus.sf-tech.com.cn/campusRecruitment/Default.html \u73cd\u7231\u7f51\uff1a http://zhenai.zhiye.com/Campus \u827a\u9f99\uff1ahttp://join.ly.com/index/cn/campus/yjszp.html?type=zpgw \u76db\u5927\uff1a http://shandagames.zhiye.com/Campus \u552f\u54c1\u4f1a\uff1a http://campus.vip.com \u5de8\u4eba\uff1a http://hr.ztgame.com/campus/ \u94f6\u8054\uff1a https://billcloud.unionpay.com/wxweb/UPJob/index \u7f8e\u56e2\u70b9\u8bc4\uff1ahttps://campus.meituan.com \u65b0\u6d6a\uff1ahttps://career.sina.com.cn/portal/campusposition/list \u641c\u72d0\uff1ahttp://campus.sohu.com/2019/sohu/02/index.html \u5c0f\u7c73\uff1ahttp://campus.hr.xiaomi.com/ \u62fc\u591a\u591a\uff1ahttps://www.pinduoduo.com/campus.html \u7f8e\u4e3d\u8054\u5408\uff1ahttps://job.mogujie.com/#/campus?_k=h227c9 \u6ef4\u6ef4\uff1ahttp://campus.didichuxing.com/campus/schedule \u4eca\u65e5\u5934\u6761&\u6296\u97f3\uff1ahttps://job.bytedance.com/campus/position 58&\u8d76\u96c6\uff1ahttp://campus.58.com/ \u964c\u964c\uff1ahttps://app.mokahr.com/campus_apply/immomo/2048 \u4e9a\u9a6c\u900a\uff1ahttps://campus.51job.com/amazon/index.html \u5f53\u5f53\uff1ahttp://zhaopin.dangdang.com/ \u7231\u5947\u827a\uff1ahttps://zhaopin.iqiyi.com/school-index.html \u91d1\u5c71\uff1ahttp://campus.51job.com/kingsoft/recruit_b.html \u5927\u7586\uff1ahttps://we.dji.com/zh-CN/campus \u8fc5\u96f7\uff1ahttp://campus.xunlei.com/index.html \u6709\u8d5e\uff1ahttp://campus.youzan.com/campus_apply/youzan/3749 \u540c\u82b1\u987a\uff1ahttp://job.10jqka.com.cn/school.html 51\u4fe1\u7528\u5361\uff1ahttps://campus.u51.com/campus_apply/u51/3256 \u82cf\u5b81\u6613\u8d2d\uff1ahttp://campus.suning.cn/rps-campus/ \u9014\u725b\uff1ahttp://tuniu.zhaopin.com/ \u7528\u53cb\uff1ahttp://www.yonyou.com/school/qa.html \u74dc\u5b50\u4e8c\u624b\u8f66\uff1ahttp://campus.51job.com/guazi/flash.html \u730e\u8c79\uff1ahttp://hr.cmcm.com/campus \u66f4\u591a\u516c\u53f8\u8bf7\u6295\u8fc7\u767e\u5ea6\u641c\u7d22\uff0c\u5173\u952e\u5b57\uff1a\"\u516c\u53f8\u540d \u6821\u62db\"","title":"\u6295\u7b80\u5386"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/","text":"\u2022\u5982\u4f55\u4ece\u5927\u91cf\u7684 URL \u4e2d\u627e\u51fa\u76f8\u540c\u7684 URL\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u4ece\u5927\u91cf\u6570\u636e\u4e2d\u627e\u51fa\u9ad8\u9891\u8bcd\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u627e\u51fa\u67d0\u4e00\u5929\u8bbf\u95ee\u767e\u5ea6\u7f51\u7ad9\u6700\u591a\u7684 IP\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u5728\u5927\u91cf\u7684\u6570\u636e\u4e2d\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6574\u6570\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u5728\u5927\u91cf\u7684\u6570\u636e\u4e2d\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5b58\u5728\uff1f\uff08\u817e\u8baf\uff09 \u2022\u5982\u4f55\u67e5\u8be2\u6700\u70ed\u95e8\u7684\u67e5\u8be2\u4e32\uff1f\uff08\u817e\u8baf\uff09 \u2022\u5982\u4f55\u7edf\u8ba1\u4e0d\u540c\u7535\u8bdd\u53f7\u7801\u7684\u4e2a\u6570\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u4ece 5 \u4ebf\u4e2a\u6570\u4e2d\u627e\u51fa\u4e2d\u4f4d\u6570\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u6309\u7167 query \u7684\u9891\u5ea6\u6392\u5e8f\uff1f\uff08\u767e\u5ea6\uff09 \u2022\u5982\u4f55\u627e\u51fa\u6392\u540d\u524d 500 \u7684\u6570\uff1f\uff08\u817e\u8baf\uff09 \u7b54\u6848\u5462\uff1f \u5f80\u4e0b\u770b~ \u9898\u76ee1 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a a\u3001b \u4e24\u4e2a\u6587\u4ef6\uff0c\u5404\u5b58\u653e 50 \u4ebf\u4e2a URL\uff0c\u6bcf\u4e2a URL \u5404\u5360 64B\uff0c\u5185\u5b58\u9650\u5236\u662f 4G\u3002\u8bf7\u627e\u51fa a\u3001b \u4e24\u4e2a\u6587\u4ef6\u5171\u540c\u7684 URL\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u6bcf\u4e2a URL \u5360 64B\uff0c\u90a3\u4e48 50 \u4ebf\u4e2a URL\u5360\u7528\u7684\u7a7a\u95f4\u5927\u5c0f\u7ea6\u4e3a 320GB\u3002 5,000,000,000 * 64B \u2248 5GB * 64 = 320GB \u7531\u4e8e\u5185\u5b58\u5927\u5c0f\u53ea\u6709 4G\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u4e00\u6b21\u6027\u628a\u6240\u6709 URL \u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5904\u7406\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u4e00\u822c\u91c7\u7528**\u5206\u6cbb\u7b56\u7565**\uff0c\u5373\uff1a\u628a\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684 URL \u6309\u7167\u67d0\u4e2a\u7279\u5f81\u5212\u5206\u4e3a\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u5927\u5c0f\u4e0d\u8d85\u8fc7 4G\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5c0f\u6587\u4ef6\u8bfb\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406\u4e86\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u9996\u5148\u904d\u5386\u6587\u4ef6 a\uff0c\u5bf9\u904d\u5386\u5230\u7684 URL \u6c42 hash(URL) % 1000 \uff0c\u6839\u636e\u8ba1\u7b97\u7ed3\u679c\u628a\u904d\u5386\u5230\u7684 URL \u5b58\u50a8\u5230\u6587\u4ef6 a0, a1, a2, ..., a999\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5927\u5c0f\u7ea6\u4e3a 300MB\u3002\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u904d\u5386\u6587\u4ef6 b\uff0c\u628a\u6587\u4ef6 b \u4e2d\u7684 URL \u5206\u522b\u5b58\u50a8\u5230\u6587\u4ef6 b0, b1, b2, ..., b999 \u4e2d\u3002\u8fd9\u6837\u5904\u7406\u8fc7\u540e\uff0c\u6240\u6709\u53ef\u80fd\u76f8\u540c\u7684 URL \u90fd\u5728\u5bf9\u5e94\u7684\u5c0f\u6587\u4ef6\u4e2d\uff0c\u5373 a0 \u5bf9\u5e94 b0, ..., a999 \u5bf9\u5e94 b999\uff0c\u4e0d\u5bf9\u5e94\u7684\u5c0f\u6587\u4ef6\u4e0d\u53ef\u80fd\u6709\u76f8\u540c\u7684 URL\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u8fd9 1000 \u5bf9\u5c0f\u6587\u4ef6\u4e2d\u76f8\u540c\u7684 URL \u5c31\u597d\u4e86\u3002 \u63a5\u7740\u904d\u5386 ai( i\u2208[0,999] )\uff0c\u628a URL \u5b58\u50a8\u5230\u4e00\u4e2a HashSet \u96c6\u5408\u4e2d\u3002\u7136\u540e\u904d\u5386 bi \u4e2d\u6bcf\u4e2a URL\uff0c\u770b\u5728 HashSet \u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\uff0c\u82e5\u5b58\u5728\uff0c\u8bf4\u660e\u8fd9\u5c31\u662f\u5171\u540c\u7684 URL\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a URL \u4fdd\u5b58\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 1.\u5206\u800c\u6cbb\u4e4b\uff0c\u8fdb\u884c\u54c8\u5e0c\u53d6\u4f59\uff1b2.\u5bf9\u6bcf\u4e2a\u5b50\u6587\u4ef6\u8fdb\u884c HashSet \u7edf\u8ba1\u3002 \u9898\u76ee2 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709\u4e00\u4e2a 1GB \u5927\u5c0f\u7684\u6587\u4ef6\uff0c\u6587\u4ef6\u91cc\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u8bcd\uff0c\u6bcf\u4e2a\u8bcd\u7684\u5927\u5c0f\u4e0d\u8d85\u8fc7 16B\uff0c\u5185\u5b58\u5927\u5c0f\u9650\u5236\u662f 1MB\uff0c\u8981\u6c42\u8fd4\u56de\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u8bcd(Top 100)\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u7531\u4e8e\u5185\u5b58\u9650\u5236\uff0c\u6211\u4eec\u4f9d\u7136\u65e0\u6cd5\u76f4\u63a5\u5c06\u5927\u6587\u4ef6\u7684\u6240\u6709\u8bcd\u4e00\u6b21\u8bfb\u5230\u5185\u5b58\u4e2d\u3002\u56e0\u6b64\uff0c\u540c\u6837\u53ef\u4ee5\u91c7\u7528**\u5206\u6cbb\u7b56\u7565**\uff0c\u628a\u4e00\u4e2a\u5927\u6587\u4ef6\u5206\u89e3\u6210\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\u5c0f\u4e8e 1MB\uff0c\u8fdb\u800c\u76f4\u63a5\u5c06\u5355\u4e2a\u5c0f\u6587\u4ef6\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u9996\u5148\u904d\u5386\u5927\u6587\u4ef6\uff0c\u5bf9\u904d\u5386\u5230\u7684\u6bcf\u4e2a\u8bcdx\uff0c\u6267\u884c hash(x) % 5000 \uff0c\u5c06\u7ed3\u679c\u4e3a i \u7684\u8bcd\u5b58\u653e\u5230\u6587\u4ef6 ai \u4e2d\u3002\u904d\u5386\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 5000 \u4e2a\u5c0f\u6587\u4ef6\u3002\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u7684\u5927\u5c0f\u4e3a 200KB \u5de6\u53f3\u3002\u5982\u679c\u6709\u7684\u5c0f\u6587\u4ef6\u5927\u5c0f\u4ecd\u7136\u8d85\u8fc7 1MB\uff0c\u5219\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\u7ee7\u7eed\u8fdb\u884c\u5206\u89e3\u3002 \u63a5\u7740\u7edf\u8ba1\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u51fa\u73b0\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u8bcd\u3002\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 HashMap \u6765\u5b9e\u73b0\u3002\u5176\u4e2d key \u4e3a\u8bcd\uff0cvalue \u4e3a\u8be5\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u3002\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u5bf9\u4e8e\u904d\u5386\u5230\u7684\u8bcd x\uff0c\u5982\u679c\u5728 map \u4e2d\u4e0d\u5b58\u5728\uff0c\u5219\u6267\u884c map.put(x, 1) \uff1b\u82e5\u5b58\u5728\uff0c\u5219\u6267\u884c map.put(x, map.get(x)+1) \uff0c\u5c06\u8be5\u8bcd\u9891\u6570\u52a0 1\u3002 \u4e0a\u9762\u6211\u4eec\u7edf\u8ba1\u4e86\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a**\u5c0f\u9876\u5806**\u6765\u627e\u51fa\u6240\u6709\u8bcd\u4e2d\u51fa\u73b0\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u3002\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u5c0f\u6587\u4ef6\uff0c\u6784\u5efa\u4e00\u4e2a**\u5c0f\u9876\u5806**\uff0c\u5806\u5927\u5c0f\u4e3a 100\u3002\u5982\u679c\u904d\u5386\u5230\u7684\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u5806\u9876\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5219\u7528\u65b0\u8bcd\u66ff\u6362\u5806\u9876\u7684\u8bcd\uff0c\u7136\u540e\u91cd\u65b0\u8c03\u6574\u4e3a**\u5c0f\u9876\u5806**\uff0c\u904d\u5386\u7ed3\u675f\u540e\uff0c\u5c0f\u9876\u5806\u4e0a\u7684\u8bcd\u5c31\u662f\u51fa\u73b0\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u8bcd\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 1.\u5206\u800c\u6cbb\u4e4b\uff0c\u8fdb\u884c\u54c8\u5e0c\u53d6\u4f59\uff1b2.\u4f7f\u7528 HashMap \u7edf\u8ba1\u9891\u6570\uff1b3.\u6c42\u89e3**\u6700\u5927**\u7684 TopN \u4e2a\uff0c\u7528**\u5c0f\u9876\u5806**\uff1b\u6c42\u89e3**\u6700\u5c0f**\u7684 TopN \u4e2a\uff0c\u7528**\u5927\u9876\u5806**\u3002 \u9898\u76ee3 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u73b0\u6709\u6d77\u91cf\u65e5\u5fd7\u6570\u636e\u4fdd\u5b58\u5728\u4e00\u4e2a\u8d85\u5927\u6587\u4ef6\u4e2d\uff0c\u8be5\u6587\u4ef6\u65e0\u6cd5\u76f4\u63a5\u8bfb\u5165\u5185\u5b58\uff0c\u8981\u6c42\u4ece\u4e2d\u63d0\u53d6\u67d0\u5929\u8bbf\u95ee\u767e\u5ea6\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a IP\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u8fd9\u9053\u9898\u53ea\u5173\u5fc3\u67d0\u4e00\u5929\u8bbf\u95ee\u767e\u5ea6\u6700\u591a\u7684 IP\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u9996\u5148\u5bf9\u6587\u4ef6\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u628a\u8fd9\u4e00\u5929\u8bbf\u95ee\u767e\u5ea6 IP \u7684\u76f8\u5173\u4fe1\u606f\u8bb0\u5f55\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5927\u6587\u4ef6\u4e2d\u3002\u63a5\u4e0b\u6765\u91c7\u7528\u7684\u65b9\u6cd5\u4e0e\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u5927\u81f4\u5c31\u662f\u5148\u5bf9 IP \u8fdb\u884c\u54c8\u5e0c\u6620\u5c04\uff0c\u63a5\u7740\u4f7f\u7528 HashMap \u7edf\u8ba1\u91cd\u590d IP \u7684\u6b21\u6570\uff0c\u6700\u540e\u8ba1\u7b97\u51fa\u91cd\u590d\u6b21\u6570\u6700\u591a\u7684 IP\u3002 \u6ce8\uff1a\u8fd9\u91cc\u53ea\u9700\u8981\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 IP\uff0c\u53ef\u4ee5\u4e0d\u5fc5\u4f7f\u7528\u5806\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a\u53d8\u91cf max \u5373\u53ef\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 1.\u5206\u800c\u6cbb\u4e4b\uff0c\u8fdb\u884c\u54c8\u5e0c\u53d6\u4f59\uff1b2.\u4f7f\u7528 HashMap \u7edf\u8ba1\u9891\u6570\uff1b3.\u6c42\u89e3**\u6700\u5927**\u7684 TopN \u4e2a\uff0c\u7528**\u5c0f\u9876\u5806**\uff1b\u6c42\u89e3**\u6700\u5c0f**\u7684 TopN \u4e2a\uff0c\u7528**\u5927\u9876\u5806**\u3002 \u9898\u76ee4 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5728 2.5 \u4ebf\u4e2a\u6574\u6570\u4e2d\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6574\u6570\u3002\u6ce8\u610f\uff1a\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u8fd9 2.5 \u4ebf\u4e2a\u6574\u6570\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u65b9\u6cd5\u4e00\uff1a\u5206\u6cbb\u6cd5 \u00b6 \u4e0e\u524d\u9762\u7684\u9898\u76ee\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5148\u5c06 2.5 \u4ebf\u4e2a\u6570\u5212\u5206\u5230\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u7528 HashSet/HashMap \u627e\u51fa\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u4e0d\u91cd\u590d\u7684\u6574\u6570\uff0c\u518d\u5408\u5e76\u6bcf\u4e2a\u5b50\u7ed3\u679c\uff0c\u5373\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 \u65b9\u6cd5\u4e8c\uff1a\u4f4d\u56fe\u6cd5 \u00b6 \u4f4d\u56fe \uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a bit \u6765\u6807\u8bb0\u67d0\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u503c\uff0c\u800c\u952e\u5c31\u662f\u8be5\u5143\u7d20\u3002\u91c7\u7528\u4f4d\u4f5c\u4e3a\u5355\u4f4d\u6765\u5b58\u50a8\u6570\u636e\uff0c\u53ef\u4ee5\u5927\u5927\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u3002 \u4f4d\u56fe\u901a\u8fc7\u4f7f\u7528\u4f4d\u6570\u7ec4\u6765\u8868\u793a\u67d0\u4e9b\u5143\u7d20\u662f\u5426\u5b58\u5728\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5feb\u901f\u67e5\u627e\uff0c\u5224\u91cd\uff0c\u6392\u5e8f\u7b49\u3002\u4e0d\u662f\u5f88\u6e05\u695a\uff1f\u6211\u5148\u4e3e\u4e2a\u5c0f\u4f8b\u5b50\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u5bf9 [0,7] \u4e2d\u7684 5 \u4e2a\u5143\u7d20 (6, 4, 2, 1, 5) \u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u91c7\u7528\u4f4d\u56fe\u6cd5\u30020~7 \u8303\u56f4\u603b\u5171\u6709 8 \u4e2a\u6570\uff0c\u53ea\u9700\u8981 8bit\uff0c\u5373 1 \u4e2a\u5b57\u8282\u3002\u9996\u5148\u5c06\u6bcf\u4e2a\u4f4d\u90fd\u7f6e 0\uff1a \u7136\u540e\u904d\u5386 5 \u4e2a\u5143\u7d20\uff0c\u9996\u5148\u9047\u5230 6\uff0c\u90a3\u4e48\u5c06\u4e0b\u6807\u4e3a 6 \u7684\u4f4d\u7684 0 \u7f6e\u4e3a 1\uff1b\u63a5\u7740\u9047\u5230 4\uff0c\u628a\u4e0b\u6807\u4e3a 4 \u7684\u4f4d \u7684 0 \u7f6e\u4e3a 1\uff1a \u4f9d\u6b21\u904d\u5386\uff0c\u7ed3\u675f\u540e\uff0c\u4f4d\u6570\u7ec4\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a\u4e3a 1 \u7684\u4f4d\uff0c\u5b83\u7684\u4e0b\u6807\u90fd\u8868\u793a\u4e86\u4e00\u4e2a\u6570\uff1a \u8fd9\u6837\u6211\u4eec\u5176\u5b9e\u5c31\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6392\u5e8f\u3002 \u5bf9\u4e8e\u6574\u6570\u76f8\u5173\u7684\u7b97\u6cd5\u7684\u6c42\u89e3\uff0c**\u4f4d\u56fe\u6cd5**\u662f\u4e00\u79cd\u975e\u5e38\u5b9e\u7528\u7684\u7b97\u6cd5\u3002\u5047\u8bbe int \u6574\u6570\u5360\u7528 4B\uff0c\u5373 32bit\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8868\u793a\u7684\u6574\u6570\u7684\u4e2a\u6570\u4e3a 232\u3002 \u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898 \uff0c\u6211\u4eec\u7528 2 \u4e2a bit \u6765\u8868\u793a\u5404\u4e2a\u6570\u5b57\u7684\u72b6\u6001\uff1a \u202200 \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u6ca1\u51fa\u73b0\u8fc7\uff1b\u202201 \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u8fc7\u4e00\u6b21\uff08\u5373\u4e3a\u9898\u76ee\u6240\u627e\u7684\u4e0d\u91cd\u590d\u6574\u6570\uff09\uff1b\u202210 \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u591a\u6b21\u3002 \u90a3\u4e48\u8fd9 232 \u4e2a\u6574\u6570\uff0c\u603b\u5171\u6240\u9700\u5185\u5b58\u4e3a 232*2b=1GB\u3002\u56e0\u6b64\uff0c\u5f53\u53ef\u7528\u5185\u5b58\u8d85\u8fc7 1GB \u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u4f4d\u56fe\u6cd5\u3002\u5047\u8bbe\u5185\u5b58\u6ee1\u8db3\u4f4d\u56fe\u6cd5\u9700\u6c42\uff0c\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a \u904d\u5386 2.5 \u4ebf\u4e2a\u6574\u6570\uff0c\u67e5\u770b\u4f4d\u56fe\u4e2d\u5bf9\u5e94\u7684\u4f4d\uff0c\u5982\u679c\u662f 00\uff0c\u5219\u53d8\u4e3a 01\uff0c\u5982\u679c\u662f 01 \u5219\u53d8\u4e3a 10\uff0c\u5982\u679c\u662f 10 \u5219\u4fdd\u6301\u4e0d\u53d8\u3002\u904d\u5386\u7ed3\u675f\u540e\uff0c\u67e5\u770b\u4f4d\u56fe\uff0c\u628a\u5bf9\u5e94\u4f4d\u662f 01 \u7684\u6574\u6570\u8f93\u51fa\u5373\u53ef\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u5224\u65ad\u6570\u5b57\u662f\u5426\u91cd\u590d\u7684\u95ee\u9898 \uff0c\u4f4d\u56fe\u6cd5\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u9898\u76ee5 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u7ed9\u5b9a 40 \u4ebf\u4e2a\u4e0d\u91cd\u590d\u7684\u6ca1\u6392\u8fc7\u5e8f\u7684 unsigned int \u578b\u6574\u6570\uff0c\u7136\u540e\u518d\u7ed9\u5b9a\u4e00\u4e2a\u6570\uff0c\u5982\u4f55\u5feb\u901f\u5224\u65ad\u8fd9\u4e2a\u6570\u662f\u5426\u5728\u8fd9 40 \u4ebf\u4e2a\u6574\u6570\u5f53\u4e2d\uff1f \u89e3\u7b54\u601d\u8def \u00b6 \u65b9\u6cd5\u4e00\uff1a\u5206\u6cbb\u6cd5 \u00b6 \u4f9d\u7136\u53ef\u4ee5\u7528\u5206\u6cbb\u6cd5\u89e3\u51b3\uff0c\u65b9\u6cd5\u4e0e\u524d\u9762\u7c7b\u4f3c\uff0c\u5c31\u4e0d\u518d\u6b21\u8d58\u8ff0\u4e86\u3002 \u65b9\u6cd5\u4e8c\uff1a\u4f4d\u56fe\u6cd5 \u00b6 40 \u4ebf\u4e2a\u4e0d\u91cd\u590d\u6574\u6570\uff0c\u6211\u4eec\u7528 40 \u4ebf\u4e2a bit \u6765\u8868\u793a\uff0c\u521d\u59cb\u4f4d\u5747\u4e3a 0\uff0c\u90a3\u4e48\u603b\u5171\u9700\u8981\u5185\u5b58\uff1a4,000,000,000b\u2248512M\u3002 \u6211\u4eec\u8bfb\u53d6\u8fd9 40 \u4ebf\u4e2a\u6574\u6570\uff0c\u5c06\u5bf9\u5e94\u7684 bit \u8bbe\u7f6e\u4e3a 1\u3002\u63a5\u7740\u8bfb\u53d6\u8981\u67e5\u8be2\u7684\u6570\uff0c\u67e5\u770b\u76f8\u5e94\u4f4d\u662f\u5426\u4e3a 1\uff0c\u5982\u679c\u4e3a 1 \u8868\u793a\u5b58\u5728\uff0c\u5982\u679c\u4e3a 0 \u8868\u793a\u4e0d\u5b58\u5728\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u5224\u65ad\u6570\u5b57\u662f\u5426\u5b58\u5728\u3001\u5224\u65ad\u6570\u5b57\u662f\u5426\u91cd\u590d\u7684\u95ee\u9898 \uff0c\u4f4d\u56fe\u6cd5\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u65b9\u6cd5\u3002 \u9898\u76ee6 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u641c\u7d22\u5f15\u64ce\u4f1a\u901a\u8fc7\u65e5\u5fd7\u6587\u4ef6\u628a\u7528\u6237\u6bcf\u6b21\u68c0\u7d22\u4f7f\u7528\u7684\u6240\u6709\u67e5\u8be2\u4e32\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u6bcf\u4e2a\u67e5\u8be2\u5e8a\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 255 \u5b57\u8282\u3002 \u5047\u8bbe\u76ee\u524d\u6709 1000w \u4e2a\u8bb0\u5f55\uff08\u8fd9\u4e9b\u67e5\u8be2\u4e32\u7684\u91cd\u590d\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u867d\u7136\u603b\u6570\u662f 1000w\uff0c\u4f46\u5982\u679c\u9664\u53bb\u91cd\u590d\u540e\uff0c\u5219\u4e0d\u8d85\u8fc7 300w \u4e2a\uff09\u3002\u8bf7\u7edf\u8ba1\u6700\u70ed\u95e8\u7684 10 \u4e2a\u67e5\u8be2\u4e32\uff0c\u8981\u6c42\u4f7f\u7528\u7684\u5185\u5b58\u4e0d\u80fd\u8d85\u8fc7 1G\u3002\uff08\u4e00\u4e2a\u67e5\u8be2\u4e32\u7684\u91cd\u590d\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u67e5\u8be2\u5b83\u7684\u7528\u6237\u8d8a\u591a\uff0c\u4e5f\u5c31\u8d8a\u70ed\u95e8\u3002\uff09 \u89e3\u7b54\u601d\u8def \u00b6 \u6bcf\u4e2a\u67e5\u8be2\u4e32\u6700\u957f\u4e3a 255B\uff0c1000w \u4e2a\u4e32\u9700\u8981\u5360\u7528 \u7ea6 2.55G \u5185\u5b58\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u65e0\u6cd5\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u5168\u90e8\u8bfb\u5165\u5230\u5185\u5b58\u4e2d\u5904\u7406\u3002 \u65b9\u6cd5\u4e00\uff1a\u5206\u6cbb\u6cd5 \u00b6 \u5206\u6cbb\u6cd5\u4f9d\u7136\u662f\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u65b9\u6cd5\u3002 \u5212\u5206\u4e3a\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4fdd\u8bc1\u5355\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u7684\u5b57\u7b26\u4e32\u80fd\u88ab\u76f4\u63a5\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5904\u7406\uff0c\u7136\u540e\u6c42\u51fa\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 10 \u4e2a\u5b57\u7b26\u4e32\uff1b\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u5c0f\u9876\u5806\u7edf\u8ba1\u51fa\u6240\u6709\u6587\u4ef6\u4e2d\u51fa\u73b0\u6700\u591a\u7684 10 \u4e2a\u5b57\u7b26\u4e32\u3002 \u65b9\u6cd5\u53ef\u884c\uff0c\u4f46\u4e0d\u662f\u6700\u597d\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4ed6\u65b9\u6cd5\u3002 \u65b9\u6cd5\u4e8c\uff1aHashMap \u6cd5 \u00b6 \u867d\u7136\u5b57\u7b26\u4e32\u603b\u6570\u6bd4\u8f83\u591a\uff0c\u4f46\u53bb\u91cd\u540e\u4e0d\u8d85\u8fc7 300w\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u5b57\u7b26\u4e32\u53ca\u51fa\u73b0\u6b21\u6570\u4fdd\u5b58\u5728\u4e00\u4e2a HashMap \u4e2d\uff0c\u6240\u5360\u7528\u7684\u7a7a\u95f4\u4e3a 300w*(255+4)\u2248777M\uff08\u5176\u4e2d\uff0c4\u8868\u793a\u6574\u6570\u5360\u7528\u76844\u4e2a\u5b57\u8282\uff09\u3002\u7531\u6b64\u53ef\u89c1\uff0c1G \u7684\u5185\u5b58\u7a7a\u95f4\u5b8c\u5168\u591f\u7528\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u9996\u5148\uff0c\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u82e5\u4e0d\u5728 map \u4e2d\uff0c\u76f4\u63a5\u5b58\u5165 map\uff0cvalue \u8bb0\u4e3a 1\uff1b\u82e5\u5728 map \u4e2d\uff0c\u5219\u628a\u5bf9\u5e94\u7684 value \u52a0 1\uff0c\u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u5ea6 O(N) \u3002 \u63a5\u7740\u904d\u5386 map\uff0c\u6784\u5efa\u4e00\u4e2a 10 \u4e2a\u5143\u7d20\u7684\u5c0f\u9876\u5806\uff0c\u82e5\u904d\u5386\u5230\u7684\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u5806\u9876\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5219\u8fdb\u884c\u66ff\u6362\uff0c\u5e76\u5c06\u5806\u8c03\u6574\u4e3a\u5c0f\u9876\u5806\u3002 \u904d\u5386\u7ed3\u675f\u540e\uff0c\u5806\u4e2d 10 \u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u5ea6 O(Nlog10) \u3002 \u65b9\u6cd5\u4e09\uff1a\u524d\u7f00\u6811\u6cd5 \u00b6 \u65b9\u6cd5\u4e8c\u4f7f\u7528\u4e86 HashMap \u6765\u7edf\u8ba1\u6b21\u6570\uff0c\u5f53\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6709\u5927\u91cf\u76f8\u540c\u524d\u7f00\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u524d\u7f00\u6811\u6765\u7edf\u8ba1\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6811\u7684\u7ed3\u70b9\u4fdd\u5b58\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570\uff0c0 \u8868\u793a\u6ca1\u6709\u51fa\u73b0\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u5728\u904d\u5386\u5b57\u7b26\u4e32\u65f6\uff0c\u5728\u524d\u7f00\u6811\u4e2d\u67e5\u627e\uff0c\u5982\u679c\u627e\u5230\uff0c\u5219\u628a\u7ed3\u70b9\u4e2d\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\u6b21\u6570\u52a0 1\uff0c\u5426\u5219\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6784\u5efa\u65b0\u7ed3\u70b9\uff0c\u6784\u5efa\u5b8c\u6210\u540e\u628a\u53f6\u5b50\u7ed3\u70b9\u4e2d\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u7f6e\u4e3a 1\u3002 \u6700\u540e\u4f9d\u7136\u4f7f\u7528\u5c0f\u9876\u5806\u6765\u5bf9\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u524d\u7f00\u6811\u7ecf\u5e38\u88ab\u7528\u6765\u7edf\u8ba1\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5b83\u7684\u53e6\u5916\u4e00\u4e2a\u5927\u7684\u7528\u9014\u662f\u5b57\u7b26\u4e32\u67e5\u627e\uff0c\u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u7b49\u3002 \u9898\u76ee7 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u5df2\u77e5\u67d0\u4e2a\u6587\u4ef6\u5185\u5305\u542b\u4e00\u4e9b\u7535\u8bdd\u53f7\u7801\uff0c\u6bcf\u4e2a\u53f7\u7801\u4e3a 8 \u4f4d\u6570\u5b57\uff0c\u7edf\u8ba1\u4e0d\u540c\u53f7\u7801\u7684\u4e2a\u6570\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u8fd9\u9053\u9898\u672c\u8d28\u8fd8\u662f\u6c42\u89e3**\u6570\u636e\u91cd\u590d**\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u4e00\u822c\u9996\u5148\u8003\u8651\u4f4d\u56fe\u6cd5\u3002 \u5bf9\u4e8e\u672c\u9898\uff0c8 \u4f4d\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u8868\u793a\u7684\u53f7\u7801\u4e2a\u6570\u4e3a 108 \u4e2a\uff0c\u5373 1 \u4ebf\u4e2a\u3002\u6211\u4eec\u6bcf\u4e2a\u53f7\u7801\u7528\u4e00\u4e2a bit \u6765\u8868\u793a\uff0c\u5219\u603b\u5171\u9700\u8981 1 \u4ebf\u4e2a bit\uff0c\u5185\u5b58\u5360\u7528\u7ea6 100M\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u7533\u8bf7\u4e00\u4e2a\u4f4d\u56fe\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3a 1 \u4ebf\uff0c\u521d\u59cb\u5316\u4e3a 0\u3002\u7136\u540e\u904d\u5386\u6240\u6709\u7535\u8bdd\u53f7\u7801\uff0c\u628a\u53f7\u7801\u5bf9\u5e94\u7684\u4f4d\u56fe\u4e2d\u7684\u4f4d\u7f6e\u7f6e\u4e3a 1\u3002\u904d\u5386\u5b8c\u6210\u540e\uff0c\u5982\u679c bit \u4e3a 1\uff0c\u5219\u8868\u793a\u8fd9\u4e2a\u7535\u8bdd\u53f7\u7801\u5728\u6587\u4ef6\u4e2d\u5b58\u5728\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u3002bit \u503c\u4e3a 1 \u7684\u6570\u91cf\u5373\u4e3a \u4e0d\u540c\u7535\u8bdd\u53f7\u7801\u7684\u4e2a\u6570\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u6c42\u89e3\u6570\u636e\u91cd\u590d\u95ee\u9898\uff0c\u8bb0\u5f97\u8003\u8651\u4f4d\u56fe\u6cd5\u3002 \u9898\u76ee8 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u4ece 5 \u4ebf\u4e2a\u6570\u4e2d\u627e\u51fa\u4e2d\u4f4d\u6570\u3002\u6570\u636e\u6392\u5e8f\u540e\uff0c\u4f4d\u7f6e\u5728\u6700\u4e2d\u95f4\u7684\u6570\u5c31\u662f\u4e2d\u4f4d\u6570\u3002\u5f53\u6837\u672c\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4e3a \u7b2c (N+1)/2 \u4e2a\u6570\uff1b\u5f53\u6837\u672c\u6570\u4e3a\u5076\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4e3a \u7b2c N/2 \u4e2a\u6570\u4e0e\u7b2c 1+N/2 \u4e2a\u6570\u7684\u5747\u503c\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u5982\u679c\u8fd9\u9053\u9898\u6ca1\u6709\u5185\u5b58\u5927\u5c0f\u9650\u5236\uff0c\u5219\u53ef\u4ee5\u628a\u6240\u6709\u6570\u8bfb\u5230\u5185\u5b58\u4e2d\u6392\u5e8f\u540e\u627e\u51fa\u4e2d\u4f4d\u6570\u3002\u4f46\u662f\u6700\u597d\u7684\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(NlogN) \u3002\u8fd9\u91cc\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u3002 \u65b9\u6cd5\u4e00\uff1a\u53cc\u5806\u6cd5 \u00b6 \u7ef4\u62a4\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\u3002\u5927\u9876\u5806\u4e2d\u6700\u5927\u7684\u6570**\u5c0f\u4e8e\u7b49\u4e8e**\u5c0f\u9876\u5806\u4e2d\u6700\u5c0f\u7684\u6570\uff1b\u4fdd\u8bc1\u8fd9\u4e24\u4e2a\u5806\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u7684\u5dee\u4e0d\u8d85\u8fc7 1\u3002 \u82e5\u6570\u636e\u603b\u6570\u4e3a**\u5076\u6570**\uff0c\u5f53\u8fd9\u4e24\u4e2a\u5806\u5efa\u597d\u4e4b\u540e\uff0c \u4e2d\u4f4d\u6570\u5c31\u662f\u8fd9\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u503c \u3002\u5f53\u6570\u636e\u603b\u6570\u4e3a**\u5947\u6570**\u65f6\uff0c\u6839\u636e\u4e24\u4e2a\u5806\u7684\u5927\u5c0f\uff0c \u4e2d\u4f4d\u6570\u4e00\u5b9a\u5728\u6570\u636e\u591a\u7684\u5806\u7684\u5806\u9876 \u3002 \u89c1 LeetCode No.295\uff1a https://leetcode.com/problems/find-median-from-data-stream/ \u4ee5\u4e0a\u8fd9\u79cd\u65b9\u6cd5\uff0c\u9700\u8981\u628a\u6240\u6709\u6570\u636e\u90fd\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u5f53\u6570\u636e\u91cf\u5f88\u5927\u65f6\uff0c\u5c31\u4e0d\u80fd\u8fd9\u6837\u4e86\uff0c\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5**\u9002\u7528\u4e8e\u6570\u636e\u91cf\u8f83\u5c0f\u7684\u60c5\u51b5**\u30025 \u4ebf\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u5b57\u5360\u7528 4B\uff0c\u603b\u5171\u9700\u8981 2G \u5185\u5b58\u3002\u5982\u679c\u53ef\u7528\u5185\u5b58\u4e0d\u8db3 2G\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e86\uff0c\u4e0b\u9762\u4ecb\u7ecd\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002 \u65b9\u6cd5\u4e8c\uff1a\u5206\u6cbb\u6cd5 \u00b6 \u5206\u6cbb\u6cd5\u7684\u601d\u60f3\u662f\u628a\u4e00\u4e2a\u5927\u7684\u95ee\u9898\u9010\u6e10\u8f6c\u6362\u4e3a\u89c4\u6a21\u8f83\u5c0f\u7684\u95ee\u9898\u6765\u6c42\u89e3\u3002 \u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u987a\u5e8f\u8bfb\u53d6\u8fd9 5 \u4ebf\u4e2a\u6570\u5b57\uff0c\u5bf9\u4e8e\u8bfb\u53d6\u5230\u7684\u6570\u5b57 num\uff0c\u5982\u679c\u5b83\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4e2d\u6700\u9ad8\u4f4d\u4e3a 1\uff0c\u5219\u628a\u8fd9\u4e2a\u6570\u5b57\u5199\u5230 f1 \u4e2d\uff0c\u5426\u5219\u5199\u5165 f0 \u4e2d\u3002\u901a\u8fc7\u8fd9\u4e00\u6b65\uff0c\u53ef\u4ee5\u628a\u8fd9 5 \u4ebf\u4e2a\u6570\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u800c\u4e14 f0 \u4e2d\u7684\u6570\u90fd\u5927\u4e8e f1 \u4e2d\u7684\u6570\uff08\u6700\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\uff09\u3002 \u5212\u5206\u4e4b\u540e\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u77e5\u9053\u4e2d\u4f4d\u6570\u662f\u5728 f0 \u8fd8\u662f f1 \u4e2d\u3002\u5047\u8bbe f1 \u4e2d\u6709 1 \u4ebf\u4e2a\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u4e00\u5b9a\u5728 f0 \u4e2d\uff0c\u4e14\u662f\u5728 f0 \u4e2d\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\u7b2c 1.5 \u4ebf\u4e2a\u6570\u4e0e\u5b83\u540e\u9762\u7684\u4e00\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u63d0\u793a \uff0c5 \u4ebf\u6570\u7684\u4e2d\u4f4d\u6570\u662f\u7b2c 2.5 \u4ebf\u4e0e\u53f3\u8fb9\u76f8\u90bb\u4e00\u4e2a\u6570\u6c42\u5e73\u5747\u503c\u3002\u82e5 f1 \u6709\u4e00\u4ebf\u4e2a\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f f0 \u4e2d\u4ece\u7b2c 1.5 \u4ebf\u4e2a\u6570\u5f00\u59cb\u7684\u4e24\u4e2a\u6570\u6c42\u5f97\u7684\u5e73\u5747\u503c\u3002 \u5bf9\u4e8e f0 \u53ef\u4ee5\u7528\u6b21\u9ad8\u4f4d\u7684\u4e8c\u8fdb\u5236\u7ee7\u7eed\u5c06\u6587\u4ef6\u4e00\u5206\u4e3a\u4e8c\uff0c\u5982\u6b64\u5212\u5206\u4e0b\u53bb\uff0c\u76f4\u5230\u5212\u5206\u540e\u7684\u6587\u4ef6\u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u628a\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u4ee5\u540e\u76f4\u63a5\u6392\u5e8f\uff0c\u627e\u51fa\u4e2d\u4f4d\u6570\u3002 \u6ce8\u610f \uff0c\u5f53\u6570\u636e\u603b\u6570\u4e3a\u5076\u6570\uff0c\u5982\u679c\u5212\u5206\u540e\u4e24\u4e2a\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6709\u76f8\u540c\u4e2a\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6570\u636e\u8f83\u5c0f\u7684\u6587\u4ef6\u4e2d\u7684\u6700\u5927\u503c\u4e0e\u6570\u636e\u8f83\u5927\u7684\u6587\u4ef6\u4e2d\u7684\u6700\u5c0f\u503c\u7684\u5e73\u5747\u503c\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u5206\u6cbb\u6cd5\uff0c\u771f\u9999\uff01 \u9898\u76ee9 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709 10 \u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5927\u5c0f\u4e3a 1G\uff0c\u6bcf\u4e2a\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\u5b58\u653e\u7684\u90fd\u662f\u7528\u6237\u7684 query\uff0c\u6bcf\u4e2a\u6587\u4ef6\u7684 query \u90fd\u53ef\u80fd\u91cd\u590d\u3002\u8981\u6c42\u6309\u7167 query \u7684\u9891\u5ea6\u6392\u5e8f\u3002 \u89e3\u7b54\u601d\u8def \u00b6 \u5982\u679c query \u7684\u91cd\u590d\u5ea6\u6bd4\u8f83\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u6b21\u6027\u628a\u6240\u6709 query \u8bfb\u5165\u5185\u5b58\u4e2d\u5904\u7406\uff1b\u5982\u679c query \u7684\u91cd\u590d\u7387\u4e0d\u9ad8\uff0c\u90a3\u4e48\u53ef\u7528\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u6240\u6709\u7684 query\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u91c7\u7528\u5206\u6cbb\u6cd5\u6216\u5176\u4ed6\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002 \u65b9\u6cd5\u4e00\uff1aHashMap \u6cd5 \u00b6 \u5982\u679c query \u91cd\u590d\u7387\u9ad8\uff0c\u8bf4\u660e\u4e0d\u540c query \u603b\u6570\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u7684 query \u90fd\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684 HashMap \u4e2d\u3002\u63a5\u7740\u5c31\u53ef\u4ee5\u6309\u7167 query \u51fa\u73b0\u7684\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002 \u65b9\u6cd5\u4e8c\uff1a\u5206\u6cbb\u6cd5 \u00b6 \u5206\u6cbb\u6cd5\u9700\u8981\u6839\u636e\u6570\u636e\u91cf\u5927\u5c0f\u4ee5\u53ca\u53ef\u7528\u5185\u5b58\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u95ee\u9898\u5212\u5206\u7684\u89c4\u6a21\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u53ef\u4ee5\u987a\u5e8f\u904d\u5386 10 \u4e2a\u6587\u4ef6\u4e2d\u7684 query\uff0c\u901a\u8fc7 Hash \u51fd\u6570 hash(query) % 10 \u628a\u8fd9\u4e9b query \u5212\u5206\u5230 10 \u4e2a\u5c0f\u6587\u4ef6\u4e2d\u3002\u4e4b\u540e\u5bf9\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4f7f\u7528 HashMap \u7edf\u8ba1 query \u51fa\u73b0\u6b21\u6570\uff0c\u6839\u636e\u6b21\u6570\u6392\u5e8f\u5e76\u5199\u5165\u5230\u96f6\u5916\u4e00\u4e2a\u5355\u72ec\u6587\u4ef6\u4e2d\u3002 \u63a5\u7740\u5bf9\u6240\u6709\u6587\u4ef6\u6309\u7167 query \u7684\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\uff08\u7531\u4e8e\u65e0\u6cd5\u628a\u6240\u6709 query \u90fd\u8bfb\u5165\u5185\u5b58\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u5916\u6392\u5e8f\uff09\u3002 \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u2022\u5185\u5b58\u82e5\u591f\uff0c\u76f4\u63a5\u8bfb\u5165\u8fdb\u884c\u6392\u5e8f\uff1b\u2022\u5185\u5b58\u4e0d\u591f\uff0c\u5148\u5212\u5206\u4e3a\u5c0f\u6587\u4ef6\uff0c\u5c0f\u6587\u4ef6\u6392\u597d\u5e8f\u540e\uff0c\u6574\u7406\u4f7f\u7528\u5916\u6392\u5e8f\u8fdb\u884c\u5f52\u5e76\u3002 \u9898\u76ee10 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u00b6 \u6709 20 \u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u6709 500 \u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u6709\u5e8f\u6392\u5217\u3002\u5982\u4f55\u5728\u8fd9 20*500 \u4e2a\u6570\u4e2d\u627e\u51fa\u524d 500 \u7684\u6570\uff1f \u89e3\u7b54\u601d\u8def \u00b6 \u5bf9\u4e8e TopK \u95ee\u9898\uff0c\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u5806\u6392\u5e8f\u3002\u5bf9\u672c\u9898\u800c\u8a00\uff0c\u5047\u8bbe\u6570\u7ec4\u964d\u5e8f\u6392\u5217\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a \u9996\u5148\u5efa\u7acb\u5927\u9876\u5806\uff0c\u5806\u7684\u5927\u5c0f\u4e3a\u6570\u7ec4\u7684\u4e2a\u6570\uff0c\u5373\u4e3a 20\uff0c\u628a\u6bcf\u4e2a\u6570\u7ec4\u6700\u5927\u7684\u503c\u5b58\u5230\u5806\u4e2d\u3002 \u63a5\u7740\u5220\u9664\u5806\u9876\u5143\u7d20\uff0c\u4fdd\u5b58\u5230\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e3a 500 \u7684\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u5411\u5927\u9876\u5806\u63d2\u5165\u5220\u9664\u7684\u5143\u7d20\u6240\u5728\u6570\u7ec4\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u5220\u9664\u5b8c\u7b2c 500 \u4e2a\u5143\u7d20\uff0c\u4e5f\u5373\u627e\u51fa\u4e86\u6700\u5927\u7684\u524d 500 \u4e2a\u6570\u3002 \u4e3a\u4e86\u5728\u5806\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6570\u636e\u540e\uff0c\u80fd\u77e5\u9053\u5b83\u662f\u4ece\u54ea\u4e2a\u6570\u7ec4\u4e2d\u53d6\u51fa\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u53d6\u4e0b\u4e00\u4e2a\u503c\uff0c\u53ef\u4ee5\u628a\u6570\u7ec4\u7684\u6307\u9488\u5b58\u653e\u5230\u5806\u4e2d\uff0c\u5bf9\u8fd9\u4e2a\u6307\u9488\u63d0\u4f9b\u6bd4\u8f83\u5927\u5c0f\u7684\u65b9\u6cd5\u3002 import lombok.Data; import java.util.Arrays; import java.util.PriorityQueue; /** * @author https://github.com/yanglbme */ @Data public class DataWithSource implements Comparable<DataWithSource> { /** * \u6570\u503c */ private int value; /** * \u8bb0\u5f55\u6570\u503c\u6765\u6e90\u7684\u6570\u7ec4 */ private int source; /** * \u8bb0\u5f55\u6570\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 */ private int index; public DataWithSource(int value, int source, int index) { this.value = value; this.source = source; this.index = index; } /** * * \u7531\u4e8e PriorityQueue \u4f7f\u7528\u5c0f\u9876\u5806\u6765\u5b9e\u73b0\uff0c\u8fd9\u91cc\u901a\u8fc7\u4fee\u6539 * \u4e24\u4e2a\u6574\u6570\u7684\u6bd4\u8f83\u903b\u8f91\u6765\u8ba9 PriorityQueue \u53d8\u6210\u5927\u9876\u5806 */ @Override public int compareTo(DataWithSource o) { return Integer.compare(o.getValue(), this.value); } } class Test { public static int[] getTop(int[][] data) { int rowSize = data.length; int columnSize = data[0].length; // \u521b\u5efa\u4e00\u4e2acolumnSize\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5b58\u653e\u7ed3\u679c int[] result = new int[columnSize]; PriorityQueue<DataWithSource> maxHeap = new PriorityQueue<>(); for (int i = 0; i < rowSize; ++i) { // \u5c06\u6bcf\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u5806\u4e2d DataWithSource d = new DataWithSource(data[i][0], i, 0); maxHeap.add(d); } int num = 0; while (num < columnSize) { // \u5220\u9664\u5806\u9876\u5143\u7d20 DataWithSource d = maxHeap.poll(); result[num++] = d.getValue(); if (num >= columnSize) { break; } d.setValue(data[d.getSource()][d.getIndex() + 1]); d.setIndex(d.getIndex() + 1); maxHeap.add(d); } return result; } public static void main(String[] args) { int[][] data = { {29, 17, 14, 2, 1}, {19, 17, 16, 15, 6}, {30, 25, 20, 14, 5}, }; int[] top = getTop(data); System.out.println(Arrays.toString(top)); // [30, 29, 25, 20, 19] } } \u65b9\u6cd5\u603b\u7ed3 \u00b6 \u6c42 TopK\uff0c\u4e0d\u59a8\u8003\u8651\u4e00\u4e0b\u5806\u6392\u5e8f\uff1f","title":"\u9762\u8bd5\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#1","text":"","title":"\u9898\u76ee1"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_1","text":"\u7ed9\u5b9a a\u3001b \u4e24\u4e2a\u6587\u4ef6\uff0c\u5404\u5b58\u653e 50 \u4ebf\u4e2a URL\uff0c\u6bcf\u4e2a URL \u5404\u5360 64B\uff0c\u5185\u5b58\u9650\u5236\u662f 4G\u3002\u8bf7\u627e\u51fa a\u3001b \u4e24\u4e2a\u6587\u4ef6\u5171\u540c\u7684 URL\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_2","text":"\u6bcf\u4e2a URL \u5360 64B\uff0c\u90a3\u4e48 50 \u4ebf\u4e2a URL\u5360\u7528\u7684\u7a7a\u95f4\u5927\u5c0f\u7ea6\u4e3a 320GB\u3002 5,000,000,000 * 64B \u2248 5GB * 64 = 320GB \u7531\u4e8e\u5185\u5b58\u5927\u5c0f\u53ea\u6709 4G\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u4e00\u6b21\u6027\u628a\u6240\u6709 URL \u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5904\u7406\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684\u9898\u76ee\uff0c\u4e00\u822c\u91c7\u7528**\u5206\u6cbb\u7b56\u7565**\uff0c\u5373\uff1a\u628a\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684 URL \u6309\u7167\u67d0\u4e2a\u7279\u5f81\u5212\u5206\u4e3a\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u5927\u5c0f\u4e0d\u8d85\u8fc7 4G\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5c0f\u6587\u4ef6\u8bfb\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406\u4e86\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u9996\u5148\u904d\u5386\u6587\u4ef6 a\uff0c\u5bf9\u904d\u5386\u5230\u7684 URL \u6c42 hash(URL) % 1000 \uff0c\u6839\u636e\u8ba1\u7b97\u7ed3\u679c\u628a\u904d\u5386\u5230\u7684 URL \u5b58\u50a8\u5230\u6587\u4ef6 a0, a1, a2, ..., a999\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5927\u5c0f\u7ea6\u4e3a 300MB\u3002\u4f7f\u7528\u540c\u6837\u7684\u65b9\u6cd5\u904d\u5386\u6587\u4ef6 b\uff0c\u628a\u6587\u4ef6 b \u4e2d\u7684 URL \u5206\u522b\u5b58\u50a8\u5230\u6587\u4ef6 b0, b1, b2, ..., b999 \u4e2d\u3002\u8fd9\u6837\u5904\u7406\u8fc7\u540e\uff0c\u6240\u6709\u53ef\u80fd\u76f8\u540c\u7684 URL \u90fd\u5728\u5bf9\u5e94\u7684\u5c0f\u6587\u4ef6\u4e2d\uff0c\u5373 a0 \u5bf9\u5e94 b0, ..., a999 \u5bf9\u5e94 b999\uff0c\u4e0d\u5bf9\u5e94\u7684\u5c0f\u6587\u4ef6\u4e0d\u53ef\u80fd\u6709\u76f8\u540c\u7684 URL\u3002\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u8fd9 1000 \u5bf9\u5c0f\u6587\u4ef6\u4e2d\u76f8\u540c\u7684 URL \u5c31\u597d\u4e86\u3002 \u63a5\u7740\u904d\u5386 ai( i\u2208[0,999] )\uff0c\u628a URL \u5b58\u50a8\u5230\u4e00\u4e2a HashSet \u96c6\u5408\u4e2d\u3002\u7136\u540e\u904d\u5386 bi \u4e2d\u6bcf\u4e2a URL\uff0c\u770b\u5728 HashSet \u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\uff0c\u82e5\u5b58\u5728\uff0c\u8bf4\u660e\u8fd9\u5c31\u662f\u5171\u540c\u7684 URL\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a URL \u4fdd\u5b58\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_3","text":"1.\u5206\u800c\u6cbb\u4e4b\uff0c\u8fdb\u884c\u54c8\u5e0c\u53d6\u4f59\uff1b2.\u5bf9\u6bcf\u4e2a\u5b50\u6587\u4ef6\u8fdb\u884c HashSet \u7edf\u8ba1\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#2","text":"","title":"\u9898\u76ee2"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_4","text":"\u6709\u4e00\u4e2a 1GB \u5927\u5c0f\u7684\u6587\u4ef6\uff0c\u6587\u4ef6\u91cc\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u8bcd\uff0c\u6bcf\u4e2a\u8bcd\u7684\u5927\u5c0f\u4e0d\u8d85\u8fc7 16B\uff0c\u5185\u5b58\u5927\u5c0f\u9650\u5236\u662f 1MB\uff0c\u8981\u6c42\u8fd4\u56de\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u8bcd(Top 100)\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_5","text":"\u7531\u4e8e\u5185\u5b58\u9650\u5236\uff0c\u6211\u4eec\u4f9d\u7136\u65e0\u6cd5\u76f4\u63a5\u5c06\u5927\u6587\u4ef6\u7684\u6240\u6709\u8bcd\u4e00\u6b21\u8bfb\u5230\u5185\u5b58\u4e2d\u3002\u56e0\u6b64\uff0c\u540c\u6837\u53ef\u4ee5\u91c7\u7528**\u5206\u6cbb\u7b56\u7565**\uff0c\u628a\u4e00\u4e2a\u5927\u6587\u4ef6\u5206\u89e3\u6210\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\u5c0f\u4e8e 1MB\uff0c\u8fdb\u800c\u76f4\u63a5\u5c06\u5355\u4e2a\u5c0f\u6587\u4ef6\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u9996\u5148\u904d\u5386\u5927\u6587\u4ef6\uff0c\u5bf9\u904d\u5386\u5230\u7684\u6bcf\u4e2a\u8bcdx\uff0c\u6267\u884c hash(x) % 5000 \uff0c\u5c06\u7ed3\u679c\u4e3a i \u7684\u8bcd\u5b58\u653e\u5230\u6587\u4ef6 ai \u4e2d\u3002\u904d\u5386\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 5000 \u4e2a\u5c0f\u6587\u4ef6\u3002\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u7684\u5927\u5c0f\u4e3a 200KB \u5de6\u53f3\u3002\u5982\u679c\u6709\u7684\u5c0f\u6587\u4ef6\u5927\u5c0f\u4ecd\u7136\u8d85\u8fc7 1MB\uff0c\u5219\u91c7\u7528\u540c\u6837\u7684\u65b9\u5f0f\u7ee7\u7eed\u8fdb\u884c\u5206\u89e3\u3002 \u63a5\u7740\u7edf\u8ba1\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u51fa\u73b0\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u8bcd\u3002\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 HashMap \u6765\u5b9e\u73b0\u3002\u5176\u4e2d key \u4e3a\u8bcd\uff0cvalue \u4e3a\u8be5\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u3002\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u5bf9\u4e8e\u904d\u5386\u5230\u7684\u8bcd x\uff0c\u5982\u679c\u5728 map \u4e2d\u4e0d\u5b58\u5728\uff0c\u5219\u6267\u884c map.put(x, 1) \uff1b\u82e5\u5b58\u5728\uff0c\u5219\u6267\u884c map.put(x, map.get(x)+1) \uff0c\u5c06\u8be5\u8bcd\u9891\u6570\u52a0 1\u3002 \u4e0a\u9762\u6211\u4eec\u7edf\u8ba1\u4e86\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a**\u5c0f\u9876\u5806**\u6765\u627e\u51fa\u6240\u6709\u8bcd\u4e2d\u51fa\u73b0\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u3002\u5177\u4f53\u65b9\u6cd5\u662f\uff1a\u4f9d\u6b21\u904d\u5386\u6bcf\u4e2a\u5c0f\u6587\u4ef6\uff0c\u6784\u5efa\u4e00\u4e2a**\u5c0f\u9876\u5806**\uff0c\u5806\u5927\u5c0f\u4e3a 100\u3002\u5982\u679c\u904d\u5386\u5230\u7684\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u5806\u9876\u8bcd\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5219\u7528\u65b0\u8bcd\u66ff\u6362\u5806\u9876\u7684\u8bcd\uff0c\u7136\u540e\u91cd\u65b0\u8c03\u6574\u4e3a**\u5c0f\u9876\u5806**\uff0c\u904d\u5386\u7ed3\u675f\u540e\uff0c\u5c0f\u9876\u5806\u4e0a\u7684\u8bcd\u5c31\u662f\u51fa\u73b0\u9891\u6570\u6700\u9ad8\u7684 100 \u4e2a\u8bcd\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_6","text":"1.\u5206\u800c\u6cbb\u4e4b\uff0c\u8fdb\u884c\u54c8\u5e0c\u53d6\u4f59\uff1b2.\u4f7f\u7528 HashMap \u7edf\u8ba1\u9891\u6570\uff1b3.\u6c42\u89e3**\u6700\u5927**\u7684 TopN \u4e2a\uff0c\u7528**\u5c0f\u9876\u5806**\uff1b\u6c42\u89e3**\u6700\u5c0f**\u7684 TopN \u4e2a\uff0c\u7528**\u5927\u9876\u5806**\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#3","text":"","title":"\u9898\u76ee3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_7","text":"\u73b0\u6709\u6d77\u91cf\u65e5\u5fd7\u6570\u636e\u4fdd\u5b58\u5728\u4e00\u4e2a\u8d85\u5927\u6587\u4ef6\u4e2d\uff0c\u8be5\u6587\u4ef6\u65e0\u6cd5\u76f4\u63a5\u8bfb\u5165\u5185\u5b58\uff0c\u8981\u6c42\u4ece\u4e2d\u63d0\u53d6\u67d0\u5929\u8bbf\u95ee\u767e\u5ea6\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a IP\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_8","text":"\u8fd9\u9053\u9898\u53ea\u5173\u5fc3\u67d0\u4e00\u5929\u8bbf\u95ee\u767e\u5ea6\u6700\u591a\u7684 IP\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u9996\u5148\u5bf9\u6587\u4ef6\u8fdb\u884c\u4e00\u6b21\u904d\u5386\uff0c\u628a\u8fd9\u4e00\u5929\u8bbf\u95ee\u767e\u5ea6 IP \u7684\u76f8\u5173\u4fe1\u606f\u8bb0\u5f55\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5927\u6587\u4ef6\u4e2d\u3002\u63a5\u4e0b\u6765\u91c7\u7528\u7684\u65b9\u6cd5\u4e0e\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u5927\u81f4\u5c31\u662f\u5148\u5bf9 IP \u8fdb\u884c\u54c8\u5e0c\u6620\u5c04\uff0c\u63a5\u7740\u4f7f\u7528 HashMap \u7edf\u8ba1\u91cd\u590d IP \u7684\u6b21\u6570\uff0c\u6700\u540e\u8ba1\u7b97\u51fa\u91cd\u590d\u6b21\u6570\u6700\u591a\u7684 IP\u3002 \u6ce8\uff1a\u8fd9\u91cc\u53ea\u9700\u8981\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 IP\uff0c\u53ef\u4ee5\u4e0d\u5fc5\u4f7f\u7528\u5806\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a\u53d8\u91cf max \u5373\u53ef\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_9","text":"1.\u5206\u800c\u6cbb\u4e4b\uff0c\u8fdb\u884c\u54c8\u5e0c\u53d6\u4f59\uff1b2.\u4f7f\u7528 HashMap \u7edf\u8ba1\u9891\u6570\uff1b3.\u6c42\u89e3**\u6700\u5927**\u7684 TopN \u4e2a\uff0c\u7528**\u5c0f\u9876\u5806**\uff1b\u6c42\u89e3**\u6700\u5c0f**\u7684 TopN \u4e2a\uff0c\u7528**\u5927\u9876\u5806**\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#4","text":"","title":"\u9898\u76ee4"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_10","text":"\u5728 2.5 \u4ebf\u4e2a\u6574\u6570\u4e2d\u627e\u51fa\u4e0d\u91cd\u590d\u7684\u6574\u6570\u3002\u6ce8\u610f\uff1a\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u8fd9 2.5 \u4ebf\u4e2a\u6574\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_11","text":"","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_12","text":"\u4e0e\u524d\u9762\u7684\u9898\u76ee\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u5148\u5c06 2.5 \u4ebf\u4e2a\u6570\u5212\u5206\u5230\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u7528 HashSet/HashMap \u627e\u51fa\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u4e0d\u91cd\u590d\u7684\u6574\u6570\uff0c\u518d\u5408\u5e76\u6bcf\u4e2a\u5b50\u7ed3\u679c\uff0c\u5373\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002","title":"\u65b9\u6cd5\u4e00\uff1a\u5206\u6cbb\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_13","text":"\u4f4d\u56fe \uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a bit \u6765\u6807\u8bb0\u67d0\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u503c\uff0c\u800c\u952e\u5c31\u662f\u8be5\u5143\u7d20\u3002\u91c7\u7528\u4f4d\u4f5c\u4e3a\u5355\u4f4d\u6765\u5b58\u50a8\u6570\u636e\uff0c\u53ef\u4ee5\u5927\u5927\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u3002 \u4f4d\u56fe\u901a\u8fc7\u4f7f\u7528\u4f4d\u6570\u7ec4\u6765\u8868\u793a\u67d0\u4e9b\u5143\u7d20\u662f\u5426\u5b58\u5728\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5feb\u901f\u67e5\u627e\uff0c\u5224\u91cd\uff0c\u6392\u5e8f\u7b49\u3002\u4e0d\u662f\u5f88\u6e05\u695a\uff1f\u6211\u5148\u4e3e\u4e2a\u5c0f\u4f8b\u5b50\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u5bf9 [0,7] \u4e2d\u7684 5 \u4e2a\u5143\u7d20 (6, 4, 2, 1, 5) \u8fdb\u884c\u6392\u5e8f\uff0c\u53ef\u4ee5\u91c7\u7528\u4f4d\u56fe\u6cd5\u30020~7 \u8303\u56f4\u603b\u5171\u6709 8 \u4e2a\u6570\uff0c\u53ea\u9700\u8981 8bit\uff0c\u5373 1 \u4e2a\u5b57\u8282\u3002\u9996\u5148\u5c06\u6bcf\u4e2a\u4f4d\u90fd\u7f6e 0\uff1a \u7136\u540e\u904d\u5386 5 \u4e2a\u5143\u7d20\uff0c\u9996\u5148\u9047\u5230 6\uff0c\u90a3\u4e48\u5c06\u4e0b\u6807\u4e3a 6 \u7684\u4f4d\u7684 0 \u7f6e\u4e3a 1\uff1b\u63a5\u7740\u9047\u5230 4\uff0c\u628a\u4e0b\u6807\u4e3a 4 \u7684\u4f4d \u7684 0 \u7f6e\u4e3a 1\uff1a \u4f9d\u6b21\u904d\u5386\uff0c\u7ed3\u675f\u540e\uff0c\u4f4d\u6570\u7ec4\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a\u4e3a 1 \u7684\u4f4d\uff0c\u5b83\u7684\u4e0b\u6807\u90fd\u8868\u793a\u4e86\u4e00\u4e2a\u6570\uff1a \u8fd9\u6837\u6211\u4eec\u5176\u5b9e\u5c31\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6392\u5e8f\u3002 \u5bf9\u4e8e\u6574\u6570\u76f8\u5173\u7684\u7b97\u6cd5\u7684\u6c42\u89e3\uff0c**\u4f4d\u56fe\u6cd5**\u662f\u4e00\u79cd\u975e\u5e38\u5b9e\u7528\u7684\u7b97\u6cd5\u3002\u5047\u8bbe int \u6574\u6570\u5360\u7528 4B\uff0c\u5373 32bit\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8868\u793a\u7684\u6574\u6570\u7684\u4e2a\u6570\u4e3a 232\u3002 \u90a3\u4e48\u5bf9\u4e8e\u8fd9\u9053\u9898 \uff0c\u6211\u4eec\u7528 2 \u4e2a bit \u6765\u8868\u793a\u5404\u4e2a\u6570\u5b57\u7684\u72b6\u6001\uff1a \u202200 \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u6ca1\u51fa\u73b0\u8fc7\uff1b\u202201 \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u8fc7\u4e00\u6b21\uff08\u5373\u4e3a\u9898\u76ee\u6240\u627e\u7684\u4e0d\u91cd\u590d\u6574\u6570\uff09\uff1b\u202210 \u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u51fa\u73b0\u4e86\u591a\u6b21\u3002 \u90a3\u4e48\u8fd9 232 \u4e2a\u6574\u6570\uff0c\u603b\u5171\u6240\u9700\u5185\u5b58\u4e3a 232*2b=1GB\u3002\u56e0\u6b64\uff0c\u5f53\u53ef\u7528\u5185\u5b58\u8d85\u8fc7 1GB \u65f6\uff0c\u53ef\u4ee5\u91c7\u7528\u4f4d\u56fe\u6cd5\u3002\u5047\u8bbe\u5185\u5b58\u6ee1\u8db3\u4f4d\u56fe\u6cd5\u9700\u6c42\uff0c\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a \u904d\u5386 2.5 \u4ebf\u4e2a\u6574\u6570\uff0c\u67e5\u770b\u4f4d\u56fe\u4e2d\u5bf9\u5e94\u7684\u4f4d\uff0c\u5982\u679c\u662f 00\uff0c\u5219\u53d8\u4e3a 01\uff0c\u5982\u679c\u662f 01 \u5219\u53d8\u4e3a 10\uff0c\u5982\u679c\u662f 10 \u5219\u4fdd\u6301\u4e0d\u53d8\u3002\u904d\u5386\u7ed3\u675f\u540e\uff0c\u67e5\u770b\u4f4d\u56fe\uff0c\u628a\u5bf9\u5e94\u4f4d\u662f 01 \u7684\u6574\u6570\u8f93\u51fa\u5373\u53ef\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u4f4d\u56fe\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_14","text":"\u5224\u65ad\u6570\u5b57\u662f\u5426\u91cd\u590d\u7684\u95ee\u9898 \uff0c\u4f4d\u56fe\u6cd5\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#5","text":"","title":"\u9898\u76ee5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_15","text":"\u7ed9\u5b9a 40 \u4ebf\u4e2a\u4e0d\u91cd\u590d\u7684\u6ca1\u6392\u8fc7\u5e8f\u7684 unsigned int \u578b\u6574\u6570\uff0c\u7136\u540e\u518d\u7ed9\u5b9a\u4e00\u4e2a\u6570\uff0c\u5982\u4f55\u5feb\u901f\u5224\u65ad\u8fd9\u4e2a\u6570\u662f\u5426\u5728\u8fd9 40 \u4ebf\u4e2a\u6574\u6570\u5f53\u4e2d\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_16","text":"","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_17","text":"\u4f9d\u7136\u53ef\u4ee5\u7528\u5206\u6cbb\u6cd5\u89e3\u51b3\uff0c\u65b9\u6cd5\u4e0e\u524d\u9762\u7c7b\u4f3c\uff0c\u5c31\u4e0d\u518d\u6b21\u8d58\u8ff0\u4e86\u3002","title":"\u65b9\u6cd5\u4e00\uff1a\u5206\u6cbb\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_18","text":"40 \u4ebf\u4e2a\u4e0d\u91cd\u590d\u6574\u6570\uff0c\u6211\u4eec\u7528 40 \u4ebf\u4e2a bit \u6765\u8868\u793a\uff0c\u521d\u59cb\u4f4d\u5747\u4e3a 0\uff0c\u90a3\u4e48\u603b\u5171\u9700\u8981\u5185\u5b58\uff1a4,000,000,000b\u2248512M\u3002 \u6211\u4eec\u8bfb\u53d6\u8fd9 40 \u4ebf\u4e2a\u6574\u6570\uff0c\u5c06\u5bf9\u5e94\u7684 bit \u8bbe\u7f6e\u4e3a 1\u3002\u63a5\u7740\u8bfb\u53d6\u8981\u67e5\u8be2\u7684\u6570\uff0c\u67e5\u770b\u76f8\u5e94\u4f4d\u662f\u5426\u4e3a 1\uff0c\u5982\u679c\u4e3a 1 \u8868\u793a\u5b58\u5728\uff0c\u5982\u679c\u4e3a 0 \u8868\u793a\u4e0d\u5b58\u5728\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u4f4d\u56fe\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_19","text":"\u5224\u65ad\u6570\u5b57\u662f\u5426\u5b58\u5728\u3001\u5224\u65ad\u6570\u5b57\u662f\u5426\u91cd\u590d\u7684\u95ee\u9898 \uff0c\u4f4d\u56fe\u6cd5\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#6","text":"","title":"\u9898\u76ee6"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_20","text":"\u641c\u7d22\u5f15\u64ce\u4f1a\u901a\u8fc7\u65e5\u5fd7\u6587\u4ef6\u628a\u7528\u6237\u6bcf\u6b21\u68c0\u7d22\u4f7f\u7528\u7684\u6240\u6709\u67e5\u8be2\u4e32\u90fd\u8bb0\u5f55\u4e0b\u6765\uff0c\u6bcf\u4e2a\u67e5\u8be2\u5e8a\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 255 \u5b57\u8282\u3002 \u5047\u8bbe\u76ee\u524d\u6709 1000w \u4e2a\u8bb0\u5f55\uff08\u8fd9\u4e9b\u67e5\u8be2\u4e32\u7684\u91cd\u590d\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u867d\u7136\u603b\u6570\u662f 1000w\uff0c\u4f46\u5982\u679c\u9664\u53bb\u91cd\u590d\u540e\uff0c\u5219\u4e0d\u8d85\u8fc7 300w \u4e2a\uff09\u3002\u8bf7\u7edf\u8ba1\u6700\u70ed\u95e8\u7684 10 \u4e2a\u67e5\u8be2\u4e32\uff0c\u8981\u6c42\u4f7f\u7528\u7684\u5185\u5b58\u4e0d\u80fd\u8d85\u8fc7 1G\u3002\uff08\u4e00\u4e2a\u67e5\u8be2\u4e32\u7684\u91cd\u590d\u5ea6\u8d8a\u9ad8\uff0c\u8bf4\u660e\u67e5\u8be2\u5b83\u7684\u7528\u6237\u8d8a\u591a\uff0c\u4e5f\u5c31\u8d8a\u70ed\u95e8\u3002\uff09","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_21","text":"\u6bcf\u4e2a\u67e5\u8be2\u4e32\u6700\u957f\u4e3a 255B\uff0c1000w \u4e2a\u4e32\u9700\u8981\u5360\u7528 \u7ea6 2.55G \u5185\u5b58\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u65e0\u6cd5\u5c06\u6240\u6709\u5b57\u7b26\u4e32\u5168\u90e8\u8bfb\u5165\u5230\u5185\u5b58\u4e2d\u5904\u7406\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_22","text":"\u5206\u6cbb\u6cd5\u4f9d\u7136\u662f\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u65b9\u6cd5\u3002 \u5212\u5206\u4e3a\u591a\u4e2a\u5c0f\u6587\u4ef6\uff0c\u4fdd\u8bc1\u5355\u4e2a\u5c0f\u6587\u4ef6\u4e2d\u7684\u5b57\u7b26\u4e32\u80fd\u88ab\u76f4\u63a5\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5904\u7406\uff0c\u7136\u540e\u6c42\u51fa\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684 10 \u4e2a\u5b57\u7b26\u4e32\uff1b\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u5c0f\u9876\u5806\u7edf\u8ba1\u51fa\u6240\u6709\u6587\u4ef6\u4e2d\u51fa\u73b0\u6700\u591a\u7684 10 \u4e2a\u5b57\u7b26\u4e32\u3002 \u65b9\u6cd5\u53ef\u884c\uff0c\u4f46\u4e0d\u662f\u6700\u597d\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5176\u4ed6\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u4e00\uff1a\u5206\u6cbb\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#hashmap","text":"\u867d\u7136\u5b57\u7b26\u4e32\u603b\u6570\u6bd4\u8f83\u591a\uff0c\u4f46\u53bb\u91cd\u540e\u4e0d\u8d85\u8fc7 300w\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u5b57\u7b26\u4e32\u53ca\u51fa\u73b0\u6b21\u6570\u4fdd\u5b58\u5728\u4e00\u4e2a HashMap \u4e2d\uff0c\u6240\u5360\u7528\u7684\u7a7a\u95f4\u4e3a 300w*(255+4)\u2248777M\uff08\u5176\u4e2d\uff0c4\u8868\u793a\u6574\u6570\u5360\u7528\u76844\u4e2a\u5b57\u8282\uff09\u3002\u7531\u6b64\u53ef\u89c1\uff0c1G \u7684\u5185\u5b58\u7a7a\u95f4\u5b8c\u5168\u591f\u7528\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u9996\u5148\uff0c\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u82e5\u4e0d\u5728 map \u4e2d\uff0c\u76f4\u63a5\u5b58\u5165 map\uff0cvalue \u8bb0\u4e3a 1\uff1b\u82e5\u5728 map \u4e2d\uff0c\u5219\u628a\u5bf9\u5e94\u7684 value \u52a0 1\uff0c\u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u5ea6 O(N) \u3002 \u63a5\u7740\u904d\u5386 map\uff0c\u6784\u5efa\u4e00\u4e2a 10 \u4e2a\u5143\u7d20\u7684\u5c0f\u9876\u5806\uff0c\u82e5\u904d\u5386\u5230\u7684\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u5806\u9876\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5219\u8fdb\u884c\u66ff\u6362\uff0c\u5e76\u5c06\u5806\u8c03\u6574\u4e3a\u5c0f\u9876\u5806\u3002 \u904d\u5386\u7ed3\u675f\u540e\uff0c\u5806\u4e2d 10 \u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e00\u6b65\u65f6\u95f4\u590d\u6742\u5ea6 O(Nlog10) \u3002","title":"\u65b9\u6cd5\u4e8c\uff1aHashMap \u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_23","text":"\u65b9\u6cd5\u4e8c\u4f7f\u7528\u4e86 HashMap \u6765\u7edf\u8ba1\u6b21\u6570\uff0c\u5f53\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6709\u5927\u91cf\u76f8\u540c\u524d\u7f00\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u524d\u7f00\u6811\u6765\u7edf\u8ba1\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6811\u7684\u7ed3\u70b9\u4fdd\u5b58\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570\uff0c0 \u8868\u793a\u6ca1\u6709\u51fa\u73b0\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u5728\u904d\u5386\u5b57\u7b26\u4e32\u65f6\uff0c\u5728\u524d\u7f00\u6811\u4e2d\u67e5\u627e\uff0c\u5982\u679c\u627e\u5230\uff0c\u5219\u628a\u7ed3\u70b9\u4e2d\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\u6b21\u6570\u52a0 1\uff0c\u5426\u5219\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6784\u5efa\u65b0\u7ed3\u70b9\uff0c\u6784\u5efa\u5b8c\u6210\u540e\u628a\u53f6\u5b50\u7ed3\u70b9\u4e2d\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u7f6e\u4e3a 1\u3002 \u6700\u540e\u4f9d\u7136\u4f7f\u7528\u5c0f\u9876\u5806\u6765\u5bf9\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u65b9\u6cd5\u4e09\uff1a\u524d\u7f00\u6811\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_24","text":"\u524d\u7f00\u6811\u7ecf\u5e38\u88ab\u7528\u6765\u7edf\u8ba1\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5b83\u7684\u53e6\u5916\u4e00\u4e2a\u5927\u7684\u7528\u9014\u662f\u5b57\u7b26\u4e32\u67e5\u627e\uff0c\u5224\u65ad\u662f\u5426\u6709\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u7b49\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#7","text":"","title":"\u9898\u76ee7"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_25","text":"\u5df2\u77e5\u67d0\u4e2a\u6587\u4ef6\u5185\u5305\u542b\u4e00\u4e9b\u7535\u8bdd\u53f7\u7801\uff0c\u6bcf\u4e2a\u53f7\u7801\u4e3a 8 \u4f4d\u6570\u5b57\uff0c\u7edf\u8ba1\u4e0d\u540c\u53f7\u7801\u7684\u4e2a\u6570\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_26","text":"\u8fd9\u9053\u9898\u672c\u8d28\u8fd8\u662f\u6c42\u89e3**\u6570\u636e\u91cd\u590d**\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u4e00\u822c\u9996\u5148\u8003\u8651\u4f4d\u56fe\u6cd5\u3002 \u5bf9\u4e8e\u672c\u9898\uff0c8 \u4f4d\u7535\u8bdd\u53f7\u7801\u53ef\u4ee5\u8868\u793a\u7684\u53f7\u7801\u4e2a\u6570\u4e3a 108 \u4e2a\uff0c\u5373 1 \u4ebf\u4e2a\u3002\u6211\u4eec\u6bcf\u4e2a\u53f7\u7801\u7528\u4e00\u4e2a bit \u6765\u8868\u793a\uff0c\u5219\u603b\u5171\u9700\u8981 1 \u4ebf\u4e2a bit\uff0c\u5185\u5b58\u5360\u7528\u7ea6 100M\u3002 \u601d\u8def\u5982\u4e0b \uff1a \u7533\u8bf7\u4e00\u4e2a\u4f4d\u56fe\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3a 1 \u4ebf\uff0c\u521d\u59cb\u5316\u4e3a 0\u3002\u7136\u540e\u904d\u5386\u6240\u6709\u7535\u8bdd\u53f7\u7801\uff0c\u628a\u53f7\u7801\u5bf9\u5e94\u7684\u4f4d\u56fe\u4e2d\u7684\u4f4d\u7f6e\u7f6e\u4e3a 1\u3002\u904d\u5386\u5b8c\u6210\u540e\uff0c\u5982\u679c bit \u4e3a 1\uff0c\u5219\u8868\u793a\u8fd9\u4e2a\u7535\u8bdd\u53f7\u7801\u5728\u6587\u4ef6\u4e2d\u5b58\u5728\uff0c\u5426\u5219\u4e0d\u5b58\u5728\u3002bit \u503c\u4e3a 1 \u7684\u6570\u91cf\u5373\u4e3a \u4e0d\u540c\u7535\u8bdd\u53f7\u7801\u7684\u4e2a\u6570\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_27","text":"\u6c42\u89e3\u6570\u636e\u91cd\u590d\u95ee\u9898\uff0c\u8bb0\u5f97\u8003\u8651\u4f4d\u56fe\u6cd5\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#8","text":"","title":"\u9898\u76ee8"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_28","text":"\u4ece 5 \u4ebf\u4e2a\u6570\u4e2d\u627e\u51fa\u4e2d\u4f4d\u6570\u3002\u6570\u636e\u6392\u5e8f\u540e\uff0c\u4f4d\u7f6e\u5728\u6700\u4e2d\u95f4\u7684\u6570\u5c31\u662f\u4e2d\u4f4d\u6570\u3002\u5f53\u6837\u672c\u6570\u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4e3a \u7b2c (N+1)/2 \u4e2a\u6570\uff1b\u5f53\u6837\u672c\u6570\u4e3a\u5076\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u4e3a \u7b2c N/2 \u4e2a\u6570\u4e0e\u7b2c 1+N/2 \u4e2a\u6570\u7684\u5747\u503c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_29","text":"\u5982\u679c\u8fd9\u9053\u9898\u6ca1\u6709\u5185\u5b58\u5927\u5c0f\u9650\u5236\uff0c\u5219\u53ef\u4ee5\u628a\u6240\u6709\u6570\u8bfb\u5230\u5185\u5b58\u4e2d\u6392\u5e8f\u540e\u627e\u51fa\u4e2d\u4f4d\u6570\u3002\u4f46\u662f\u6700\u597d\u7684\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(NlogN) \u3002\u8fd9\u91cc\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_30","text":"\u7ef4\u62a4\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u9876\u5806\uff0c\u4e00\u4e2a\u5c0f\u9876\u5806\u3002\u5927\u9876\u5806\u4e2d\u6700\u5927\u7684\u6570**\u5c0f\u4e8e\u7b49\u4e8e**\u5c0f\u9876\u5806\u4e2d\u6700\u5c0f\u7684\u6570\uff1b\u4fdd\u8bc1\u8fd9\u4e24\u4e2a\u5806\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u7684\u5dee\u4e0d\u8d85\u8fc7 1\u3002 \u82e5\u6570\u636e\u603b\u6570\u4e3a**\u5076\u6570**\uff0c\u5f53\u8fd9\u4e24\u4e2a\u5806\u5efa\u597d\u4e4b\u540e\uff0c \u4e2d\u4f4d\u6570\u5c31\u662f\u8fd9\u4e24\u4e2a\u5806\u9876\u5143\u7d20\u7684\u5e73\u5747\u503c \u3002\u5f53\u6570\u636e\u603b\u6570\u4e3a**\u5947\u6570**\u65f6\uff0c\u6839\u636e\u4e24\u4e2a\u5806\u7684\u5927\u5c0f\uff0c \u4e2d\u4f4d\u6570\u4e00\u5b9a\u5728\u6570\u636e\u591a\u7684\u5806\u7684\u5806\u9876 \u3002 \u89c1 LeetCode No.295\uff1a https://leetcode.com/problems/find-median-from-data-stream/ \u4ee5\u4e0a\u8fd9\u79cd\u65b9\u6cd5\uff0c\u9700\u8981\u628a\u6240\u6709\u6570\u636e\u90fd\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u5f53\u6570\u636e\u91cf\u5f88\u5927\u65f6\uff0c\u5c31\u4e0d\u80fd\u8fd9\u6837\u4e86\uff0c\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u6cd5**\u9002\u7528\u4e8e\u6570\u636e\u91cf\u8f83\u5c0f\u7684\u60c5\u51b5**\u30025 \u4ebf\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u5b57\u5360\u7528 4B\uff0c\u603b\u5171\u9700\u8981 2G \u5185\u5b58\u3002\u5982\u679c\u53ef\u7528\u5185\u5b58\u4e0d\u8db3 2G\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e86\uff0c\u4e0b\u9762\u4ecb\u7ecd\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u4e00\uff1a\u53cc\u5806\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_31","text":"\u5206\u6cbb\u6cd5\u7684\u601d\u60f3\u662f\u628a\u4e00\u4e2a\u5927\u7684\u95ee\u9898\u9010\u6e10\u8f6c\u6362\u4e3a\u89c4\u6a21\u8f83\u5c0f\u7684\u95ee\u9898\u6765\u6c42\u89e3\u3002 \u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u987a\u5e8f\u8bfb\u53d6\u8fd9 5 \u4ebf\u4e2a\u6570\u5b57\uff0c\u5bf9\u4e8e\u8bfb\u53d6\u5230\u7684\u6570\u5b57 num\uff0c\u5982\u679c\u5b83\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u4e2d\u6700\u9ad8\u4f4d\u4e3a 1\uff0c\u5219\u628a\u8fd9\u4e2a\u6570\u5b57\u5199\u5230 f1 \u4e2d\uff0c\u5426\u5219\u5199\u5165 f0 \u4e2d\u3002\u901a\u8fc7\u8fd9\u4e00\u6b65\uff0c\u53ef\u4ee5\u628a\u8fd9 5 \u4ebf\u4e2a\u6570\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u800c\u4e14 f0 \u4e2d\u7684\u6570\u90fd\u5927\u4e8e f1 \u4e2d\u7684\u6570\uff08\u6700\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\uff09\u3002 \u5212\u5206\u4e4b\u540e\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u77e5\u9053\u4e2d\u4f4d\u6570\u662f\u5728 f0 \u8fd8\u662f f1 \u4e2d\u3002\u5047\u8bbe f1 \u4e2d\u6709 1 \u4ebf\u4e2a\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u4e00\u5b9a\u5728 f0 \u4e2d\uff0c\u4e14\u662f\u5728 f0 \u4e2d\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\u7b2c 1.5 \u4ebf\u4e2a\u6570\u4e0e\u5b83\u540e\u9762\u7684\u4e00\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u63d0\u793a \uff0c5 \u4ebf\u6570\u7684\u4e2d\u4f4d\u6570\u662f\u7b2c 2.5 \u4ebf\u4e0e\u53f3\u8fb9\u76f8\u90bb\u4e00\u4e2a\u6570\u6c42\u5e73\u5747\u503c\u3002\u82e5 f1 \u6709\u4e00\u4ebf\u4e2a\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f f0 \u4e2d\u4ece\u7b2c 1.5 \u4ebf\u4e2a\u6570\u5f00\u59cb\u7684\u4e24\u4e2a\u6570\u6c42\u5f97\u7684\u5e73\u5747\u503c\u3002 \u5bf9\u4e8e f0 \u53ef\u4ee5\u7528\u6b21\u9ad8\u4f4d\u7684\u4e8c\u8fdb\u5236\u7ee7\u7eed\u5c06\u6587\u4ef6\u4e00\u5206\u4e3a\u4e8c\uff0c\u5982\u6b64\u5212\u5206\u4e0b\u53bb\uff0c\u76f4\u5230\u5212\u5206\u540e\u7684\u6587\u4ef6\u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u628a\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u4ee5\u540e\u76f4\u63a5\u6392\u5e8f\uff0c\u627e\u51fa\u4e2d\u4f4d\u6570\u3002 \u6ce8\u610f \uff0c\u5f53\u6570\u636e\u603b\u6570\u4e3a\u5076\u6570\uff0c\u5982\u679c\u5212\u5206\u540e\u4e24\u4e2a\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u6709\u76f8\u540c\u4e2a\u6570\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6570\u636e\u8f83\u5c0f\u7684\u6587\u4ef6\u4e2d\u7684\u6700\u5927\u503c\u4e0e\u6570\u636e\u8f83\u5927\u7684\u6587\u4ef6\u4e2d\u7684\u6700\u5c0f\u503c\u7684\u5e73\u5747\u503c\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u5206\u6cbb\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_32","text":"\u5206\u6cbb\u6cd5\uff0c\u771f\u9999\uff01","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#9","text":"","title":"\u9898\u76ee9"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_33","text":"\u6709 10 \u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5927\u5c0f\u4e3a 1G\uff0c\u6bcf\u4e2a\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\u5b58\u653e\u7684\u90fd\u662f\u7528\u6237\u7684 query\uff0c\u6bcf\u4e2a\u6587\u4ef6\u7684 query \u90fd\u53ef\u80fd\u91cd\u590d\u3002\u8981\u6c42\u6309\u7167 query \u7684\u9891\u5ea6\u6392\u5e8f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_34","text":"\u5982\u679c query \u7684\u91cd\u590d\u5ea6\u6bd4\u8f83\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u4e00\u6b21\u6027\u628a\u6240\u6709 query \u8bfb\u5165\u5185\u5b58\u4e2d\u5904\u7406\uff1b\u5982\u679c query \u7684\u91cd\u590d\u7387\u4e0d\u9ad8\uff0c\u90a3\u4e48\u53ef\u7528\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u6240\u6709\u7684 query\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u91c7\u7528\u5206\u6cbb\u6cd5\u6216\u5176\u4ed6\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#hashmap_1","text":"\u5982\u679c query \u91cd\u590d\u7387\u9ad8\uff0c\u8bf4\u660e\u4e0d\u540c query \u603b\u6570\u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u6240\u6709\u7684 query \u90fd\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684 HashMap \u4e2d\u3002\u63a5\u7740\u5c31\u53ef\u4ee5\u6309\u7167 query \u51fa\u73b0\u7684\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u65b9\u6cd5\u4e00\uff1aHashMap \u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_35","text":"\u5206\u6cbb\u6cd5\u9700\u8981\u6839\u636e\u6570\u636e\u91cf\u5927\u5c0f\u4ee5\u53ca\u53ef\u7528\u5185\u5b58\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u95ee\u9898\u5212\u5206\u7684\u89c4\u6a21\u3002\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u53ef\u4ee5\u987a\u5e8f\u904d\u5386 10 \u4e2a\u6587\u4ef6\u4e2d\u7684 query\uff0c\u901a\u8fc7 Hash \u51fd\u6570 hash(query) % 10 \u628a\u8fd9\u4e9b query \u5212\u5206\u5230 10 \u4e2a\u5c0f\u6587\u4ef6\u4e2d\u3002\u4e4b\u540e\u5bf9\u6bcf\u4e2a\u5c0f\u6587\u4ef6\u4f7f\u7528 HashMap \u7edf\u8ba1 query \u51fa\u73b0\u6b21\u6570\uff0c\u6839\u636e\u6b21\u6570\u6392\u5e8f\u5e76\u5199\u5165\u5230\u96f6\u5916\u4e00\u4e2a\u5355\u72ec\u6587\u4ef6\u4e2d\u3002 \u63a5\u7740\u5bf9\u6240\u6709\u6587\u4ef6\u6309\u7167 query \u7684\u6b21\u6570\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\uff08\u7531\u4e8e\u65e0\u6cd5\u628a\u6240\u6709 query \u90fd\u8bfb\u5165\u5185\u5b58\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u5916\u6392\u5e8f\uff09\u3002","title":"\u65b9\u6cd5\u4e8c\uff1a\u5206\u6cbb\u6cd5"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_36","text":"\u2022\u5185\u5b58\u82e5\u591f\uff0c\u76f4\u63a5\u8bfb\u5165\u8fdb\u884c\u6392\u5e8f\uff1b\u2022\u5185\u5b58\u4e0d\u591f\uff0c\u5148\u5212\u5206\u4e3a\u5c0f\u6587\u4ef6\uff0c\u5c0f\u6587\u4ef6\u6392\u597d\u5e8f\u540e\uff0c\u6574\u7406\u4f7f\u7528\u5916\u6392\u5e8f\u8fdb\u884c\u5f52\u5e76\u3002","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#10","text":"","title":"\u9898\u76ee10"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_37","text":"\u6709 20 \u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u6709 500 \u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u6709\u5e8f\u6392\u5217\u3002\u5982\u4f55\u5728\u8fd9 20*500 \u4e2a\u6570\u4e2d\u627e\u51fa\u524d 500 \u7684\u6570\uff1f","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_38","text":"\u5bf9\u4e8e TopK \u95ee\u9898\uff0c\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u5806\u6392\u5e8f\u3002\u5bf9\u672c\u9898\u800c\u8a00\uff0c\u5047\u8bbe\u6570\u7ec4\u964d\u5e8f\u6392\u5217\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a \u9996\u5148\u5efa\u7acb\u5927\u9876\u5806\uff0c\u5806\u7684\u5927\u5c0f\u4e3a\u6570\u7ec4\u7684\u4e2a\u6570\uff0c\u5373\u4e3a 20\uff0c\u628a\u6bcf\u4e2a\u6570\u7ec4\u6700\u5927\u7684\u503c\u5b58\u5230\u5806\u4e2d\u3002 \u63a5\u7740\u5220\u9664\u5806\u9876\u5143\u7d20\uff0c\u4fdd\u5b58\u5230\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e3a 500 \u7684\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u5411\u5927\u9876\u5806\u63d2\u5165\u5220\u9664\u7684\u5143\u7d20\u6240\u5728\u6570\u7ec4\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u91cd\u590d\u4e0a\u9762\u7684\u6b65\u9aa4\uff0c\u76f4\u5230\u5220\u9664\u5b8c\u7b2c 500 \u4e2a\u5143\u7d20\uff0c\u4e5f\u5373\u627e\u51fa\u4e86\u6700\u5927\u7684\u524d 500 \u4e2a\u6570\u3002 \u4e3a\u4e86\u5728\u5806\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6570\u636e\u540e\uff0c\u80fd\u77e5\u9053\u5b83\u662f\u4ece\u54ea\u4e2a\u6570\u7ec4\u4e2d\u53d6\u51fa\u7684\uff0c\u4ece\u800c\u53ef\u4ee5\u4ece\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u53d6\u4e0b\u4e00\u4e2a\u503c\uff0c\u53ef\u4ee5\u628a\u6570\u7ec4\u7684\u6307\u9488\u5b58\u653e\u5230\u5806\u4e2d\uff0c\u5bf9\u8fd9\u4e2a\u6307\u9488\u63d0\u4f9b\u6bd4\u8f83\u5927\u5c0f\u7684\u65b9\u6cd5\u3002 import lombok.Data; import java.util.Arrays; import java.util.PriorityQueue; /** * @author https://github.com/yanglbme */ @Data public class DataWithSource implements Comparable<DataWithSource> { /** * \u6570\u503c */ private int value; /** * \u8bb0\u5f55\u6570\u503c\u6765\u6e90\u7684\u6570\u7ec4 */ private int source; /** * \u8bb0\u5f55\u6570\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15 */ private int index; public DataWithSource(int value, int source, int index) { this.value = value; this.source = source; this.index = index; } /** * * \u7531\u4e8e PriorityQueue \u4f7f\u7528\u5c0f\u9876\u5806\u6765\u5b9e\u73b0\uff0c\u8fd9\u91cc\u901a\u8fc7\u4fee\u6539 * \u4e24\u4e2a\u6574\u6570\u7684\u6bd4\u8f83\u903b\u8f91\u6765\u8ba9 PriorityQueue \u53d8\u6210\u5927\u9876\u5806 */ @Override public int compareTo(DataWithSource o) { return Integer.compare(o.getValue(), this.value); } } class Test { public static int[] getTop(int[][] data) { int rowSize = data.length; int columnSize = data[0].length; // \u521b\u5efa\u4e00\u4e2acolumnSize\u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5b58\u653e\u7ed3\u679c int[] result = new int[columnSize]; PriorityQueue<DataWithSource> maxHeap = new PriorityQueue<>(); for (int i = 0; i < rowSize; ++i) { // \u5c06\u6bcf\u4e2a\u6570\u7ec4\u7684\u6700\u5927\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u5806\u4e2d DataWithSource d = new DataWithSource(data[i][0], i, 0); maxHeap.add(d); } int num = 0; while (num < columnSize) { // \u5220\u9664\u5806\u9876\u5143\u7d20 DataWithSource d = maxHeap.poll(); result[num++] = d.getValue(); if (num >= columnSize) { break; } d.setValue(data[d.getSource()][d.getIndex() + 1]); d.setIndex(d.getIndex() + 1); maxHeap.add(d); } return result; } public static void main(String[] args) { int[][] data = { {29, 17, 14, 2, 1}, {19, 17, 16, 15, 6}, {30, 25, 20, 14, 5}, }; int[] top = getTop(data); System.out.println(Arrays.toString(top)); // [30, 29, 25, 20, 19] } }","title":"\u89e3\u7b54\u601d\u8def"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE/#_39","text":"\u6c42 TopK\uff0c\u4e0d\u59a8\u8003\u8651\u4e00\u4e0b\u5806\u6392\u5e8f\uff1f","title":"\u65b9\u6cd5\u603b\u7ed3"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F/","text":"Java \u00b6 \u3010VIVO\u3011vivo Java\u540e\u7aef\u79cb\u62db\u63d0\u524d\u6279\u9762\u7ecf \u676d\u5dde\u573a www.nowcoder.com/discuss/198\u2026 \u3010VIVO\u3011\u8fdf\u6765\u768412\u65e5\u6b66\u6c49vivo Java\u540e\u53f0\u9762\u7ecf\uff08\u5df2\u51c9\uff09 www.nowcoder.com/discuss/198\u2026 \u3010VIVO\u3011vivo\u63d0\u524d\u6279\u540e\u7aef\u9762\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010VIVO\u30112020 VIVO\u63d0\u524d\u6279\u9762\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010VIVO\u30112020vivo\u79cb\u62db\u63d0\u524d\u6279\u9762\u8bd5\u7ecf\u9a8c\u603b\u7ed3: www.nowcoder.com/discuss/198\u2026 \u3010\u54c8\u5570\u51fa\u884c\u3011\u54c8\u5570\u5355\u8f66java\u5b9e\u4e60\u751f\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u540e\u7aef\u51c9\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010\u5e7f\u8054\u8fbe\u3011\u5e7f\u8054\u8fbe\u4e00\u9762\u9762\u7ecf\uff08java\uff09 www.nowcoder.com/discuss/196\u2026 \u3010\u732b\u773c\u3011\u732b\u773c\u7535\u5f71\u65e5\u5e38\u5b9e\u4e60java www.nowcoder.com/discuss/195\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u5916\u5356\u914d\u9001\u4e8b\u4e1a\u90e8\u5b9e\u4e60offer\u9762\u7ecf\u5206\u4eab www.nowcoder.com/discuss/196\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6691\u5047\u5b9e\u4e60\u9762\u7ecfjava www.nowcoder.com/discuss/195\u2026 \u3010\u963f\u91cc\u3011\u53d1\u4e00\u4efd\u9762\u7ecf\u5427\uff0c4\u6708\u9762\u7684 www.nowcoder.com/discuss/195\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u7814\u53d1\u9762\u7ecf www.nowcoder.com/discuss/195\u2026 \u3010\u5e7f\u8054\u8fbe\u30115.31 \u5e7f\u8054\u8fbe\u89c6\u9891\u9762\u8bd5\uff0830\u5206\u949f\uff09 www.nowcoder.com/discuss/195\u2026 \u3010\u62fc\u591a\u591a\u3011\u8bb8\u613f\u4e00\u4e2a\u62fc\u591a\u591a\u7684offer\uff0c\u9644\u9762\u7ecf www.nowcoder.com/discuss/195\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u62fc\u591a\u591a\u3001\u534e\u4e3a\u3001VIVO \u3011\u4e09\u8de8\u5b66\u751f\u7684\u9762\u7ecf\uff08\u5934\u6761\u3001\u62fc\u591a\u591a\u3001\u534e\u4e3a\u3001vivo\uff09 www.nowcoder.com/discuss/195\u2026 \u3010\u6e5b\u84dd\u79d1\u6280\u30110529\u7b2c\u4e00\u6b21\u5b9e\u4e60\u9762\u7ecf\uff08\u6e5b\u84dd\u79d1\u6280\uff09\uff0c\u9762\u5b8c\u5c31\u611f\u5192\u53d1\u70ed\u3002\u3002 www.nowcoder.com/discuss/194\u2026 \u3010\u963f\u91cc\u3011\u53d1\u4e00\u4efd\u9762\u7ecf\u5427\uff0c4\u6708\u9762\u7684 www.nowcoder.com/discuss/195\u2026 \u3010\u534e\u6cf0\u8bc1\u5238\u3011\u534e\u6cf0\u8bc1\u5238\u5357\u4eac\u4e8c\u9762 www.nowcoder.com/discuss/194\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u51c9\u7ecf www.nowcoder.com/discuss/194\u2026 \u3010\u62fc\u591a\u591a\u3011\u62dc\u6258\u8d85\u8d8a\u4e86\uff1a\u6c42 pdd \u8865\u62db HR call\u3010\u9644\u9762\u7ecf\u3011 www.nowcoder.com/discuss/194\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u53f0\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/193\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8 \u5934\u6761 \u9762\u7ecf www.nowcoder.com/discuss/194\u2026 \u3010\u5b57\u8282\u8df3\u52a8\uff0c\u963f\u91cc\uff0c\u817e\u8baf\uff0c\u534e\u4e3a\u3011\u6625\u62db\u5b9e\u4e60\u590d\u76d8\uff08\u5b57\u8282\u8df3\u52a8\uff0c\u963f\u91cc\uff0c\u817e\u8baf\uff0c\u534e\u4e3a\uff09 www.nowcoder.com/discuss/193\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJAVA\u51c9\u7ecf www.nowcoder.com/discuss/193\u2026 \u3010\u767e\u5ea6\u3001\u3011\u767e\u5ea6\u8d85\u8be6\u7ec6\u9762\u7ecf\uff08\u9644\u7b54\u6848\uff09 www.nowcoder.com/discuss/192\u2026 \u3010CVTE\u3001\u534e\u4e3a\u3001\u5317\u68ee\u3001\u817e\u8baf\u3001\u3011 www.nowcoder.com/discuss/192\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5b57\u8282\u8df3\u52a8\u3001\u6d77\u5eb7\u30110offer\u9762\u7ecf\uff08\u963f\u91cc\uff0c\u817e\u8baf\uff0c\u5b57\u8282\u8df3\u52a8\uff0c\u6d77\u5eb7\uff09 www.nowcoder.com/discuss/192\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5b57\u8282\u8df3\u52a8\u3001\u643a\u7a0b\u3011\u5728\u9762\u8bd5\u4e2d\u6323\u624e\u7740\u5b66\u4e60\u8fdb\u6b65\u7684\u83dc\ud83d\udc14 www.nowcoder.com/discuss/192\u2026 \u3010\u963f\u91cc\u3001\u552f\u54c1\u4f1a\u3001\u4eac\u4e1c\u3001\u73cd\u7231\u7f51\u3001\u3011Java\u7a0b\u5e8f\u5458\u7684\u6821\u62db\u7b14\u8bb0\u2014\u2014\u6c42\u804c\u5982\u68a6 www.nowcoder.com/discuss/192\u2026 \u3010\u4eac\u4e1c\u3001\u534e\u4e3a\u3001\u53bb\u54ea\u513f\u3001\u3011985\u6e23\u7855\u7684\u6625\u62db\u603b\u7ed3\uff08\u4e09\u6b21\u9762\u8bd5\u4e09\u4e2aOffer\uff09 www.nowcoder.com/discuss/192\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u53f0\u5f00\u53d1\u4e00\u9762 \u51c9\u7ecf www.nowcoder.com/discuss/192\u2026 \u3010\u6ef4\u6ef4\u3011\u6ef4\u6ef4\u4e09\u5929\u4e09\u7535\u8bdd\uff0c\u76f4\u8fbeoffer call\uff0c\u5730\u56fe\u90e8\u95e8 www.nowcoder.com/discuss/191\u2026 \u3010\u963f\u91cc\u301120190515\u963f\u91cc\u5df4\u5df4\u56fd\u9645\u4e8b\u4e1a\u90e8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f\u9762\u7ecf\uff08\u5df2\u4e0a\u5cb8\uff09 www.nowcoder.com/discuss/190\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5b57\u8282\u8df3\u52a8\u3011\u6211\u76842018\u5e74\u540e\u53f0Java\u9762\u7ecf\u6c47\u603b\uff0c\u5305\u542b\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u7b49 www.nowcoder.com/discuss/190\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u94ed\u8bb0\u5931\u8d25\uff0c\u9177\u5bb6\u4e50\u9762\u7ecf www.nowcoder.com/discuss/191\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u540e\u53f0\u9762\u8bd5\u7591\u95ee(\u5b9e\u4e60) www.nowcoder.com/discuss/190\u2026 \u3010PayPal\u3001\u963f\u91cc\u3001\u817e\u8baf\u3011\u6625\u62db\u603b\u7ed3 PayPal+\u963f\u91cc+\u817e\u8baf\u9762\u7ecf www.nowcoder.com/discuss/191\u2026 \u3010PayPal\u3001\u963f\u91cc\u3001\u817e\u8baf\u3011\u6691\u671f\u5b9e\u4e60\u603b\u7ed3 \u817e\u8baf \u963f\u91cc PayPal\u7b80\u77ed\u9762\u7ecf www.nowcoder.com/discuss/191\u2026 \u3010\u817e\u8baf\u3011\u521a\u521a\u6536\u5230\u4e86\u817e\u8bafcsig\u7684offer call www.nowcoder.com/discuss/191\u2026 \u3010\u643a\u7a0b\u30115.17\u643a\u7a0b\u540e\u53f0\u5f00\u53d1\u7535\u8bdd\u4e00\u9762(17min) www.nowcoder.com/discuss/191\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u83dc\ud83d\udc14 \u5b57\u8282\u8df3\u52a8\u5b9e\u4e60\u53c8\u88ab\u635e\u4e86\uff0c\u5206\u4eab\u4e4b\u524d\u6302\u6389\u7684\u9762\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u53f0\u5f00\u53d1\u4e00\u9762 \u51c9\u7ecf www.nowcoder.com/discuss/192\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u661f\u73af\u3001PayPal\u3001\u963f\u91cc\u3001\u817e\u8baf\u3001\u7f8e\u56e2\u3001\u62fc\u591a\u591a\u3011\u6625\u62db\u9762\u7ecf\u96c6\u5408 \u5934\u6761+\u661f\u73af+PayPal www.nowcoder.com/discuss/191\u2026 \u3010\u817e\u8baf\u3001\u963f\u91cc\u3001\u62fc\u591a\u591a\u3001\u5947\u4fe1\u5b89\u3001\u7f8e\u56e2\u3001\u3011\u540e\u53f0/\u5927\u6570\u636e\u76f8\u5173\uff0c\u6625\u62db\u4e2a\u4eba\u9762\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u676d\u5dde\u7fa4\u6838\u9177\u5bb6\u4e50Java\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/189\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u4e8c\u9762\uff0c\u611f\u89c9\u8981\u51c9 www.nowcoder.com/discuss/190\u2026 \u3010\u7528\u53cb\u3011\u8865\u7528\u53cb\u7f51\u7edc\u4e00\u9762 www.nowcoder.com/discuss/190\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u4e4b\u524d\u4e00\u8f6e \u83dc\ud83d\udc14\u7684\u5b57\u8282\u8df3\u52a8\u4e8c\u9762 www.nowcoder.com/discuss/190\u2026 \u3010\u7231\u5947\u827a\u3011\u7231\u5947\u827a\u5b9e\u4e60\u9762\u8bd5 www.nowcoder.com/discuss/189\u2026 \u3010\u83dc\u9e1f\u7f51\u7edc\u3001\u817e\u8baf\u3011[\u56de\u9988\u8d34]\u963f\u91cc\u83dc\u9e1f+\u817e\u8bafIEG\u9762\u7ecf www.nowcoder.com/discuss/189\u2026 \u3010CVTE\u3001\u817e\u8baf\u3001\u963f\u91cc\u3001\u3011\u6536\u5230\u963f\u91cc\u83dc\u9e1f\u610f\u5411\u4e66\u5566\uff0c www.nowcoder.com/discuss/189\u2026 \u3010\u6469\u6839\u58eb\u4e39\u5229\u3011\u6469\u6839\u58eb\u4e39\u5229\u82f1\u6587\u7535\u8bdd\u9762\u8bd5\u9762\u7ecf www.nowcoder.com/discuss/189\u2026 \u3010\u643a\u7a0b\u3011\u643a\u7a0b\u9762\u7ecf\u5206\u4eab\uff08\u6df1\u5733\uff09 www.nowcoder.com/discuss/189\u2026 \u3010\u62db\u884c\u3001\u643a\u7a0b\u3011\u611f\u8c22\u6052\u751fbaba www.nowcoder.com/discuss/189\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8/\u5934\u6761\uff0c\u5df2\u4e0a\u5cb8 www.nowcoder.com/discuss/189\u2026 \u3010\u963f\u91cc\u30112019\u963f\u91ccJVM\u7ec4\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u7f8e\u56e2\u3011\u542c\u8bf4\u53d1\u9762\u7ecf\u7ba1\u7528\uff0c\u83dc\u9e21\u7384\u5b66\u6c42\u7f8e\u56e2\u4e8c\u9762\u554a\u554a\u554a\u554a www.nowcoder.com/discuss/188\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u301120190509\u5934\u6761\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5b9e\u4e60\u540e\u53f0\u5f00\u53d1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u767e\u5ea6\u3001\u817e\u8baf\u3001\u963f\u91cc\u3001\u5b57\u8282\u8df3\u52a8\u3011\u3010\u603b\u7ed3\u3011\u96f6\u57fa\u7840\u5b66\u4e60\u4e00\u5e74\u62ff\u5230BAT\u4e09\u5bb6offer www.nowcoder.com/discuss/188\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u5929\u732bJava\u540e\u53f0\u5f00\u53d1\u9762\u8bd5\u5386\u7a0b www.nowcoder.com/discuss/188\u2026 \u3010\u7f8e\u56e2\u3011\u8fd9\u662f\u4e00\u4efd\u6765\u81ea\u7f8e\u56e2\u5916\u5356\u7684\u9694\u591c\u70e4\u9762\u7b4b(Java) www.nowcoder.com/discuss/188\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafcsig oc\u7ec8\u4e8e\u5230\u4e86 www.nowcoder.com/discuss/188\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u5b9e\u4e60\u540e\u53f0\u5f00\u53d1\u6ca1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u7ecf\uff0c\u57fa\u7840\u5e73\u53f0\u7814\u53d1\u5de5\u7a0b\u5e08 www.nowcoder.com/discuss/187\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u4e0a\u5cb8......\u90e8\u5206\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u7f8e\u56e2\u3001\u643a\u7a0b\u3011\u7ec8\u4e8e\u6709offer\u4e86\uff0c\u8fd8\u4e00\u6ce2\u513f\u613f www.nowcoder.com/discuss/187\u2026 \u3010Momenta\u3001\u963f\u91cc\u3011\u83dc\u662f\u539f\u7f6a...\u51c9\u7ecf\u5206\u4eab.... www.nowcoder.com/discuss/187\u2026 \u3010\u817e\u8baf\u3011\u79fb\u52a8\u5ba2\u6237\u7aef\u5b9e\u4e60 www.nowcoder.com/discuss/187\u2026 \u3010\u6241\u9e4a\u3011\u70ed\u4e4e\u4e4e\u7684\u6d59\u6c5f\u6241\u9e4a\u9762\u7ecf(Java) www.nowcoder.com/discuss/186\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u5b9e\u4e60\u9762\u7ecf\uff08\u5df2\u6536\u5230\u610f\u5411\u4e66\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u5b9e\u4e60\u540e\u53f0\u5f00\u53d1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/186\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u4eac\u4e1c\u6570\u79d1\u3001\u6ef4\u6ef4\u3001\u8ffd\u4e00\u79d1\u6280\u3001\u5c0f\u7ea2\u4e66\u3001Momenta\u3001\u534e\u4e3a\u3001\u7f51\u5bbf\u79d1\u6280\u3001\u641c\u72d0\u7545\u6e38\u3001\u6df1\u4fe1\u670d\u3001\u3011\u975e\u79d1\u73ed\u6c34\u7855\u7684\u6625\u62db\u5b9e\u4e60\u603b\u7ed3- Java \u540e\u53f0\u5f00\u53d1 www.nowcoder.com/discuss/186\u2026 \u3010\u817e\u8baf\u3001\u6597\u9c7c\u3001\u62db\u884c\u3011\u8c08\u8c08\u627e\u5b9e\u4e60\u7684\u7ecf\u5386\u548c\u611f\u60f3\u5427\uff08\u4ee5\u53caLeetcode\u5237\u9898\u7ec4\u961f\u554a\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u817e\u8baf\u3001\u963f\u91cc\u3001\u8fdc\u666f\u3001\u643a\u7a0b\u3001\u534e\u4e3a\u3001\u62fc\u591a\u591a\u3001\u7f8e\u56e2\u3011\u5f31\u9e21\u7684\u5fc3\u9178\u6625\u62db\uff08\u5b9e\u4e60\uff09\u9762\u7ecf\u5408\u96c6\uff08\u8bf4\u591a\u4e86\u90fd\u662f\u6cea\u554a\ud83d\ude02\ud83d\ude02\ud83d\ude02\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u9605\u6587\u96c6\u56e2\u3011\u9605\u6587\u96c6\u56e2java\u5f00\u53d1\u9762\u7ecf\uff08\u4e00\u9762\u51c9\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u62db\u94f6\u3001\u501f\u8d37\u5b9d\u3001\u9177\u4e50\u5bb6\u3001\u6b65\u6b65\u9ad8\u3001\u7231\u5947\u827a\u3011\u6625\u62db\u9762\u7ecf\u603b\u7ed3 www.nowcoder.com/discuss/186\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5b9e\u4e60\u4e00\u9762\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/185\u2026 \u3010\u5546\u6c64\u3011\u975e\u5e38\u8fc5\u901f\u7684\u5546\u6c64\u79d1\u6280 www.nowcoder.com/discuss/185\u2026 \u301058\u301158\u4e00\u9762\uff0c\u50cf\u4e8c\u9762\u7684\u611f\u89c9\u3002\u3002\u3002 www.nowcoder.com/discuss/184\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u4f01\u4e1a\u5b89\u5168\u8fdf\u5230\u9762\u7b4b www.nowcoder.com/discuss/184\u2026 \u3010\u963f\u91cc\u3011\u7ec8\u4e8e\u7b49\u5230\u4f60\uff0c\u963f\u91cc\u610f\u5411\u4e66 www.nowcoder.com/discuss/184\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e0a\u5cb8\u4e86\uff08\u9762\u7ecf\uff09\uff01 www.nowcoder.com/discuss/184\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u8bd5\u8fc7\u7a0b\u5206\u4eab www.nowcoder.com/discuss/185\u2026 \u3010\u6052\u751f\u7535\u5b50\u3011\u6052\u751f\u7535\u5b50\u7b14\u9762\u7ecf(\u5357\u660c\u7ad9) www.nowcoder.com/discuss/184\u2026 \u3010\u534e\u4e3a\u4e91\uff0c\u963f\u91cc\u83dc\u9e1f\uff0c\u9177\u5bb6\u4e50\uff0c\u7f51\u6613\u96f7\u706b\uff0c\u5b57\u8282\u8df3\u52a8\u3011\u6625\u62db\u5b9e\u4e60\u9762\u7ecf\uff08\u534e\u4e3a\u4e91\uff0c\u963f\u91cc\u83dc\u9e1f\uff0c\u9177\u5bb6\u4e50\uff0c\u7f51\u6613\u96f7\u706b\uff0c\u5b57\u8282\u8df3\u52a8\uff09 www.nowcoder.com/discuss/184\u2026 \u3010\u817e\u8baf\u3001\u7f51\u6613\u6e38\u620f\u3001\u963f\u91cc\u3001\u5fae\u4f17\u3011\u3010\u8d5b\u540e\u30112020JAVA\u5b9e\u4e60(\u817e\u8baf\u3001\u7f51\u6613\u6e38\u620f\u3001\u963f\u91cc\u3001\u5fae\u4f17) www.nowcoder.com/discuss/184\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u9762\u7ecf\uff0c\u6512\u6512RP www.nowcoder.com/discuss/184\u2026 \u3010\u643a\u7a0b\u3011\u643a\u7a0boffer\u5df2\u6536 www.nowcoder.com/discuss/185\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u9762\u7ecf\uff08\u51c9\u51c9\uff09 www.nowcoder.com/discuss/183\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u4f01\u4e1a\u5b89\u5168\u670d\u52a1\u7aef\u5f00\u53d1\u5de5\u7a0b\u5e08(Java)\u529d\u9000\u9762 www.nowcoder.com/discuss/183\u2026 \u3010\u5fae\u8f6f\u3011\u82cf\u5dde\u5fae\u8f6f\u9762\u7ecf\uff01 www.nowcoder.com/discuss/183\u2026 \u3010360\u4f01\u4e1a\u3011360\u5b89\u5168\u9762\u8bd5\u4e00\u9762 www.nowcoder.com/discuss/183\u2026 \u3010\u963f\u91cc\u3011985\u672b\u6d41\u672c\u79d1\u751f\u7684\u5b9e\u4e60\u6625\u62db\u603b\u7ed3 www.nowcoder.com/discuss/183\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/183\u2026 \u3010\u8682\u8681\u3011\u8682\u8681java\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/183\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e0a\u5cb8\u6210\u529f,\u56de\u9988\u725b\u5ba2 www.nowcoder.com/discuss/183\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u6e23\u6e23\u4e00\u9762 www.nowcoder.com/discuss/183\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u5b9e\u4e60\u751f\u9762\u7ecf\uff0c\u4fdd\u4f51\u4fdd\u4f51 www.nowcoder.com/discuss/183\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u4f01\u4e1a\u5b89\u5168\u9762\u7ecf(java\u7814\u53d1) www.nowcoder.com/discuss/183\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/183\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/183\u2026 \u3010OPPO\u3011oppo\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u4e1c\u65b9\u8d22\u5bcc\u3011\u4e1c\u65b9\u8d22\u5bcc\u6280\u672f\u5c97\uff08Java\uff09\u5b9e\u4e60\u751f\u89c6\u9891\u9762 www.nowcoder.com/discuss/182\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u8fd9\u8c01\u9876\u5f97\u4f4f......\u963f\u91cc\u83dc\u9e1fJava\u9762\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762 www.nowcoder.com/discuss/182\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u62fc\u591a\u591a\u301119\u5c4a \u7ec8\u4e8e\u7b49\u5230\u4f60\u4e86Pdd www.nowcoder.com/discuss/182\u2026 \u3010\u8d8b\u52bf\u79d1\u6280\u3011\u8d8b\u52bf\u79d1\u6280\u3002\u9762\u54ed\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u817e\u8baf\u3001\u8611\u83c7\u8857\u3001\u5feb\u624b\u3001\u4e9a\u9a6c\u900a\u3001\u767e\u5ea6\u3011java\u5f00\u53d1\u5b9e\u4e60\u751f\u9762\u7ecf\uff08\u5f88\u591a\u51c9\u7ecf\u548c\u8fd8\u5728\u7b49\u5f85\u540e\u7eed\u7684\uff09 www.nowcoder.com/discuss/182\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6java\u540e\u53f0\u6691\u671f\u5b9e\u4e60\uff08\u4e00\u9762\u3001\u4e8c\u9762\u3001\u4e09\u9762\uff09 www.nowcoder.com/discuss/181\u2026 \u3010CVTE\u3001\u73cd\u7231\u7f51\u3001\u591a\u76ca\u3001\u4e09\u4e03\u4e92\u5a31\u3001\u51e1\u79d1\u301119\u5c4a\u83dc\u9e21\u7684\u6625\u62db\u7ec8\u4e8e\u7ed3\u675f\u4e86 www.nowcoder.com/discuss/181\u2026 \u3010\u5feb\u624b\u3011\u7384\u5b66\u6c42offer\uff0c\u5feb\u624b\u9762\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u8682\u8681\u3011\u8682\u8681 java\u5b9e\u4e60 \u4e00\u9762 www.nowcoder.com/discuss/181\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u91d1\u670d\u9762\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u62fc\u591a\u591a\u3001\u540c\u7a0b\u827a\u9f99\u3001\u79d1\u5927\u8baf\u98de\u3001Zoom\u3001\u4eac\u4e1c\u3001\u817e\u8baf\u3001\u9177\u72d7\u3011\u6625\u62db\u4e0a\u5cb8\u603b\u7ed3\u4ee5\u53ca\u5b66\u4e60\u7ecf\u5386\u5206\u4eab\uff083offer\uff09 www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u30114.20 \u5b57\u8282\u70ae\u7070\u7ecf\u5386 www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u7559\u5b66\u751f\u65b0\u9c9c\u9762\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9\u7ecf2019.04.20 www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e09\u9762\u51c9\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u5b9e\u4e60 \u4e09\u9762\uff08\u89c6\u9891\u9762\uff09 4.20 www.nowcoder.com/discuss/181\u2026 \u3010360\u3011360\u4e00\u59293\u9762\uff0c\u4e24\u5468\u5185\u7ed9\u7ed3\u679c\u3002\u3002 www.nowcoder.com/discuss/180\u2026 \u3010group\u3011ok group\u9762\u7ecf www.nowcoder.com/discuss/180\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u540e\u53f0\u4e8c\u9762\u89c6\u9891\u9762\u51c9\u7ecf www.nowcoder.com/discuss/180\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762\u9762\u7ecf\uff08java\u540e\u53f0\u5f00\u53d1\uff09 www.nowcoder.com/discuss/180\u2026 \u3010\u62fc\u591a\u591a\u301119\u5c4a\u62fc\u591a\u591a\u4e0a\u5cb8\uff0c\u611f\u8c22\u725b\u5ba2\uff01\uff01\uff01 www.nowcoder.com/discuss/180\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u6570\u636e\u90e8\u95e8Java\u7814\u53d1\u5de5\u7a0b\u5e08\uff082020\u6821\u62db\u6691\u671f\u5b9e\u4e60\uff09\u4e00\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u3001\u82f1\u7279\u5c14\u3001\u661f\u73af\u3001\u89c6\u6e90\u3011\u56db\u8de8\u8003\u751f\u7684\u9762\u7ecf\u5408\u96c6\uff08\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u3001\u82f1\u7279\u5c14\u3001\u661f\u73af\u3001\u89c6\u6e90\uff09 www.nowcoder.com/discuss/180\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/180\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u9762\u7ecf\uff08java\uff09 www.nowcoder.com/discuss/179\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\u6625\u62db\u9762\u7ecf(Java\u5c97) www.nowcoder.com/discuss/179\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u53c8\u4e00\u6b21\u4e00\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/179\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u94f6\u884c\u4e00\u9762 www.nowcoder.com/discuss/180\u2026 \u3010\u8fdc\u666f\u3011\u8fdc\u666f\u7535\u8bdd\u9762 4\u670818\u53f7 www.nowcoder.com/discuss/180\u2026 \u3010\u5ea6\u5c0f\u6ee1\u3011\u5ea6\u5c0f\u6ee1\u73b0\u573a\u9762\u8bd5 www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u5b9e\u4e60\u751f\u4e00\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u9177\u5bb6\u4e50\u5927\u6570\u636e\u7814\u53d1\u9762\u8bd5 www.nowcoder.com/discuss/179\u2026 \u3010\u5feb\u624b\u3011\u5feb\u624bJava\u5f00\u53d1\u5b9e\u4e60\u9762\u7ecf\uff08\u53e3\u5934offer www.nowcoder.com/discuss/179\u2026 \u3010\u8054\u901a\u3001\u5b87\u4fe1\u79d1\u6280\u3001\u6df1\u5733\u519c\u5546\u94f6\u884c\u3001\u4e2d\u5174\u3001\u79d1\u5927\u8baf\u98de\u300158\u3011\u6295\u4e8670\u591a\u5bb6 \u7b14\u9762\u8bd560\u591a\u6b21 \u4e2d\u4e8c\u5b66\u957f\u7684\u79cb\u62db\u9762\u7ecf www.nowcoder.com/discuss/179\u2026 \u3010\u9014\u725b\u3011\u9014\u725b\u5929\u6d25Java\u7814\u53d1\u5c97\u9762\u7ecf\u53c2\u8003 \u5df2\u62ffoffer www.nowcoder.com/discuss/179\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\uff084.16\uff09\u51c9\u9762\u9762\u7ecf\u5206\u4eab\u6512\u4eba\u54c1 www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u540e\u53f0\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u540e\u53f0\u5f00\u53d1\uff08Java\uff09\u6691\u5047\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/178\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u5f00\u53d1\u5c97\u4e00\u9762 www.nowcoder.com/discuss/178\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u51c9\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u3001\u4e8c\u9762\u51c9\u7ecf\uff08\u4e8c\u9762\u6302\uff09 www.nowcoder.com/discuss/178\u2026 \u3010\u5b8c\u7f8e\u4e16\u754c\u3011\u5b8c\u7f8e\u4e16\u754c\u4e00\u9762\u51c9\u7ecf(\u53cb\u597d\u9762\u8bd5\uff0c\u53cb\u597d\u544a\u522b) www.nowcoder.com/discuss/178\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6JAVA\u9762\u7ecf www.nowcoder.com/discuss/177\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5b9e\u4e60Java\u540e\u53f0\u5f00\u53d1 www.nowcoder.com/discuss/178\u2026 \u3010\u963f\u91cc\u3001\u5b57\u8282\u8df3\u52a8\u3001\u62fc\u591a\u591a\u3001\u817e\u8baf\u3011\u5b9e\u4e60\u9762\u7ecf Java\u540e\u7aef \u963f\u91cc \u5b57\u8282 PDD \u817e\u8baf HW www.nowcoder.com/discuss/177\u2026 \u3010\u54c8\u5570\u3011\u54c8\u5570\u65e5\u5e38\u5b9e\u4e60Java\u9762\u7ecf www.nowcoder.com/discuss/177\u2026 \u3010\u5409\u6bd4\u7279\u3001\u963f\u91cc\u3001\u817e\u8baf\u3001\u8ffd\u5fc6\u79d1\u6280\u3001\u9014\u725b\u3011\u6e23\u4e8c\u672cJava\u83dc\u9e210Offer\u7684\u6625\u62db\u8840\u6cea\u53f2 www.nowcoder.com/discuss/177\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u9177\u5bb6\u4e50\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/177\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u51c9\u9762 www.nowcoder.com/discuss/177\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u9762\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/178\u2026 \u3010\u53bb\u54ea\u513f\u3011\u53bb\u54ea\u513f\u5b9e\u4e60\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/177\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u767e\u5ea6\u3001\u817e\u8baf\u3001\u5feb\u624b\u3001\u501f\u8d37\u5b9d\u3001\u963f\u91cc\u4e91\u3011Java\u5f00\u53d1\u9762\u7ecf\uff0c\u4eca\u65e5\u5934\u6761\u3001\u767e\u5ea6\u3001\u817e\u8baf\u3001\u5feb\u624b\u3001\u501f\u8d37\u5b9d\u3001\u963f\u91cc\u4e91 www.nowcoder.com/discuss/178\u2026 \u3010VIVO\u3011vivo 4.11\u5357\u4eac\u7814\u7a76\u6240\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u534e\u4e3a\u3001VIVO\u3011\u4ece\u6574\u4e2a\u4e09\u6708\u6ca1\u516c\u53f8\u7406\u81ea\u95ed\u5230\u4e0a\u5cb8\uff0c\u534e\u4e3a\u3001vivo\u9762\u7ecf\uff0c\u611f\u8c22\u725b\u5ba2\u3002 www.nowcoder.com/discuss/176\u2026 \u3010\u8682\u8681\u3011\u4e0a\u6d77\u8682\u86814\u9762\uff08Java\u7814\u53d1\uff09\uff0c\u53d1\u5e16\u6512\u70b9\u8fd0\u6c14 www.nowcoder.com/discuss/176\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u4e00\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u4e03\u725b\u4e91\u3011\u4e03\u725b\u4e91\u4e00\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u817e\u8baf\u3001360\u3011\u817e\u8bafoffer\u9762\u7ecf+\u5185\u63a8360+3000hc+\u5927\u5382\u5f85\u9047+\u8f6c\u6b63 www.nowcoder.com/discuss/176\u2026 \u3010\u62db\u94f6\u3011\u62db\u5546\u7f51\u7edc\u79d1\u6280\u7535\u8bdd\uff0c\u89c6\u9891\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u53f0\u7814\u53d1\u6691\u671f\u5b9e\u4e602x3\u8f6e+HR\u8f6e\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u767e\u5ea6\u3001\u963f\u91cc\u3001\u817e\u8baf\u3001\u7f51\u6613\u3001\u7f8e\u56e2 \u30112018\u5e74\u79cb\u62db\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5728\u5b66\u6821\u7684BBS\u4e0a\u6295\u7684Java\u5f00\u53d1\u4e00\u9762 www.nowcoder.com/discuss/175\u2026 \u3010CVTE\u3001\u817e\u8baf\u3001\u963f\u91cc\u3011\u56de\u9988\u725b\u6cb9\uff1a\u6625\u62dbJava\u540e\u53f0\u5b9e\u4e60\uff0ccvte\uff0c\u817e\u8baf\uff0c\u963f\u91cc\u9762\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010VIVO\u3011Vivo \u5357\u4eacJava\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u5ea6\u5c0f\u6ee1\u3011\u5ea6\u5c0f\u6ee1\u4e00\u9762\u4e8c\u9762\u9762\u7b4b www.nowcoder.com/discuss/176\u2026 \u3010\u5ea6\u5c0f\u6ee1\u3011\u5ea6\u5c0f\u6ee1\uff082019.4.10\u73b0\u573a\u9762\uff09 www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u8bb0\u5f55\u4e00\u4e0b\u963f\u91cc\u7684\u4e00\u9762\uff0c\u6295\u9012\u7684\u5f88\u665a\uff0c\u6628\u5929\u521a\u521a\u4e00\u9762 www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u81f3hr\u9762\u7b4b www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJAVA \u540e\u53f0\u5b9e\u4e60\u51c9\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u540e\u53f0\u51c9\u7ecf \u4ea4\u53c9\u9762\u8dea www.nowcoder.com/discuss/176\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u8bd5\u51c6\u5907\u53ca\u9762\u7ecf\u5206\u4eab\uff08\u5e72\u8d27\u6ee1\u6ee1\uff09 www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u65b0\u96f6\u552eJava\u540e\u7aef\u4e8c\u9762 www.nowcoder.com/discuss/175\u2026 \u3010\u534e\u4e3a\u3011\u534e\u4e3a\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u9177\u5bb6\u4e50Java\u540e\u7aef\u4e00\u9762 www.nowcoder.com/discuss/175\u2026 \u3010\u8682\u8681\u3011\u963f\u91cc\u5df4\u5df4\u8682\u8681\u91d1\u670d2020\u91d1\u878d\u6838\u5fc3\u90e8\u95e8\u5b9e\u4e60\u9762\u7ecf\uff08\u6536\u5230offer www.nowcoder.com/discuss/174\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9 www.nowcoder.com/discuss/176\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857 \u540e\u53f0\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u5b9e\u4e60\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010oppo \u3001VIVO\u3001\u62fc\u591a\u591a\u3001\u5b57\u8282\u8df3\u52a8\u3011\u6210\u529f\u4e0a\u5cb8\uff0c www.nowcoder.com/discuss/176\u2026 \u3010\u53bb\u54ea\u513f\u3011\u53bb\u54ea\u513f\u4e00\u9762\u9762\u7ecf\u3002\u3002\u3002 www.nowcoder.com/discuss/175\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u5f00\u53d1\u5b9e\u4e60\u4e00\u3001\u4e8c\u8f6e\u9762\u7ecf\uff08\u5df2\u62ffOffer\uff09 www.nowcoder.com/discuss/174\u2026 \u3010\u817e\u8baf\u3011\u62ff\u5230\u817e\u8bafoffer\u5566\uff0c\u5206\u4eab\u590d\u4e60\u7ecf\u9a8c\u548c\u540e\u53f0\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u7f51\u6613\u3011\u7f51\u6613\u4e92\u5a31\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u62db\u884c\u3011\u62db\u884c\u4fe1\u7528\u5361\u4e2d\u5fc3\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u5df4\u5df418\u5e74\u6625\u62db\u5b9e\u4e60\u4e09\u9762\u51c9\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u91d1\u670dJava\u5f00\u53d1\u5b9e\u4e60\u8dea\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u5f00\u53d1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u817e\u8baf\u3001\u73cd\u7231\u7f51 \u3001\u6df1\u4fe1\u670d\u3001\u5c1a\u6e38\u6e38\u620f\u3001\u3011\u79cb\u62db+\u6625\u62dbjava\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u5fae\u8f6f\u3011\u82cf\u5dde\u5fae\u8f6f\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u5c0f\u7c73\u3011\u5c0f\u7c73\u641c\u7d22\u5f00\u53d1\u5de5\u7a0b\u5e08\u5b9e\u4e60\u751f\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u62db\u884c\u3011\u62db\u5546\u94f6\u884c\u4fe1\u7528\u5361\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762\uff08\u5f88\u7384\u5b66\u7684\u8fc7\u7a0b\uff09 www.nowcoder.com/discuss/173\u2026 \u3010\u5317\u4eac\u4f18\u70ab\u8f6f\u4ef6\u3011\u5199\u4e00\u4e2a\u9762\u7ecf\uff1a\u5317\u4eac\u4f18\u70ab\u8f6f\u4ef6\uff0cjava\u5f00\u53d1 www.nowcoder.com/discuss/172\u2026 \u3010\u534e\u4e3a\u3011\u534e\u4e3a\u4e91\u9879\u76ee\u5b9e\u4e60\u751f\uff0c\u5df2\u62ffoffer\uff0c www.nowcoder.com/discuss/173\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u9762\u9762\u7ecf,\u540e\u53f0\u5f00\u53d1 www.nowcoder.com/discuss/173\u2026 \u3010\u8611\u83c7\u8857\u30114.3 \u8611\u83c7\u8857\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u62fc\u591a\u591a\u3011pdd java\u5f00\u53d1\u900f\u5fc3\u51c9\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u62fc\u591a\u591a\u3011\u62fc\u591a\u591a\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u8d8b\u52bf\u79d1\u6280\u3011\u8d8b\u52bf\u79d1\u6280\u4e00\u9762\uff0c\u6211\u8dea\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u4e0d\u96be\uff0c\u7ed9\u5927\u5bb6\u4e00\u4e9b\u53c2\u8003 www.nowcoder.com/discuss/172\u2026 \u3010\u817e\u8baf\u3001\u7f51\u6613\u3001\u4e09\u4e03\u3011\u6625\u62db\u5b9e\u4e60\u4e0a\u5cb8\uff0c www.nowcoder.com/discuss/172\u2026 \u3010\u8fdc\u666f\u3011\u8fdc\u666f\u4e00\u9762 www.nowcoder.com/discuss/172\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u65b0\u96f6\u552e\u4e8c\u9762\uff0c52\u5206\u949f(\u70ed\u4e4e\u7684) www.nowcoder.com/discuss/172\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u963f\u91cc\u3011\u5929\u732bjava\u7814\u53d1\u4e00\u9762\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u6ef4\u6ef4\u3011\u6ef4\u6ef4\u7f51\u7ea6\u8f66Java\u540e\u7aef\u5f00\u53d1\u51c9\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u4e09\u9762\uff0c\u81ea\u95ed\u81ea\u95ed www.nowcoder.com/discuss/172\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u91d1\u670d\u9762\u7ecf\uff0c\u5e0c\u671b\u65e9\u70b9\u513f\u6536\u5230\u5b9e\u4e60offer\ud83d\ude4f\ufe0f\ud83d\ude4f\ufe0f\ud83d\ude4f\ufe0f www.nowcoder.com/discuss/172\u2026 \u3010\u5c0f\u7c73\u3011\u5c0f\u7c73\u670d\u52a1\u7aef\u5b9e\u4e60\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/172\u2026 \u30104399\u30114399\u3000Java\u4e00\u9762\u51c9\u900f\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010CVTE\u3011CVTE\u5f00\u53d1\u5b9e\u4e60\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762\u5df2\u51c9 www.nowcoder.com/discuss/171\u2026 \u3010\u7f8e\u56e2\u3011\u56db\u9762\u7f8e\u56e2\uff0c\u6536\u5272 offer www.nowcoder.com/discuss/171\u2026 \u3010\u6d66\u53d1\u3011\u4e0a\u6d77\u6d66\u53d1\u9762\u8bd53\u670831 www.nowcoder.com/discuss/171\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf \u6625\u62db\u5b9e\u4e60 \u540e\u53f0\u5947\u8469\u4e8c\u9762\u9762\u7ecf \uff08\u611f\u89c9\u4e0a\u4e0d\u4e86\u5cb8\u4e86\uff09 www.nowcoder.com/discuss/171\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u9762\u7ecf\u6512\u4eba\u54c1\uff08\u540e\u53f0\u5f00\u53d11+2+3+4+hr\u9762\uff09 www.nowcoder.com/discuss/171\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u94f6\u884cjava\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u94f6\u884c www.nowcoder.com/discuss/171\u2026 \u3010OPPO\u3001\u5b57\u8282\u8df3\u52a8\u3001\u5e73\u5b89\u91d1\u878d\u3001\u70fd\u706b\u901a\u4fe1\u3001\u6d66\u53d1\u3011\u672c\u4eba\u6625\u62db\u7ed3\u675f\uff0c\u9644\u8be6\u7ec6\u9762\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010VIVO\u3011vivo\u6625\u62db\u8865\u5f55\u9762\u8bd5 www.nowcoder.com/discuss/170\u2026 \u3010VIVO\u3011vivo\u9762\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010VIVO\u3011vivo\u4e00\u9762\u8f6f\u4ef6\u5f00\u53d1\u5de5\u7a0b\u5e08\uff08Java\uff09\u89c6\u9891\u9762\uff0c\u521a\u51fa\u7089\u7684\u9762\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u963f\u91cc\u5df4\u5df4\u83dc\u9e1fjava\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u91d1\u670d\uff08java\uff09\u975e\u5178\u578b\u6302\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e00\u9762java web\u51c9\u7ecf\uff0c\u4f5b\u4e86\u3002offer\u65e0\u7f18 www.nowcoder.com/discuss/170\u2026 \u3010\u817e\u8baf\u3011\u67d0\u53cc\u6d41\u4e00\u9ad8\u6821\u5b66\u751f\u7adf\u843d\u9b44\u5230\u53bb\u5395\u6240\u9762\u8bd5... www.nowcoder.com/discuss/170\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17Java\u5f00\u53d1\u7535\u9762 www.nowcoder.com/discuss/169\u2026 \u3010\u5c0f\u7c73\u3011\u5c0f\u7c73\u540e\u7aef\u5f00\u53d1\u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u7528\u53cb\u3011\u7528\u53cbjava\u540e\u7aef\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u62db\u884c\u3011\u62db\u884c\u4fe1\u7528\u5361\u4e2d\u5fc3 \u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u62db\u884c\u3011\u62db\u884c\u4fe1\u7528\u5361\u4e2d\u5fc3 \u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u53f0\u5b9e\u4e60\u7684\u4e00\u9762\u4e8c\u9762\u4e09\u9762\u9762\u7ecf www.nowcoder.com/discuss/155\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761Java\u540e\u53f0\u5f00\u53d1\u9762\u8bd5 www.nowcoder.com/discuss/170\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u30113.30\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u5f00\u53d1\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u65b0\u96f6\u552eJava\u51c9\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u51c9\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u8fdf\u5230\u7684\u963f\u91cc\u83dc\u9e1f\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/169\u2026 \u3010\u5e03\u672c\u667a\u80fd\u3011\u5e03\u672c\u667a\u80fd\u4e00\u9762 www.nowcoder.com/discuss/169\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u30113\u670827\u65e5 \u5934\u6761\u4e00\u9762 \u540e\u7aef\u5f00\u53d1 www.nowcoder.com/discuss/169\u2026 \u3010Momenta\u3011\u613f\u4f60\u6240\u613f\uff0c\u7ec8\u80fd\u5b9e\u73b0\uff0c\u9644\u4e0aMomenta\u7814\u53d1\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5b9e\u4e60\u9762\u8bd5\uff08\u65e5\u5e38\u5b9e\u4e60\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u767e\u5ea6\u3001\u817e\u8baf\u3001\u5934\u6761\u3011\u6e23\u6e23\u7684\u4e92\u8054\u7f51\u6c42\u804c www.nowcoder.com/discuss/168\u2026 \u3010\u79d1\u5927\u8baf\u98de\u3011\u79d1\u5927\u8baf\u98de\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u65f7\u89c6\u3011\u6211\u59cb\u7ec8\u575a\u4fe1\uff0c\u52aa\u529b\u4e0d\u4f1a\u88ab\u8f9c\u8d1f\uff0c\u9644\u4e0a\u65f7\u89c6\u7814\u53d1\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u8682\u8681\u3011java\u7814\u53d1-\u8682\u8681\u91d1\u670d-\u4e8c\u9762\u4e09\u9762 www.nowcoder.com/discuss/168\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011java\u7814\u53d1-\u8682\u8681\u91d1\u670d-\u4e00\u9762\u7535\u9762 www.nowcoder.com/discuss/167\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681Java\u540e\u7aef\u5b9e\u4e60\u751f\uff08\u96f6\u9762\u3001\u4e00\u9762\u3001\u4e8c\u9762\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u5e73\u5b89\u79d1\u6280\u3011\u5e73\u5b89\u79d1\u6280java\u4e00\u9762 www.nowcoder.com/discuss/167\u2026 \u3010\u5e73\u5b89\u79d1\u6280\u3011\u5e73\u5b89\u79d1\u6280 \u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u5e73\u5b89\u79d1\u6280\u3011\u5e73\u5b89\u79d1\u6280\uff08\u4e0a\u6d77\uff09\u9762\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafWXG\u4e00\u9762\uff08\u7b80\u5386\u9762\uff1f\uff09\u5b9e\u4e60\u51c9\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u817e\u8baf\u3011\u53d1\u4e00\u6ce2\u9762\u7ecf\uff0c\uff0c\uff0c\u5c31\u5f53\u6512\u4eba\u54c1\u5427 www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u70ed\u4e4e\u4e4e\u7684\u817e\u8baf\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafCSIG\u5b9e\u4e60\u9762\u8bd5\uff08\u4e00\uff0c\u4e8c\u9762\uff09 www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafCSIG\u5b9e\u4e60\u9762\u8bd5\uff08\u4e09\u9762\u6bd4\u8f83\u5e95\u5c42\uff09 www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u63d0\u524d\u6279\u51c9\u9762 www.nowcoder.com/discuss/168\u2026 \u3010\u7f51\u6613\u3011\u4e8c\u672c\u51fa\u8eab\u3001\u9006\u88ad\u7f51\u6613\u3001\u4e00\u8def\u5b64\u72ec\u3001\u4e00\u8def\u72c2\u6b22\uff01 www.nowcoder.com/discuss/167\u2026 \u3010\u643a\u7a0b\u3011\u643a\u7a0b\u6280\u672f\u4e00\u9762\uff08\u73b0\u573a\u9762\uff0c\u9762\u8bd5\u5b98\u4eba\u5f88\u597d\uff0c\u9762\u4e86\u4e00\u4e2a\u5c0f\u65f6\u3002\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u89c6\u9891\u4e09\u9762\u51c9\u7ecf\u3002\u3002\u4e09\u9762\u7f51\u7edc\u5dee\u5230\u65e0\u6cd5\u89c6\u9891\u3002\u3002 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282 JAVA\u540e\u53f0\u4e00\u9762\u51c9\u7ecf\uff08\u5b9e\u4e60\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e09\u9762\u9762\u7ecf\u6512\u4eba\u54c1 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e00\u4e8c\u4e09\u51c9\u9762... www.nowcoder.com/discuss/167\u2026 \u30104399\u30114399 Java\u7535\u9762 www.nowcoder.com/discuss/162\u2026 \u30101905\u7535\u5f71\u7f51\u30111905\u7535\u5f71\u7f51\u4e00\u9762\u95ee\u9898\uff0cjava\u5f00\u53d1 www.nowcoder.com/discuss/165\u2026 \u3010CVTE\u30113.8\uff082020\u5c4aCVTE\u540e\u53f0\u5b9e\u4e60\uff09\u4e00\u9762+\u4e8c\u9762 www.nowcoder.com/discuss/159\u2026 \u3010CVTE\u3011\u65b0\u51fa\u7089\u7684CVTE\u540e\u53f0\u9762\u7ecf\uff01\u4e00\u9762+\u4e8c\u9762 www.nowcoder.com/discuss/159\u2026 \u3010CVTE\u3011CVTE\u5b9e\u4e60\u4e00\u9762(Java\u540e\u53f0) www.nowcoder.com/discuss/160\u2026 \u3010CVTE\u3011CVTE\u5b9e\u4e60\u751f \u4e00\u9762 www.nowcoder.com/discuss/160\u2026 \u3010CVTE\u3011CVTE\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010CVTE\u3011cvte \u4e00\u9762+\u4e8c\u9762+\u7ec8\u9762 \u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010CVTE\u3011CVTE \u7535\u8bdd\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010CVTE\u3011cvte WEB\u540e\u53f0\u5b9e\u4e60\u751f\uff08JAVA\uff09 www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011oppo java\u5f00\u53d1 \u540e\u7aef\u9762\u7ecf www.nowcoder.com/discuss/159\u2026 \u3010OPPO\u3011\u8bb0\u4e00\u6b21OPPO\u7684\u9762\u8bd5\u4e4b\u65c5 www.nowcoder.com/discuss/161\u2026 \u3010OPPO\u3011oppo\u3000\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010OPPO\u3011oppo\uff0c\u4e8c\u9762\uff0c\u51c9\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011OPPO \u540e\u53f0\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011oppo\uff0cjava\u540e\u7aef\uff0c\u4e00\u9762\uff0c\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011OPPO \u540e\u53f0\u4e00\u9762+\u4e8c\u9762 \u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010Shopee\u3011Shopee\u6df1\u5733 \u4e00\u9762\uff08\u89c6\u9891\uff09 3.18 www.nowcoder.com/discuss/164\u2026 \u3010VIVO\u3011vivo java\u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010VIVO\u3011\u65b0\u51fa\u7089\u7684\u5357\u4eacvivo\u4e00\u9762\u548chr\u9762\u3002 www.nowcoder.com/discuss/159\u2026 \u3010VIVO\u3011vivo \u5357\u4eac java\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010VIVO\u3011vivo \u6b66\u6c49 java \u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010VIVO\u3011Vivo\u8f6f\u5f00java\u65b9\u5411\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010VIVO\u3011\u3010vivo\u4e0a\u6d77\u7ad9\u3011JAVA\u8f6f\u4ef6\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010VIVO\u3011vivo \u897f\u5b89\u7ad9 Java\u5c97 \u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010VIVO\u3011VIVO JAVA\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f\u4e00\u9762\u51c9\u7ecf\uff0cjava\u7814\u53d1 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f \u4e00\u9762\uff08\u7b80\u5386\u9762\uff09 3.13 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u4e00\u9762(\u6216\u8005\u7b80\u5386\u9762\uff1f) www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f\u7f51\u7edcJava\u7b80\u5386\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u3011\u521a\u7ed3\u675f\u7684\u963f\u91cc\u7535\u9762\uff08\u51c9\uff09\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u30113.18 \u963f\u91cc\u83dc\u9e1f\u4e00\u9762\uff0830\u5206\u949f\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u7ecf\uff01\uff01\uff01 www.nowcoder.com/discuss/165\u2026 \u3010\u963f\u91cc\uff0c\u6469\u6839\u58eb\u4e39\u5229\uff0c\u987a\u4e30\u79d1\u6280\u3011\u8fdf\u5230\u7684\u79cb\u62db\u603b\u7ed3\u4e0e\u5c55\u671b\uff08\u5176\u5b9e\u6211\u4e5f\u662f\u62db\u8058\u8d34\uff09 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u3011\u963f\u91cc\u817e\u8baf\u5934\u6761\u9762\u7ecf(0 offer\uff09\u6512\u70b9\u4eba\u54c1 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u5df4\u5df4\u30112020\u6625\u62db\u5b9e\u4e60\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5 www.nowcoder.com/discuss/158\u2026 \u3010\u963f\u91cc\u5df4\u5df4\u3011\u83dc\u9e1f\u5185\u63a8\u5b9e\u4e60Java\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u767e\u5ea6\u3001\u8682\u8681\u91d1\u670d\u3001\u6ef4\u6ef4\u3011\u56db\u975e\u975e\u79d1\u73ed\u6e23\u672c\u7684\u5927\u4e09\u6e23\u6e23\u79cb\u62db+\u6625\u62db\u4e4b\u65c5 www.nowcoder.com/discuss/166\u2026 \u3010\u767e\u4e16\u7269\u6d41\u3011\u7ee7\u7eed\u5199\u81ea\u5df1\u7684\u51c9\u7ecf\u4e86(\u767e\u4e16\u9762\u7ecf) www.nowcoder.com/discuss/162\u2026 \u3010\u5317\u4eac\u6d77\u81f4\u3011\u5317\u4eac\u6d77\u81f4\u4e00\u4e8c\u9762+offer www.nowcoder.com/discuss/165\u2026 \u3010\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u7f51\u7edc\u4e00\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u5b9e\u4e60\u751f\u5185\u63a8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u83dc\u9e1f\u3011\u83dc\u9e1f\u7f51\u7edc\u7535\u8bdd\u9762\uff08\u51c9\u9762\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u83dc\u9e1f\u3001\u8fdc\u666f\u3011\u83dc\u9e1f1\u9762\u51c9\u7ecf\u3001\u8fdc\u666f1\u9762 \u5b9e\u4e60 java\u5f00\u53d1 www.nowcoder.com/discuss/163\u2026 \u3010\u83dc\u9e1f\u7f51\u7edc\u3011\u83dc\u9e1f\u5185\u63a8\u5b9e\u4e60Java\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u6ef4\u6ef4\u3011\u6ef4\u6ef4\u5730\u56fe\u4e8b\u4e1a\u7fa4 \u5b9e\u4e60\u751f \u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u7f14\u5b89\u79d1\u6280\u3001\u4e07\u5f97\u301119 \u6625\u62db\u5c0f\u516c\u53f8\u9762\u7ecf\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u5230\u5927\u5bb6 www.nowcoder.com/discuss/162\u2026 \u3010\u591a\u76ca\u7f51\u7edc\u3011\u591a\u76ca\u9762\u8bd5 www.nowcoder.com/discuss/159\u2026 \u3010\u591a\u76ca\u7f51\u7edc\u3011\u591a\u76caJava\u89c6\u9891\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u591a\u76ca\u7f51\u7edc\u3011\u591a\u76ca\u7f51\u7edc\u89c6\u9891\u9762\u8bd5 www.nowcoder.com/discuss/162\u2026 \u3010\u864e\u7259\u3011\u864e\u7259\u76f4\u64ad\u9762\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u4eac\u4e1c\u3011\u6625\u62db\u63d0\u524d\u6279\u5b9e\u4e60\u9762\u7ecf \u4eac\u4e1c www.nowcoder.com/discuss/159\u2026 \u3010\u6d6a\u6f6e\u3001OPPO\u3001\u4e2d\u79fb\u5728\u7ebf\u3001TCL\u3011\u8003\u7814\u5931\u8d25\uff0c\u6625\u62db\u7ecf\u5386\uff0c\u7b97\u534a\u4e2a\u9762\u7ecf\u5427 www.nowcoder.com/discuss/162\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u6625\u62db\u7684\u7b2c\u4e00\u4e2a\u9762\u8bd5\uff0c\u8682\u8681\u91d1\u670d www.nowcoder.com/discuss/159\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u963f\u91cc\u5df4\u5df4-\u8682\u8681\u9762\u7ecf\uff08\u5206\u4eab\u6512\u4eba\u54c1\uff01\uff09 www.nowcoder.com/discuss/162\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u3010\u963f\u91cc\u8682\u8681\u91d1\u670d\u4e0a\u6d77\u4e00\u9762\u3011\u4e00\u9762\u7535\u9762\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u3010\u963f\u91cc\u8682\u8681\u91d1\u670d\u4e0a\u6d77\u4e00\u9762\u8865\u5145\u9762\u3011\u4e00\u9762\u7535\u9762\u8865\u5145\u9762\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u91d1\u670djava\u7814\u53d1\u7535\u8bdd\u9762\uff0c\u51c9\u51c9 www.nowcoder.com/discuss/165\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e00\u9762 \u6628\u5929\u65e9\u4e0a\u9762\u7684 www.nowcoder.com/discuss/165\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u963f\u91cc\u8682\u8681\u91d1\u670d1\u9762\u9762\u7ecf www.nowcoder.com/discuss/165\u2026 \u3010\u6469\u6839\u58eb\u4e39\u5229\u3011\u6469\u6839\u8f6f\u4ef6\u5f00\u53d1\u5b9e\u4e60\u9762\u8bd5\u2026\u2026 www.nowcoder.com/discuss/163\u2026 \u3010\u67e0\u6aac\u5fae\u8da3\u3011\u67e0\u6aac\u5fae\u8da3\u6821\u62db\u7b14\u8bd5\u9898\u76ee\u5206\u4eab www.nowcoder.com/discuss/159\u2026 \u3010\u62fc\u591a\u591a\u3011\u62fc\u591a\u591a \u57fa\u7840\u67b6\u6784 \u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31java\u6e38\u620f\u5f00\u53d1\u9762\u8bd5,\u611f\u89c9\u6709\u70b9\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31 \u6625\u62dbJava\u6e38\u620f \u4e09\u9762\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31\u4e00\u9762 13mins www.nowcoder.com/discuss/163\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31java\u5f00\u53d1\u7535\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31java\u6e38\u620f\u5f00\u53d1\u9762\u8bd5,\u611f\u89c9\u6709\u70b9\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\u7f51\u7ad9\u5de5\u7a0b\u5e08\uff08java\u5e73\u53f0\u5de5\u7a0b\u5e08\uff09\u9762\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\uff08JAVA\uff09\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/164\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011Java\u4e09\u4e03\u4e92\u5a31\u4e24\u8f6e\u6280\u672f\u9762\u52a0HR\u9762\u540e\uff0c\u7b49\u901a\u77e5 www.nowcoder.com/discuss/166\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31Java\u6e38\u620f\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/165\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31java\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/166\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\u7f51\u7ad9\u5de5\u7a0b\u5e08\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/166\u2026 \u3010\u5546\u6c64\uff0c\u4eca\u65e5\u5934\u6761\uff0c\u5fae\u535a\uff0c\u6d77\u5eb7\uff0c360\u3011JAVA\u5b9e\u4e60\u9762\u7ecf\uff08\u5546\u6c64\uff0c\u4eca\u65e5\u5934\u6761\uff0c\u5fae\u535a\uff0c\u6d77\u5eb7\uff0c360\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u4e0a\u6d77\u94f6\u884c\u3011\u4e0a\u6d77\u94f6\u884cit\u5f00\u53d1\u5c97\u9762\u8bd5 www.nowcoder.com/discuss/163\u2026 \u3010\u6df1\u4fe1\u670d\u3001VIVO\u3011\u4e00\u4e2a\u83dc\u9e21\u7684\u6625\u62db\u75db\u82e6\u5386\u7a0b\uff08\u5e0c\u671b\u5bf9\u8fd8\u5728\u6821\u56ed\u7684\u4f60\u4eec\u6709\u7528\uff09 www.nowcoder.com/discuss/160\u2026 \u3010\u6df1\u5733\u519c\u5546\u884c\u3011\u6df1\u5733\u519c\u5546\u884c\u7b14\u8bd5\u9762\u7ecf www.nowcoder.com/discuss/159\u2026 \u3010\u795e\u7b56\u6570\u636e\u3011\u795e\u7b56\u6570\u636e\u540e\u53f0\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u601d\u6770\u3011\u601d\u6770\u5b9e\u4e60\u751f\u9762\u8bd5 www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6691\u5047\u5b9e\u4e60\u9762\u8bd5___\u51c9\u51c9 www.nowcoder.com/discuss/159\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u63d0\u524d\u627920\u5c4a\u5b9e\u4e60\u751f\u9762\u7ecf www.nowcoder.com/discuss/159\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u4e00\u9762\u7535\u8bdd\u9762\uff0828\u5206\u949f\uff09 www.nowcoder.com/discuss/159\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u4e00\u9762\u4e8c\u9762\u4e09\u9762 www.nowcoder.com/discuss/160\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf java\u540e\u53f0 \u4e00\u9762 www.nowcoder.com/discuss/160\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf java\u540e\u53f0 \u4e00\u9762 www.nowcoder.com/discuss/160\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6df1\u5733\u7535\u8bdd\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u817e\u8baf\u301120190312 \u817e\u8baf java\u540e\u7aef \u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/161\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u4e00\u9762\uff0c\u7109\u77e5\u559c\u51c9 www.nowcoder.com/discuss/161\u2026 \u3010\u817e\u8baf\u301120190314 \u5206\u4eab\u817e\u8baf \u4e8c\u9762 \u51c9\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0 \u4e00\u9762 \u89c6\u9891\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u8bb0\u4e00\u6b21\u7384\u5b66\u7684\u817e\u8baf\u540e\u53f0\u63d0\u524d\u6279\u9762\u8bd5 www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafjava\u540e\u53f0\u4e00\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6691\u671f\u5b9e\u4e60\u521d\u9762\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u590d\u8bd5(\u51c9\u7ecf) www.nowcoder.com/discuss/166\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafjava\u4e8c\u9762\uff08\u51c9\u534a\u6512\u4eba\u54c1\uff09 www.nowcoder.com/discuss/165\u2026 \u3010\u817e\u8baf\u30112020\u5c4a\u817e\u8baf\u6691\u671f\u5b9e\u4e60Java\u7814\u53d1\u4e00\u4e8c\u9762 www.nowcoder.com/discuss/166\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u4e8c\u9762 \u83dc\u7684\u771f\u5b9e\u3002\u3002 www.nowcoder.com/discuss/166\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\uff08\u4e09\u9762\u3001\u9762\u59d4\u4f1a\uff1f\uff09 www.nowcoder.com/discuss/166\u2026 \u3010\u5b8c\u7f8e\u4e16\u754c\u3011\u5b8c\u7f8e\u540e\u53f0\u7814\u53d1\u4e8c\u9762,\u9879\u76ee\u8bf7\u6559 www.nowcoder.com/discuss/163\u2026 \u3010\u7f51\u6613\u3011\u7f51\u6613\u6709\u9053\u4e00\u9762\u9762\u7ecf\uff082019\u5c4a\u6625\u62db\uff09 www.nowcoder.com/discuss/162\u2026 \u3010\u7f51\u6613\u3011\u7f51\u6613\u6e38\u620f\u4e92\u5a31 \u540e\u7aef\u5f00\u53d1\u5b9e\u4e60 \u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/165\u2026 \u3010\u4e00\u52a0\u3011\u4e00\u52a0\u4e24\u9762\u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u4e00\u52a0\u3011\u4e00\u52a0Java\u6b66\u6c49\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010\u82f1\u7279\u5c14\u3011intell\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/160\u2026 \u3010\u7528\u53cb\u3011\u7528\u53cb\u51c9\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u4e8c\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u4e8c\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u4e09\u9762+hr www.nowcoder.com/discuss/165\u2026 \u3010\u8fdc\u666f\u80fd\u6e90\u3011\u8fdc\u666f\u80fd\u6e90java\u5b9e\u4e60\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u8fdc\u666f\u80fd\u6e90\u3011\u8fdc\u666f\u80fd\u6e90 \u4e00\u9762\uff08\u7535\u9762\uff09 3.13 www.nowcoder.com/discuss/164\u2026 \u3010\u62db\u884c\u3011\u65b0\u51fa\u7089\u7684\u62db\u884c\u9762\u7ecf\uff01\uff01\uff01Java\u540e\u7aef www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u7f51\u7edc\u79d1\u6280\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u9762\u8bd5 www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\uff08JAVA\uff09\u786c\u6838\u7535\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u89c6\u9891\u9762\u8bd5\uff08\u6821\u62db\uff09 www.nowcoder.com/discuss/161\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6java\u8f6f\u5f00\u7535\u9762+\u4e09\u9762\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u7f51\u7edc\u79d1\u6280 Java\u9762\u7ecf\uff08\u6210\u90fd\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u7f51\u7edc\u9762\u8bd5\u9898\u603b\u7ed3 www.nowcoder.com/discuss/166\u2026 \u3010\u62db\u94f6\u7f51\u7edc\u3011\u62db\u94f6java\u8f6f\u5f00\u7535\u9762+\u4e09\u9762\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u62db\u94f6\u7f51\u7edc\u3011\u62db\u94f6\u7f51\u7edc\u79d1\u6280\u6625\u62db\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u62db\u94f6\u7f51\u7edc\u3011\u62db\u94f6\u7f51\u7edc\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u73cd\u7231\u7f51\u3011\u56db\u975e\u83dc\u72d7\u7684\u73cd\u7231\u7f51 Java \u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u73cd\u7231\u7f51\u3011\u73cd\u7231\u7f51\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010\u73cd\u7231\u7f51\u3011\u73cd\u7231\u7f51java\u540e\u53f0\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u4e00\u9762\u9762\u8bd5\u7ecf\u9a8c www.nowcoder.com/discuss/158\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8 \u540e\u7aef\u9762\u7ecf 18\u5e74\u5e95 www.nowcoder.com/discuss/158\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8java\u540e\u53f0\u5b9e\u4e60\u7684\u4e00\u9762\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u8bb0\u4e00\u6b21\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u5f00\u53d1\uff08\u4e0a\u6d77\uff09\u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u4e00\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u5c97 \u4e09\u8f6e\u9762\u7ecf\uff08Offer) www.nowcoder.com/discuss/163\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u6296\u97f3\u540e\u53f0\u7814\u53d1\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/166\u2026 \u3010CVTE\u3001\u83dc\u9e1f\u7f51\u7edc\u3011cvte\u4e00\u9762\u548c\u83dc\u9e1f\u5185\u63a8\u7535\u8bdd\u7a81\u51fb www.nowcoder.com/discuss/160\u2026 \u3010OPPO\u3001VIVO\u3001\u62db\u94f6\u3011\u5206\u4eab\u4e00\u4e0b\u81ea\u5df1\u7684\u6625\u62db\u7ecf\u9a8c www.nowcoder.com/discuss/166\u2026 \u3010vivo\u3001oppo\u3001\u73cd\u7231\u7f51\u3001\u8001\u864e\u8bc1\u5238\u3011vivo oppo \u73cd\u7231\u7f51 \u8001\u864e\u8bc1\u5238\u9762\u7ecf java\u540e\u7aef www.nowcoder.com/discuss/161\u2026","title":"\u5927\u5382\u9762\u7ecf"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E5%A4%A7%E5%8E%82%E9%9D%A2%E7%BB%8F/#java","text":"\u3010VIVO\u3011vivo Java\u540e\u7aef\u79cb\u62db\u63d0\u524d\u6279\u9762\u7ecf \u676d\u5dde\u573a www.nowcoder.com/discuss/198\u2026 \u3010VIVO\u3011\u8fdf\u6765\u768412\u65e5\u6b66\u6c49vivo Java\u540e\u53f0\u9762\u7ecf\uff08\u5df2\u51c9\uff09 www.nowcoder.com/discuss/198\u2026 \u3010VIVO\u3011vivo\u63d0\u524d\u6279\u540e\u7aef\u9762\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010VIVO\u30112020 VIVO\u63d0\u524d\u6279\u9762\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010VIVO\u30112020vivo\u79cb\u62db\u63d0\u524d\u6279\u9762\u8bd5\u7ecf\u9a8c\u603b\u7ed3: www.nowcoder.com/discuss/198\u2026 \u3010\u54c8\u5570\u51fa\u884c\u3011\u54c8\u5570\u5355\u8f66java\u5b9e\u4e60\u751f\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u540e\u7aef\u51c9\u7ecf www.nowcoder.com/discuss/197\u2026 \u3010\u5e7f\u8054\u8fbe\u3011\u5e7f\u8054\u8fbe\u4e00\u9762\u9762\u7ecf\uff08java\uff09 www.nowcoder.com/discuss/196\u2026 \u3010\u732b\u773c\u3011\u732b\u773c\u7535\u5f71\u65e5\u5e38\u5b9e\u4e60java www.nowcoder.com/discuss/195\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u5916\u5356\u914d\u9001\u4e8b\u4e1a\u90e8\u5b9e\u4e60offer\u9762\u7ecf\u5206\u4eab www.nowcoder.com/discuss/196\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6691\u5047\u5b9e\u4e60\u9762\u7ecfjava www.nowcoder.com/discuss/195\u2026 \u3010\u963f\u91cc\u3011\u53d1\u4e00\u4efd\u9762\u7ecf\u5427\uff0c4\u6708\u9762\u7684 www.nowcoder.com/discuss/195\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u7814\u53d1\u9762\u7ecf www.nowcoder.com/discuss/195\u2026 \u3010\u5e7f\u8054\u8fbe\u30115.31 \u5e7f\u8054\u8fbe\u89c6\u9891\u9762\u8bd5\uff0830\u5206\u949f\uff09 www.nowcoder.com/discuss/195\u2026 \u3010\u62fc\u591a\u591a\u3011\u8bb8\u613f\u4e00\u4e2a\u62fc\u591a\u591a\u7684offer\uff0c\u9644\u9762\u7ecf www.nowcoder.com/discuss/195\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u62fc\u591a\u591a\u3001\u534e\u4e3a\u3001VIVO \u3011\u4e09\u8de8\u5b66\u751f\u7684\u9762\u7ecf\uff08\u5934\u6761\u3001\u62fc\u591a\u591a\u3001\u534e\u4e3a\u3001vivo\uff09 www.nowcoder.com/discuss/195\u2026 \u3010\u6e5b\u84dd\u79d1\u6280\u30110529\u7b2c\u4e00\u6b21\u5b9e\u4e60\u9762\u7ecf\uff08\u6e5b\u84dd\u79d1\u6280\uff09\uff0c\u9762\u5b8c\u5c31\u611f\u5192\u53d1\u70ed\u3002\u3002 www.nowcoder.com/discuss/194\u2026 \u3010\u963f\u91cc\u3011\u53d1\u4e00\u4efd\u9762\u7ecf\u5427\uff0c4\u6708\u9762\u7684 www.nowcoder.com/discuss/195\u2026 \u3010\u534e\u6cf0\u8bc1\u5238\u3011\u534e\u6cf0\u8bc1\u5238\u5357\u4eac\u4e8c\u9762 www.nowcoder.com/discuss/194\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u51c9\u7ecf www.nowcoder.com/discuss/194\u2026 \u3010\u62fc\u591a\u591a\u3011\u62dc\u6258\u8d85\u8d8a\u4e86\uff1a\u6c42 pdd \u8865\u62db HR call\u3010\u9644\u9762\u7ecf\u3011 www.nowcoder.com/discuss/194\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u53f0\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/193\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8 \u5934\u6761 \u9762\u7ecf www.nowcoder.com/discuss/194\u2026 \u3010\u5b57\u8282\u8df3\u52a8\uff0c\u963f\u91cc\uff0c\u817e\u8baf\uff0c\u534e\u4e3a\u3011\u6625\u62db\u5b9e\u4e60\u590d\u76d8\uff08\u5b57\u8282\u8df3\u52a8\uff0c\u963f\u91cc\uff0c\u817e\u8baf\uff0c\u534e\u4e3a\uff09 www.nowcoder.com/discuss/193\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJAVA\u51c9\u7ecf www.nowcoder.com/discuss/193\u2026 \u3010\u767e\u5ea6\u3001\u3011\u767e\u5ea6\u8d85\u8be6\u7ec6\u9762\u7ecf\uff08\u9644\u7b54\u6848\uff09 www.nowcoder.com/discuss/192\u2026 \u3010CVTE\u3001\u534e\u4e3a\u3001\u5317\u68ee\u3001\u817e\u8baf\u3001\u3011 www.nowcoder.com/discuss/192\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5b57\u8282\u8df3\u52a8\u3001\u6d77\u5eb7\u30110offer\u9762\u7ecf\uff08\u963f\u91cc\uff0c\u817e\u8baf\uff0c\u5b57\u8282\u8df3\u52a8\uff0c\u6d77\u5eb7\uff09 www.nowcoder.com/discuss/192\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5b57\u8282\u8df3\u52a8\u3001\u643a\u7a0b\u3011\u5728\u9762\u8bd5\u4e2d\u6323\u624e\u7740\u5b66\u4e60\u8fdb\u6b65\u7684\u83dc\ud83d\udc14 www.nowcoder.com/discuss/192\u2026 \u3010\u963f\u91cc\u3001\u552f\u54c1\u4f1a\u3001\u4eac\u4e1c\u3001\u73cd\u7231\u7f51\u3001\u3011Java\u7a0b\u5e8f\u5458\u7684\u6821\u62db\u7b14\u8bb0\u2014\u2014\u6c42\u804c\u5982\u68a6 www.nowcoder.com/discuss/192\u2026 \u3010\u4eac\u4e1c\u3001\u534e\u4e3a\u3001\u53bb\u54ea\u513f\u3001\u3011985\u6e23\u7855\u7684\u6625\u62db\u603b\u7ed3\uff08\u4e09\u6b21\u9762\u8bd5\u4e09\u4e2aOffer\uff09 www.nowcoder.com/discuss/192\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u53f0\u5f00\u53d1\u4e00\u9762 \u51c9\u7ecf www.nowcoder.com/discuss/192\u2026 \u3010\u6ef4\u6ef4\u3011\u6ef4\u6ef4\u4e09\u5929\u4e09\u7535\u8bdd\uff0c\u76f4\u8fbeoffer call\uff0c\u5730\u56fe\u90e8\u95e8 www.nowcoder.com/discuss/191\u2026 \u3010\u963f\u91cc\u301120190515\u963f\u91cc\u5df4\u5df4\u56fd\u9645\u4e8b\u4e1a\u90e8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f\u9762\u7ecf\uff08\u5df2\u4e0a\u5cb8\uff09 www.nowcoder.com/discuss/190\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5b57\u8282\u8df3\u52a8\u3011\u6211\u76842018\u5e74\u540e\u53f0Java\u9762\u7ecf\u6c47\u603b\uff0c\u5305\u542b\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u7b49 www.nowcoder.com/discuss/190\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u94ed\u8bb0\u5931\u8d25\uff0c\u9177\u5bb6\u4e50\u9762\u7ecf www.nowcoder.com/discuss/191\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u540e\u53f0\u9762\u8bd5\u7591\u95ee(\u5b9e\u4e60) www.nowcoder.com/discuss/190\u2026 \u3010PayPal\u3001\u963f\u91cc\u3001\u817e\u8baf\u3011\u6625\u62db\u603b\u7ed3 PayPal+\u963f\u91cc+\u817e\u8baf\u9762\u7ecf www.nowcoder.com/discuss/191\u2026 \u3010PayPal\u3001\u963f\u91cc\u3001\u817e\u8baf\u3011\u6691\u671f\u5b9e\u4e60\u603b\u7ed3 \u817e\u8baf \u963f\u91cc PayPal\u7b80\u77ed\u9762\u7ecf www.nowcoder.com/discuss/191\u2026 \u3010\u817e\u8baf\u3011\u521a\u521a\u6536\u5230\u4e86\u817e\u8bafcsig\u7684offer call www.nowcoder.com/discuss/191\u2026 \u3010\u643a\u7a0b\u30115.17\u643a\u7a0b\u540e\u53f0\u5f00\u53d1\u7535\u8bdd\u4e00\u9762(17min) www.nowcoder.com/discuss/191\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u83dc\ud83d\udc14 \u5b57\u8282\u8df3\u52a8\u5b9e\u4e60\u53c8\u88ab\u635e\u4e86\uff0c\u5206\u4eab\u4e4b\u524d\u6302\u6389\u7684\u9762\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u53f0\u5f00\u53d1\u4e00\u9762 \u51c9\u7ecf www.nowcoder.com/discuss/192\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u661f\u73af\u3001PayPal\u3001\u963f\u91cc\u3001\u817e\u8baf\u3001\u7f8e\u56e2\u3001\u62fc\u591a\u591a\u3011\u6625\u62db\u9762\u7ecf\u96c6\u5408 \u5934\u6761+\u661f\u73af+PayPal www.nowcoder.com/discuss/191\u2026 \u3010\u817e\u8baf\u3001\u963f\u91cc\u3001\u62fc\u591a\u591a\u3001\u5947\u4fe1\u5b89\u3001\u7f8e\u56e2\u3001\u3011\u540e\u53f0/\u5927\u6570\u636e\u76f8\u5173\uff0c\u6625\u62db\u4e2a\u4eba\u9762\u7ecf www.nowcoder.com/discuss/190\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u676d\u5dde\u7fa4\u6838\u9177\u5bb6\u4e50Java\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/189\u2026 \u3010\u7f8e\u56e2\u3011\u7f8e\u56e2\u4e8c\u9762\uff0c\u611f\u89c9\u8981\u51c9 www.nowcoder.com/discuss/190\u2026 \u3010\u7528\u53cb\u3011\u8865\u7528\u53cb\u7f51\u7edc\u4e00\u9762 www.nowcoder.com/discuss/190\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u4e4b\u524d\u4e00\u8f6e \u83dc\ud83d\udc14\u7684\u5b57\u8282\u8df3\u52a8\u4e8c\u9762 www.nowcoder.com/discuss/190\u2026 \u3010\u7231\u5947\u827a\u3011\u7231\u5947\u827a\u5b9e\u4e60\u9762\u8bd5 www.nowcoder.com/discuss/189\u2026 \u3010\u83dc\u9e1f\u7f51\u7edc\u3001\u817e\u8baf\u3011[\u56de\u9988\u8d34]\u963f\u91cc\u83dc\u9e1f+\u817e\u8bafIEG\u9762\u7ecf www.nowcoder.com/discuss/189\u2026 \u3010CVTE\u3001\u817e\u8baf\u3001\u963f\u91cc\u3001\u3011\u6536\u5230\u963f\u91cc\u83dc\u9e1f\u610f\u5411\u4e66\u5566\uff0c www.nowcoder.com/discuss/189\u2026 \u3010\u6469\u6839\u58eb\u4e39\u5229\u3011\u6469\u6839\u58eb\u4e39\u5229\u82f1\u6587\u7535\u8bdd\u9762\u8bd5\u9762\u7ecf www.nowcoder.com/discuss/189\u2026 \u3010\u643a\u7a0b\u3011\u643a\u7a0b\u9762\u7ecf\u5206\u4eab\uff08\u6df1\u5733\uff09 www.nowcoder.com/discuss/189\u2026 \u3010\u62db\u884c\u3001\u643a\u7a0b\u3011\u611f\u8c22\u6052\u751fbaba www.nowcoder.com/discuss/189\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8/\u5934\u6761\uff0c\u5df2\u4e0a\u5cb8 www.nowcoder.com/discuss/189\u2026 \u3010\u963f\u91cc\u30112019\u963f\u91ccJVM\u7ec4\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u7f8e\u56e2\u3011\u542c\u8bf4\u53d1\u9762\u7ecf\u7ba1\u7528\uff0c\u83dc\u9e21\u7384\u5b66\u6c42\u7f8e\u56e2\u4e8c\u9762\u554a\u554a\u554a\u554a www.nowcoder.com/discuss/188\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u301120190509\u5934\u6761\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5b9e\u4e60\u540e\u53f0\u5f00\u53d1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u767e\u5ea6\u3001\u817e\u8baf\u3001\u963f\u91cc\u3001\u5b57\u8282\u8df3\u52a8\u3011\u3010\u603b\u7ed3\u3011\u96f6\u57fa\u7840\u5b66\u4e60\u4e00\u5e74\u62ff\u5230BAT\u4e09\u5bb6offer www.nowcoder.com/discuss/188\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u5929\u732bJava\u540e\u53f0\u5f00\u53d1\u9762\u8bd5\u5386\u7a0b www.nowcoder.com/discuss/188\u2026 \u3010\u7f8e\u56e2\u3011\u8fd9\u662f\u4e00\u4efd\u6765\u81ea\u7f8e\u56e2\u5916\u5356\u7684\u9694\u591c\u70e4\u9762\u7b4b(Java) www.nowcoder.com/discuss/188\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafcsig oc\u7ec8\u4e8e\u5230\u4e86 www.nowcoder.com/discuss/188\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u5b9e\u4e60\u540e\u53f0\u5f00\u53d1\u6ca1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u7ecf\uff0c\u57fa\u7840\u5e73\u53f0\u7814\u53d1\u5de5\u7a0b\u5e08 www.nowcoder.com/discuss/187\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u4e0a\u5cb8......\u90e8\u5206\u9762\u7ecf www.nowcoder.com/discuss/188\u2026 \u3010\u7f8e\u56e2\u3001\u643a\u7a0b\u3011\u7ec8\u4e8e\u6709offer\u4e86\uff0c\u8fd8\u4e00\u6ce2\u513f\u613f www.nowcoder.com/discuss/187\u2026 \u3010Momenta\u3001\u963f\u91cc\u3011\u83dc\u662f\u539f\u7f6a...\u51c9\u7ecf\u5206\u4eab.... www.nowcoder.com/discuss/187\u2026 \u3010\u817e\u8baf\u3011\u79fb\u52a8\u5ba2\u6237\u7aef\u5b9e\u4e60 www.nowcoder.com/discuss/187\u2026 \u3010\u6241\u9e4a\u3011\u70ed\u4e4e\u4e4e\u7684\u6d59\u6c5f\u6241\u9e4a\u9762\u7ecf(Java) www.nowcoder.com/discuss/186\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u5b9e\u4e60\u9762\u7ecf\uff08\u5df2\u6536\u5230\u610f\u5411\u4e66\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u5b9e\u4e60\u540e\u53f0\u5f00\u53d1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/186\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u4eac\u4e1c\u6570\u79d1\u3001\u6ef4\u6ef4\u3001\u8ffd\u4e00\u79d1\u6280\u3001\u5c0f\u7ea2\u4e66\u3001Momenta\u3001\u534e\u4e3a\u3001\u7f51\u5bbf\u79d1\u6280\u3001\u641c\u72d0\u7545\u6e38\u3001\u6df1\u4fe1\u670d\u3001\u3011\u975e\u79d1\u73ed\u6c34\u7855\u7684\u6625\u62db\u5b9e\u4e60\u603b\u7ed3- Java \u540e\u53f0\u5f00\u53d1 www.nowcoder.com/discuss/186\u2026 \u3010\u817e\u8baf\u3001\u6597\u9c7c\u3001\u62db\u884c\u3011\u8c08\u8c08\u627e\u5b9e\u4e60\u7684\u7ecf\u5386\u548c\u611f\u60f3\u5427\uff08\u4ee5\u53caLeetcode\u5237\u9898\u7ec4\u961f\u554a\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u817e\u8baf\u3001\u963f\u91cc\u3001\u8fdc\u666f\u3001\u643a\u7a0b\u3001\u534e\u4e3a\u3001\u62fc\u591a\u591a\u3001\u7f8e\u56e2\u3011\u5f31\u9e21\u7684\u5fc3\u9178\u6625\u62db\uff08\u5b9e\u4e60\uff09\u9762\u7ecf\u5408\u96c6\uff08\u8bf4\u591a\u4e86\u90fd\u662f\u6cea\u554a\ud83d\ude02\ud83d\ude02\ud83d\ude02\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u9605\u6587\u96c6\u56e2\u3011\u9605\u6587\u96c6\u56e2java\u5f00\u53d1\u9762\u7ecf\uff08\u4e00\u9762\u51c9\uff09 www.nowcoder.com/discuss/186\u2026 \u3010\u62db\u94f6\u3001\u501f\u8d37\u5b9d\u3001\u9177\u4e50\u5bb6\u3001\u6b65\u6b65\u9ad8\u3001\u7231\u5947\u827a\u3011\u6625\u62db\u9762\u7ecf\u603b\u7ed3 www.nowcoder.com/discuss/186\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5b9e\u4e60\u4e00\u9762\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/185\u2026 \u3010\u5546\u6c64\u3011\u975e\u5e38\u8fc5\u901f\u7684\u5546\u6c64\u79d1\u6280 www.nowcoder.com/discuss/185\u2026 \u301058\u301158\u4e00\u9762\uff0c\u50cf\u4e8c\u9762\u7684\u611f\u89c9\u3002\u3002\u3002 www.nowcoder.com/discuss/184\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u4f01\u4e1a\u5b89\u5168\u8fdf\u5230\u9762\u7b4b www.nowcoder.com/discuss/184\u2026 \u3010\u963f\u91cc\u3011\u7ec8\u4e8e\u7b49\u5230\u4f60\uff0c\u963f\u91cc\u610f\u5411\u4e66 www.nowcoder.com/discuss/184\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e0a\u5cb8\u4e86\uff08\u9762\u7ecf\uff09\uff01 www.nowcoder.com/discuss/184\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u8bd5\u8fc7\u7a0b\u5206\u4eab www.nowcoder.com/discuss/185\u2026 \u3010\u6052\u751f\u7535\u5b50\u3011\u6052\u751f\u7535\u5b50\u7b14\u9762\u7ecf(\u5357\u660c\u7ad9) www.nowcoder.com/discuss/184\u2026 \u3010\u534e\u4e3a\u4e91\uff0c\u963f\u91cc\u83dc\u9e1f\uff0c\u9177\u5bb6\u4e50\uff0c\u7f51\u6613\u96f7\u706b\uff0c\u5b57\u8282\u8df3\u52a8\u3011\u6625\u62db\u5b9e\u4e60\u9762\u7ecf\uff08\u534e\u4e3a\u4e91\uff0c\u963f\u91cc\u83dc\u9e1f\uff0c\u9177\u5bb6\u4e50\uff0c\u7f51\u6613\u96f7\u706b\uff0c\u5b57\u8282\u8df3\u52a8\uff09 www.nowcoder.com/discuss/184\u2026 \u3010\u817e\u8baf\u3001\u7f51\u6613\u6e38\u620f\u3001\u963f\u91cc\u3001\u5fae\u4f17\u3011\u3010\u8d5b\u540e\u30112020JAVA\u5b9e\u4e60(\u817e\u8baf\u3001\u7f51\u6613\u6e38\u620f\u3001\u963f\u91cc\u3001\u5fae\u4f17) www.nowcoder.com/discuss/184\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u9762\u7ecf\uff0c\u6512\u6512RP www.nowcoder.com/discuss/184\u2026 \u3010\u643a\u7a0b\u3011\u643a\u7a0boffer\u5df2\u6536 www.nowcoder.com/discuss/185\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u9762\u7ecf\uff08\u51c9\u51c9\uff09 www.nowcoder.com/discuss/183\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u4f01\u4e1a\u5b89\u5168\u670d\u52a1\u7aef\u5f00\u53d1\u5de5\u7a0b\u5e08(Java)\u529d\u9000\u9762 www.nowcoder.com/discuss/183\u2026 \u3010\u5fae\u8f6f\u3011\u82cf\u5dde\u5fae\u8f6f\u9762\u7ecf\uff01 www.nowcoder.com/discuss/183\u2026 \u3010360\u4f01\u4e1a\u3011360\u5b89\u5168\u9762\u8bd5\u4e00\u9762 www.nowcoder.com/discuss/183\u2026 \u3010\u963f\u91cc\u3011985\u672b\u6d41\u672c\u79d1\u751f\u7684\u5b9e\u4e60\u6625\u62db\u603b\u7ed3 www.nowcoder.com/discuss/183\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/183\u2026 \u3010\u8682\u8681\u3011\u8682\u8681java\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/183\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e0a\u5cb8\u6210\u529f,\u56de\u9988\u725b\u5ba2 www.nowcoder.com/discuss/183\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u6e23\u6e23\u4e00\u9762 www.nowcoder.com/discuss/183\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u5b9e\u4e60\u751f\u9762\u7ecf\uff0c\u4fdd\u4f51\u4fdd\u4f51 www.nowcoder.com/discuss/183\u2026 \u3010360\u4f01\u4e1a\u5b89\u5168\u3011360\u4f01\u4e1a\u5b89\u5168\u9762\u7ecf(java\u7814\u53d1) www.nowcoder.com/discuss/183\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/183\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/183\u2026 \u3010OPPO\u3011oppo\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u4e1c\u65b9\u8d22\u5bcc\u3011\u4e1c\u65b9\u8d22\u5bcc\u6280\u672f\u5c97\uff08Java\uff09\u5b9e\u4e60\u751f\u89c6\u9891\u9762 www.nowcoder.com/discuss/182\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u8fd9\u8c01\u9876\u5f97\u4f4f......\u963f\u91cc\u83dc\u9e1fJava\u9762\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762 www.nowcoder.com/discuss/182\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u62fc\u591a\u591a\u301119\u5c4a \u7ec8\u4e8e\u7b49\u5230\u4f60\u4e86Pdd www.nowcoder.com/discuss/182\u2026 \u3010\u8d8b\u52bf\u79d1\u6280\u3011\u8d8b\u52bf\u79d1\u6280\u3002\u9762\u54ed\u7ecf www.nowcoder.com/discuss/182\u2026 \u3010\u817e\u8baf\u3001\u8611\u83c7\u8857\u3001\u5feb\u624b\u3001\u4e9a\u9a6c\u900a\u3001\u767e\u5ea6\u3011java\u5f00\u53d1\u5b9e\u4e60\u751f\u9762\u7ecf\uff08\u5f88\u591a\u51c9\u7ecf\u548c\u8fd8\u5728\u7b49\u5f85\u540e\u7eed\u7684\uff09 www.nowcoder.com/discuss/182\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6java\u540e\u53f0\u6691\u671f\u5b9e\u4e60\uff08\u4e00\u9762\u3001\u4e8c\u9762\u3001\u4e09\u9762\uff09 www.nowcoder.com/discuss/181\u2026 \u3010CVTE\u3001\u73cd\u7231\u7f51\u3001\u591a\u76ca\u3001\u4e09\u4e03\u4e92\u5a31\u3001\u51e1\u79d1\u301119\u5c4a\u83dc\u9e21\u7684\u6625\u62db\u7ec8\u4e8e\u7ed3\u675f\u4e86 www.nowcoder.com/discuss/181\u2026 \u3010\u5feb\u624b\u3011\u7384\u5b66\u6c42offer\uff0c\u5feb\u624b\u9762\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u8682\u8681\u3011\u8682\u8681 java\u5b9e\u4e60 \u4e00\u9762 www.nowcoder.com/discuss/181\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u91d1\u670d\u9762\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u62fc\u591a\u591a\u3001\u540c\u7a0b\u827a\u9f99\u3001\u79d1\u5927\u8baf\u98de\u3001Zoom\u3001\u4eac\u4e1c\u3001\u817e\u8baf\u3001\u9177\u72d7\u3011\u6625\u62db\u4e0a\u5cb8\u603b\u7ed3\u4ee5\u53ca\u5b66\u4e60\u7ecf\u5386\u5206\u4eab\uff083offer\uff09 www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u30114.20 \u5b57\u8282\u70ae\u7070\u7ecf\u5386 www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u7559\u5b66\u751f\u65b0\u9c9c\u9762\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9\u7ecf2019.04.20 www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e09\u9762\u51c9\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/181\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u5b9e\u4e60 \u4e09\u9762\uff08\u89c6\u9891\u9762\uff09 4.20 www.nowcoder.com/discuss/181\u2026 \u3010360\u3011360\u4e00\u59293\u9762\uff0c\u4e24\u5468\u5185\u7ed9\u7ed3\u679c\u3002\u3002 www.nowcoder.com/discuss/180\u2026 \u3010group\u3011ok group\u9762\u7ecf www.nowcoder.com/discuss/180\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u540e\u53f0\u4e8c\u9762\u89c6\u9891\u9762\u51c9\u7ecf www.nowcoder.com/discuss/180\u2026 \u3010\u4eac\u4e1c\u3011\u4eac\u4e1c\u4e00\u9762\u9762\u7ecf\uff08java\u540e\u53f0\u5f00\u53d1\uff09 www.nowcoder.com/discuss/180\u2026 \u3010\u62fc\u591a\u591a\u301119\u5c4a\u62fc\u591a\u591a\u4e0a\u5cb8\uff0c\u611f\u8c22\u725b\u5ba2\uff01\uff01\uff01 www.nowcoder.com/discuss/180\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u6570\u636e\u90e8\u95e8Java\u7814\u53d1\u5de5\u7a0b\u5e08\uff082020\u6821\u62db\u6691\u671f\u5b9e\u4e60\uff09\u4e00\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u3001\u82f1\u7279\u5c14\u3001\u661f\u73af\u3001\u89c6\u6e90\u3011\u56db\u8de8\u8003\u751f\u7684\u9762\u7ecf\u5408\u96c6\uff08\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u3001\u82f1\u7279\u5c14\u3001\u661f\u73af\u3001\u89c6\u6e90\uff09 www.nowcoder.com/discuss/180\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/180\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u9762\u7ecf\uff08java\uff09 www.nowcoder.com/discuss/179\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\u6625\u62db\u9762\u7ecf(Java\u5c97) www.nowcoder.com/discuss/179\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u53c8\u4e00\u6b21\u4e00\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/179\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u94f6\u884c\u4e00\u9762 www.nowcoder.com/discuss/180\u2026 \u3010\u8fdc\u666f\u3011\u8fdc\u666f\u7535\u8bdd\u9762 4\u670818\u53f7 www.nowcoder.com/discuss/180\u2026 \u3010\u5ea6\u5c0f\u6ee1\u3011\u5ea6\u5c0f\u6ee1\u73b0\u573a\u9762\u8bd5 www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u5b9e\u4e60\u751f\u4e00\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u9177\u5bb6\u4e50\u5927\u6570\u636e\u7814\u53d1\u9762\u8bd5 www.nowcoder.com/discuss/179\u2026 \u3010\u5feb\u624b\u3011\u5feb\u624bJava\u5f00\u53d1\u5b9e\u4e60\u9762\u7ecf\uff08\u53e3\u5934offer www.nowcoder.com/discuss/179\u2026 \u3010\u8054\u901a\u3001\u5b87\u4fe1\u79d1\u6280\u3001\u6df1\u5733\u519c\u5546\u94f6\u884c\u3001\u4e2d\u5174\u3001\u79d1\u5927\u8baf\u98de\u300158\u3011\u6295\u4e8670\u591a\u5bb6 \u7b14\u9762\u8bd560\u591a\u6b21 \u4e2d\u4e8c\u5b66\u957f\u7684\u79cb\u62db\u9762\u7ecf www.nowcoder.com/discuss/179\u2026 \u3010\u9014\u725b\u3011\u9014\u725b\u5929\u6d25Java\u7814\u53d1\u5c97\u9762\u7ecf\u53c2\u8003 \u5df2\u62ffoffer www.nowcoder.com/discuss/179\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\uff084.16\uff09\u51c9\u9762\u9762\u7ecf\u5206\u4eab\u6512\u4eba\u54c1 www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u540e\u53f0\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/179\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u540e\u53f0\u5f00\u53d1\uff08Java\uff09\u6691\u5047\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/178\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u5f00\u53d1\u5c97\u4e00\u9762 www.nowcoder.com/discuss/178\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u51c9\u9762 www.nowcoder.com/discuss/179\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u3001\u4e8c\u9762\u51c9\u7ecf\uff08\u4e8c\u9762\u6302\uff09 www.nowcoder.com/discuss/178\u2026 \u3010\u5b8c\u7f8e\u4e16\u754c\u3011\u5b8c\u7f8e\u4e16\u754c\u4e00\u9762\u51c9\u7ecf(\u53cb\u597d\u9762\u8bd5\uff0c\u53cb\u597d\u544a\u522b) www.nowcoder.com/discuss/178\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6JAVA\u9762\u7ecf www.nowcoder.com/discuss/177\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5b9e\u4e60Java\u540e\u53f0\u5f00\u53d1 www.nowcoder.com/discuss/178\u2026 \u3010\u963f\u91cc\u3001\u5b57\u8282\u8df3\u52a8\u3001\u62fc\u591a\u591a\u3001\u817e\u8baf\u3011\u5b9e\u4e60\u9762\u7ecf Java\u540e\u7aef \u963f\u91cc \u5b57\u8282 PDD \u817e\u8baf HW www.nowcoder.com/discuss/177\u2026 \u3010\u54c8\u5570\u3011\u54c8\u5570\u65e5\u5e38\u5b9e\u4e60Java\u9762\u7ecf www.nowcoder.com/discuss/177\u2026 \u3010\u5409\u6bd4\u7279\u3001\u963f\u91cc\u3001\u817e\u8baf\u3001\u8ffd\u5fc6\u79d1\u6280\u3001\u9014\u725b\u3011\u6e23\u4e8c\u672cJava\u83dc\u9e210Offer\u7684\u6625\u62db\u8840\u6cea\u53f2 www.nowcoder.com/discuss/177\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u9177\u5bb6\u4e50\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/177\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u51c9\u9762 www.nowcoder.com/discuss/177\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u9762\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/178\u2026 \u3010\u53bb\u54ea\u513f\u3011\u53bb\u54ea\u513f\u5b9e\u4e60\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/177\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u767e\u5ea6\u3001\u817e\u8baf\u3001\u5feb\u624b\u3001\u501f\u8d37\u5b9d\u3001\u963f\u91cc\u4e91\u3011Java\u5f00\u53d1\u9762\u7ecf\uff0c\u4eca\u65e5\u5934\u6761\u3001\u767e\u5ea6\u3001\u817e\u8baf\u3001\u5feb\u624b\u3001\u501f\u8d37\u5b9d\u3001\u963f\u91cc\u4e91 www.nowcoder.com/discuss/178\u2026 \u3010VIVO\u3011vivo 4.11\u5357\u4eac\u7814\u7a76\u6240\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u534e\u4e3a\u3001VIVO\u3011\u4ece\u6574\u4e2a\u4e09\u6708\u6ca1\u516c\u53f8\u7406\u81ea\u95ed\u5230\u4e0a\u5cb8\uff0c\u534e\u4e3a\u3001vivo\u9762\u7ecf\uff0c\u611f\u8c22\u725b\u5ba2\u3002 www.nowcoder.com/discuss/176\u2026 \u3010\u8682\u8681\u3011\u4e0a\u6d77\u8682\u86814\u9762\uff08Java\u7814\u53d1\uff09\uff0c\u53d1\u5e16\u6512\u70b9\u8fd0\u6c14 www.nowcoder.com/discuss/176\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u4e00\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u4e03\u725b\u4e91\u3011\u4e03\u725b\u4e91\u4e00\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u817e\u8baf\u3001360\u3011\u817e\u8bafoffer\u9762\u7ecf+\u5185\u63a8360+3000hc+\u5927\u5382\u5f85\u9047+\u8f6c\u6b63 www.nowcoder.com/discuss/176\u2026 \u3010\u62db\u94f6\u3011\u62db\u5546\u7f51\u7edc\u79d1\u6280\u7535\u8bdd\uff0c\u89c6\u9891\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u53f0\u7814\u53d1\u6691\u671f\u5b9e\u4e602x3\u8f6e+HR\u8f6e\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3001\u767e\u5ea6\u3001\u963f\u91cc\u3001\u817e\u8baf\u3001\u7f51\u6613\u3001\u7f8e\u56e2 \u30112018\u5e74\u79cb\u62db\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5728\u5b66\u6821\u7684BBS\u4e0a\u6295\u7684Java\u5f00\u53d1\u4e00\u9762 www.nowcoder.com/discuss/175\u2026 \u3010CVTE\u3001\u817e\u8baf\u3001\u963f\u91cc\u3011\u56de\u9988\u725b\u6cb9\uff1a\u6625\u62dbJava\u540e\u53f0\u5b9e\u4e60\uff0ccvte\uff0c\u817e\u8baf\uff0c\u963f\u91cc\u9762\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010VIVO\u3011Vivo \u5357\u4eacJava\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u5ea6\u5c0f\u6ee1\u3011\u5ea6\u5c0f\u6ee1\u4e00\u9762\u4e8c\u9762\u9762\u7b4b www.nowcoder.com/discuss/176\u2026 \u3010\u5ea6\u5c0f\u6ee1\u3011\u5ea6\u5c0f\u6ee1\uff082019.4.10\u73b0\u573a\u9762\uff09 www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u8bb0\u5f55\u4e00\u4e0b\u963f\u91cc\u7684\u4e00\u9762\uff0c\u6295\u9012\u7684\u5f88\u665a\uff0c\u6628\u5929\u521a\u521a\u4e00\u9762 www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u81f3hr\u9762\u7b4b www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJAVA \u540e\u53f0\u5b9e\u4e60\u51c9\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u540e\u53f0\u51c9\u7ecf \u4ea4\u53c9\u9762\u8dea www.nowcoder.com/discuss/176\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u8bd5\u51c6\u5907\u53ca\u9762\u7ecf\u5206\u4eab\uff08\u5e72\u8d27\u6ee1\u6ee1\uff09 www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccjava\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u65b0\u96f6\u552eJava\u540e\u7aef\u4e8c\u9762 www.nowcoder.com/discuss/175\u2026 \u3010\u534e\u4e3a\u3011\u534e\u4e3a\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u9177\u5bb6\u4e50\u3011\u9177\u5bb6\u4e50Java\u540e\u7aef\u4e00\u9762 www.nowcoder.com/discuss/175\u2026 \u3010\u8682\u8681\u3011\u963f\u91cc\u5df4\u5df4\u8682\u8681\u91d1\u670d2020\u91d1\u878d\u6838\u5fc3\u90e8\u95e8\u5b9e\u4e60\u9762\u7ecf\uff08\u6536\u5230offer www.nowcoder.com/discuss/174\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u540e\u53f0\u5f00\u53d1\u4e00\u9762\u51c9 www.nowcoder.com/discuss/176\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857 \u540e\u53f0\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/176\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u5b9e\u4e60\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010oppo \u3001VIVO\u3001\u62fc\u591a\u591a\u3001\u5b57\u8282\u8df3\u52a8\u3011\u6210\u529f\u4e0a\u5cb8\uff0c www.nowcoder.com/discuss/176\u2026 \u3010\u53bb\u54ea\u513f\u3011\u53bb\u54ea\u513f\u4e00\u9762\u9762\u7ecf\u3002\u3002\u3002 www.nowcoder.com/discuss/175\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u5f00\u53d1\u5b9e\u4e60\u4e00\u3001\u4e8c\u8f6e\u9762\u7ecf\uff08\u5df2\u62ffOffer\uff09 www.nowcoder.com/discuss/174\u2026 \u3010\u817e\u8baf\u3011\u62ff\u5230\u817e\u8bafoffer\u5566\uff0c\u5206\u4eab\u590d\u4e60\u7ecf\u9a8c\u548c\u540e\u53f0\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u7f51\u6613\u3011\u7f51\u6613\u4e92\u5a31\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/175\u2026 \u3010\u62db\u884c\u3011\u62db\u884c\u4fe1\u7528\u5361\u4e2d\u5fc3\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/176\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u5df4\u5df418\u5e74\u6625\u62db\u5b9e\u4e60\u4e09\u9762\u51c9\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u91d1\u670dJava\u5f00\u53d1\u5b9e\u4e60\u8dea\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u5f00\u53d1\u4e0a\u5cb8\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u817e\u8baf\u3001\u73cd\u7231\u7f51 \u3001\u6df1\u4fe1\u670d\u3001\u5c1a\u6e38\u6e38\u620f\u3001\u3011\u79cb\u62db+\u6625\u62dbjava\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u5fae\u8f6f\u3011\u82cf\u5dde\u5fae\u8f6f\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u5c0f\u7c73\u3011\u5c0f\u7c73\u641c\u7d22\u5f00\u53d1\u5de5\u7a0b\u5e08\u5b9e\u4e60\u751f\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u62db\u884c\u3011\u62db\u5546\u94f6\u884c\u4fe1\u7528\u5361\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762\uff08\u5f88\u7384\u5b66\u7684\u8fc7\u7a0b\uff09 www.nowcoder.com/discuss/173\u2026 \u3010\u5317\u4eac\u4f18\u70ab\u8f6f\u4ef6\u3011\u5199\u4e00\u4e2a\u9762\u7ecf\uff1a\u5317\u4eac\u4f18\u70ab\u8f6f\u4ef6\uff0cjava\u5f00\u53d1 www.nowcoder.com/discuss/172\u2026 \u3010\u534e\u4e3a\u3011\u534e\u4e3a\u4e91\u9879\u76ee\u5b9e\u4e60\u751f\uff0c\u5df2\u62ffoffer\uff0c www.nowcoder.com/discuss/173\u2026 \u3010\u8611\u83c7\u8857\u3011\u8611\u83c7\u8857\u4e00\u9762\u9762\u7ecf,\u540e\u53f0\u5f00\u53d1 www.nowcoder.com/discuss/173\u2026 \u3010\u8611\u83c7\u8857\u30114.3 \u8611\u83c7\u8857\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u62fc\u591a\u591a\u3011pdd java\u5f00\u53d1\u900f\u5fc3\u51c9\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u62fc\u591a\u591a\u3011\u62fc\u591a\u591a\u9762\u7ecf www.nowcoder.com/discuss/173\u2026 \u3010\u8d8b\u52bf\u79d1\u6280\u3011\u8d8b\u52bf\u79d1\u6280\u4e00\u9762\uff0c\u6211\u8dea\u4e86\uff0c\u4f46\u662f\u5176\u5b9e\u4e0d\u96be\uff0c\u7ed9\u5927\u5bb6\u4e00\u4e9b\u53c2\u8003 www.nowcoder.com/discuss/172\u2026 \u3010\u817e\u8baf\u3001\u7f51\u6613\u3001\u4e09\u4e03\u3011\u6625\u62db\u5b9e\u4e60\u4e0a\u5cb8\uff0c www.nowcoder.com/discuss/172\u2026 \u3010\u8fdc\u666f\u3011\u8fdc\u666f\u4e00\u9762 www.nowcoder.com/discuss/172\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u65b0\u96f6\u552e\u4e8c\u9762\uff0c52\u5206\u949f(\u70ed\u4e4e\u7684) www.nowcoder.com/discuss/172\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u963f\u91cc\u3011\u5929\u732bjava\u7814\u53d1\u4e00\u9762\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u6ef4\u6ef4\u3011\u6ef4\u6ef4\u7f51\u7ea6\u8f66Java\u540e\u7aef\u5f00\u53d1\u51c9\u7ecf www.nowcoder.com/discuss/172\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u4e09\u9762\uff0c\u81ea\u95ed\u81ea\u95ed www.nowcoder.com/discuss/172\u2026 \u3010\u8682\u8681\u3011\u8682\u8681\u91d1\u670d\u9762\u7ecf\uff0c\u5e0c\u671b\u65e9\u70b9\u513f\u6536\u5230\u5b9e\u4e60offer\ud83d\ude4f\ufe0f\ud83d\ude4f\ufe0f\ud83d\ude4f\ufe0f www.nowcoder.com/discuss/172\u2026 \u3010\u5c0f\u7c73\u3011\u5c0f\u7c73\u670d\u52a1\u7aef\u5b9e\u4e60\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/172\u2026 \u30104399\u30114399\u3000Java\u4e00\u9762\u51c9\u900f\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010CVTE\u3011CVTE\u5f00\u53d1\u5b9e\u4e60\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762\u5df2\u51c9 www.nowcoder.com/discuss/171\u2026 \u3010\u7f8e\u56e2\u3011\u56db\u9762\u7f8e\u56e2\uff0c\u6536\u5272 offer www.nowcoder.com/discuss/171\u2026 \u3010\u6d66\u53d1\u3011\u4e0a\u6d77\u6d66\u53d1\u9762\u8bd53\u670831 www.nowcoder.com/discuss/171\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf \u6625\u62db\u5b9e\u4e60 \u540e\u53f0\u5947\u8469\u4e8c\u9762\u9762\u7ecf \uff08\u611f\u89c9\u4e0a\u4e0d\u4e86\u5cb8\u4e86\uff09 www.nowcoder.com/discuss/171\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u9762\u7ecf\u6512\u4eba\u54c1\uff08\u540e\u53f0\u5f00\u53d11+2+3+4+hr\u9762\uff09 www.nowcoder.com/discuss/171\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u94f6\u884cjava\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17\u94f6\u884c www.nowcoder.com/discuss/171\u2026 \u3010OPPO\u3001\u5b57\u8282\u8df3\u52a8\u3001\u5e73\u5b89\u91d1\u878d\u3001\u70fd\u706b\u901a\u4fe1\u3001\u6d66\u53d1\u3011\u672c\u4eba\u6625\u62db\u7ed3\u675f\uff0c\u9644\u8be6\u7ec6\u9762\u7ecf www.nowcoder.com/discuss/171\u2026 \u3010VIVO\u3011vivo\u6625\u62db\u8865\u5f55\u9762\u8bd5 www.nowcoder.com/discuss/170\u2026 \u3010VIVO\u3011vivo\u9762\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010VIVO\u3011vivo\u4e00\u9762\u8f6f\u4ef6\u5f00\u53d1\u5de5\u7a0b\u5e08\uff08Java\uff09\u89c6\u9891\u9762\uff0c\u521a\u51fa\u7089\u7684\u9762\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u963f\u91cc\u5df4\u5df4\u83dc\u9e1fjava\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u91d1\u670d\uff08java\uff09\u975e\u5178\u578b\u6302\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e00\u9762java web\u51c9\u7ecf\uff0c\u4f5b\u4e86\u3002offer\u65e0\u7f18 www.nowcoder.com/discuss/170\u2026 \u3010\u817e\u8baf\u3011\u67d0\u53cc\u6d41\u4e00\u9ad8\u6821\u5b66\u751f\u7adf\u843d\u9b44\u5230\u53bb\u5395\u6240\u9762\u8bd5... www.nowcoder.com/discuss/170\u2026 \u3010\u5fae\u4f17\u94f6\u884c\u3011\u5fae\u4f17Java\u5f00\u53d1\u7535\u9762 www.nowcoder.com/discuss/169\u2026 \u3010\u5c0f\u7c73\u3011\u5c0f\u7c73\u540e\u7aef\u5f00\u53d1\u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u7528\u53cb\u3011\u7528\u53cbjava\u540e\u7aef\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u62db\u884c\u3011\u62db\u884c\u4fe1\u7528\u5361\u4e2d\u5fc3 \u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u62db\u884c\u3011\u62db\u884c\u4fe1\u7528\u5361\u4e2d\u5fc3 \u4e00\u9762 www.nowcoder.com/discuss/170\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u53f0\u5b9e\u4e60\u7684\u4e00\u9762\u4e8c\u9762\u4e09\u9762\u9762\u7ecf www.nowcoder.com/discuss/155\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761Java\u540e\u53f0\u5f00\u53d1\u9762\u8bd5 www.nowcoder.com/discuss/170\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u30113.30\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u5f00\u53d1\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/170\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u65b0\u96f6\u552eJava\u51c9\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u51c9\u7ecf www.nowcoder.com/discuss/169\u2026 \u3010\u963f\u91cc-\u83dc\u9e1f\u3011\u8fdf\u5230\u7684\u963f\u91cc\u83dc\u9e1f\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/169\u2026 \u3010\u5e03\u672c\u667a\u80fd\u3011\u5e03\u672c\u667a\u80fd\u4e00\u9762 www.nowcoder.com/discuss/169\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u30113\u670827\u65e5 \u5934\u6761\u4e00\u9762 \u540e\u7aef\u5f00\u53d1 www.nowcoder.com/discuss/169\u2026 \u3010Momenta\u3011\u613f\u4f60\u6240\u613f\uff0c\u7ec8\u80fd\u5b9e\u73b0\uff0c\u9644\u4e0aMomenta\u7814\u53d1\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u767e\u5ea6\u3011\u767e\u5ea6\u5b9e\u4e60\u9762\u8bd5\uff08\u65e5\u5e38\u5b9e\u4e60\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u767e\u5ea6\u3001\u817e\u8baf\u3001\u5934\u6761\u3011\u6e23\u6e23\u7684\u4e92\u8054\u7f51\u6c42\u804c www.nowcoder.com/discuss/168\u2026 \u3010\u79d1\u5927\u8baf\u98de\u3011\u79d1\u5927\u8baf\u98de\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u65f7\u89c6\u3011\u6211\u59cb\u7ec8\u575a\u4fe1\uff0c\u52aa\u529b\u4e0d\u4f1a\u88ab\u8f9c\u8d1f\uff0c\u9644\u4e0a\u65f7\u89c6\u7814\u53d1\u5b9e\u4e60\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u8682\u8681\u3011java\u7814\u53d1-\u8682\u8681\u91d1\u670d-\u4e8c\u9762\u4e09\u9762 www.nowcoder.com/discuss/168\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011java\u7814\u53d1-\u8682\u8681\u91d1\u670d-\u4e00\u9762\u7535\u9762 www.nowcoder.com/discuss/167\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681Java\u540e\u7aef\u5b9e\u4e60\u751f\uff08\u96f6\u9762\u3001\u4e00\u9762\u3001\u4e8c\u9762\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u5e73\u5b89\u79d1\u6280\u3011\u5e73\u5b89\u79d1\u6280java\u4e00\u9762 www.nowcoder.com/discuss/167\u2026 \u3010\u5e73\u5b89\u79d1\u6280\u3011\u5e73\u5b89\u79d1\u6280 \u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u5e73\u5b89\u79d1\u6280\u3011\u5e73\u5b89\u79d1\u6280\uff08\u4e0a\u6d77\uff09\u9762\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafWXG\u4e00\u9762\uff08\u7b80\u5386\u9762\uff1f\uff09\u5b9e\u4e60\u51c9\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u817e\u8baf\u3011\u53d1\u4e00\u6ce2\u9762\u7ecf\uff0c\uff0c\uff0c\u5c31\u5f53\u6512\u4eba\u54c1\u5427 www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u70ed\u4e4e\u4e4e\u7684\u817e\u8baf\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafCSIG\u5b9e\u4e60\u9762\u8bd5\uff08\u4e00\uff0c\u4e8c\u9762\uff09 www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafCSIG\u5b9e\u4e60\u9762\u8bd5\uff08\u4e09\u9762\u6bd4\u8f83\u5e95\u5c42\uff09 www.nowcoder.com/discuss/168\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u63d0\u524d\u6279\u51c9\u9762 www.nowcoder.com/discuss/168\u2026 \u3010\u7f51\u6613\u3011\u4e8c\u672c\u51fa\u8eab\u3001\u9006\u88ad\u7f51\u6613\u3001\u4e00\u8def\u5b64\u72ec\u3001\u4e00\u8def\u72c2\u6b22\uff01 www.nowcoder.com/discuss/167\u2026 \u3010\u643a\u7a0b\u3011\u643a\u7a0b\u6280\u672f\u4e00\u9762\uff08\u73b0\u573a\u9762\uff0c\u9762\u8bd5\u5b98\u4eba\u5f88\u597d\uff0c\u9762\u4e86\u4e00\u4e2a\u5c0f\u65f6\u3002\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u89c6\u9891\u4e09\u9762\u51c9\u7ecf\u3002\u3002\u4e09\u9762\u7f51\u7edc\u5dee\u5230\u65e0\u6cd5\u89c6\u9891\u3002\u3002 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282 JAVA\u540e\u53f0\u4e00\u9762\u51c9\u7ecf\uff08\u5b9e\u4e60\uff09 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e09\u9762\u9762\u7ecf\u6512\u4eba\u54c1 www.nowcoder.com/discuss/167\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u4e00\u4e8c\u4e09\u51c9\u9762... www.nowcoder.com/discuss/167\u2026 \u30104399\u30114399 Java\u7535\u9762 www.nowcoder.com/discuss/162\u2026 \u30101905\u7535\u5f71\u7f51\u30111905\u7535\u5f71\u7f51\u4e00\u9762\u95ee\u9898\uff0cjava\u5f00\u53d1 www.nowcoder.com/discuss/165\u2026 \u3010CVTE\u30113.8\uff082020\u5c4aCVTE\u540e\u53f0\u5b9e\u4e60\uff09\u4e00\u9762+\u4e8c\u9762 www.nowcoder.com/discuss/159\u2026 \u3010CVTE\u3011\u65b0\u51fa\u7089\u7684CVTE\u540e\u53f0\u9762\u7ecf\uff01\u4e00\u9762+\u4e8c\u9762 www.nowcoder.com/discuss/159\u2026 \u3010CVTE\u3011CVTE\u5b9e\u4e60\u4e00\u9762(Java\u540e\u53f0) www.nowcoder.com/discuss/160\u2026 \u3010CVTE\u3011CVTE\u5b9e\u4e60\u751f \u4e00\u9762 www.nowcoder.com/discuss/160\u2026 \u3010CVTE\u3011CVTE\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010CVTE\u3011cvte \u4e00\u9762+\u4e8c\u9762+\u7ec8\u9762 \u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010CVTE\u3011CVTE \u7535\u8bdd\u9762\u8bd5\u51c9\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010CVTE\u3011cvte WEB\u540e\u53f0\u5b9e\u4e60\u751f\uff08JAVA\uff09 www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011oppo java\u5f00\u53d1 \u540e\u7aef\u9762\u7ecf www.nowcoder.com/discuss/159\u2026 \u3010OPPO\u3011\u8bb0\u4e00\u6b21OPPO\u7684\u9762\u8bd5\u4e4b\u65c5 www.nowcoder.com/discuss/161\u2026 \u3010OPPO\u3011oppo\u3000\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010OPPO\u3011oppo\uff0c\u4e8c\u9762\uff0c\u51c9\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011OPPO \u540e\u53f0\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011oppo\uff0cjava\u540e\u7aef\uff0c\u4e00\u9762\uff0c\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010OPPO\u3011OPPO \u540e\u53f0\u4e00\u9762+\u4e8c\u9762 \u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010Shopee\u3011Shopee\u6df1\u5733 \u4e00\u9762\uff08\u89c6\u9891\uff09 3.18 www.nowcoder.com/discuss/164\u2026 \u3010VIVO\u3011vivo java\u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010VIVO\u3011\u65b0\u51fa\u7089\u7684\u5357\u4eacvivo\u4e00\u9762\u548chr\u9762\u3002 www.nowcoder.com/discuss/159\u2026 \u3010VIVO\u3011vivo \u5357\u4eac java\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010VIVO\u3011vivo \u6b66\u6c49 java \u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010VIVO\u3011Vivo\u8f6f\u5f00java\u65b9\u5411\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010VIVO\u3011\u3010vivo\u4e0a\u6d77\u7ad9\u3011JAVA\u8f6f\u4ef6\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010VIVO\u3011vivo \u897f\u5b89\u7ad9 Java\u5c97 \u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010VIVO\u3011VIVO JAVA\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f\u4e00\u9762\u51c9\u7ecf\uff0cjava\u7814\u53d1 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f \u4e00\u9762\uff08\u7b80\u5386\u9762\uff09 3.13 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u3011\u963f\u91ccJava\u4e00\u9762(\u6216\u8005\u7b80\u5386\u9762\uff1f) www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u83dc\u9e1f\u7f51\u7edcJava\u7b80\u5386\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u3011\u521a\u7ed3\u675f\u7684\u963f\u91cc\u7535\u9762\uff08\u51c9\uff09\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u30113.18 \u963f\u91cc\u83dc\u9e1f\u4e00\u9762\uff0830\u5206\u949f\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u963f\u91cc\u3011\u963f\u91cc\u9762\u7ecf\uff01\uff01\uff01 www.nowcoder.com/discuss/165\u2026 \u3010\u963f\u91cc\uff0c\u6469\u6839\u58eb\u4e39\u5229\uff0c\u987a\u4e30\u79d1\u6280\u3011\u8fdf\u5230\u7684\u79cb\u62db\u603b\u7ed3\u4e0e\u5c55\u671b\uff08\u5176\u5b9e\u6211\u4e5f\u662f\u62db\u8058\u8d34\uff09 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u3001\u817e\u8baf\u3001\u5934\u6761\u3011\u963f\u91cc\u817e\u8baf\u5934\u6761\u9762\u7ecf(0 offer\uff09\u6512\u70b9\u4eba\u54c1 www.nowcoder.com/discuss/163\u2026 \u3010\u963f\u91cc\u5df4\u5df4\u30112020\u6625\u62db\u5b9e\u4e60\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5 www.nowcoder.com/discuss/158\u2026 \u3010\u963f\u91cc\u5df4\u5df4\u3011\u83dc\u9e1f\u5185\u63a8\u5b9e\u4e60Java\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u767e\u5ea6\u3001\u8682\u8681\u91d1\u670d\u3001\u6ef4\u6ef4\u3011\u56db\u975e\u975e\u79d1\u73ed\u6e23\u672c\u7684\u5927\u4e09\u6e23\u6e23\u79cb\u62db+\u6625\u62db\u4e4b\u65c5 www.nowcoder.com/discuss/166\u2026 \u3010\u767e\u4e16\u7269\u6d41\u3011\u7ee7\u7eed\u5199\u81ea\u5df1\u7684\u51c9\u7ecf\u4e86(\u767e\u4e16\u9762\u7ecf) www.nowcoder.com/discuss/162\u2026 \u3010\u5317\u4eac\u6d77\u81f4\u3011\u5317\u4eac\u6d77\u81f4\u4e00\u4e8c\u9762+offer www.nowcoder.com/discuss/165\u2026 \u3010\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u7f51\u7edc\u4e00\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u83dc\u9e1f\u3011\u963f\u91cc\u83dc\u9e1f\u5b9e\u4e60\u751f\u5185\u63a8\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u83dc\u9e1f\u3011\u83dc\u9e1f\u7f51\u7edc\u7535\u8bdd\u9762\uff08\u51c9\u9762\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u83dc\u9e1f\u3001\u8fdc\u666f\u3011\u83dc\u9e1f1\u9762\u51c9\u7ecf\u3001\u8fdc\u666f1\u9762 \u5b9e\u4e60 java\u5f00\u53d1 www.nowcoder.com/discuss/163\u2026 \u3010\u83dc\u9e1f\u7f51\u7edc\u3011\u83dc\u9e1f\u5185\u63a8\u5b9e\u4e60Java\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u6ef4\u6ef4\u3011\u6ef4\u6ef4\u5730\u56fe\u4e8b\u4e1a\u7fa4 \u5b9e\u4e60\u751f \u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u7f14\u5b89\u79d1\u6280\u3001\u4e07\u5f97\u301119 \u6625\u62db\u5c0f\u516c\u53f8\u9762\u7ecf\uff0c\u5e0c\u671b\u80fd\u5e2e\u52a9\u5230\u5927\u5bb6 www.nowcoder.com/discuss/162\u2026 \u3010\u591a\u76ca\u7f51\u7edc\u3011\u591a\u76ca\u9762\u8bd5 www.nowcoder.com/discuss/159\u2026 \u3010\u591a\u76ca\u7f51\u7edc\u3011\u591a\u76caJava\u89c6\u9891\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u591a\u76ca\u7f51\u7edc\u3011\u591a\u76ca\u7f51\u7edc\u89c6\u9891\u9762\u8bd5 www.nowcoder.com/discuss/162\u2026 \u3010\u864e\u7259\u3011\u864e\u7259\u76f4\u64ad\u9762\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u4eac\u4e1c\u3011\u6625\u62db\u63d0\u524d\u6279\u5b9e\u4e60\u9762\u7ecf \u4eac\u4e1c www.nowcoder.com/discuss/159\u2026 \u3010\u6d6a\u6f6e\u3001OPPO\u3001\u4e2d\u79fb\u5728\u7ebf\u3001TCL\u3011\u8003\u7814\u5931\u8d25\uff0c\u6625\u62db\u7ecf\u5386\uff0c\u7b97\u534a\u4e2a\u9762\u7ecf\u5427 www.nowcoder.com/discuss/162\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u6625\u62db\u7684\u7b2c\u4e00\u4e2a\u9762\u8bd5\uff0c\u8682\u8681\u91d1\u670d www.nowcoder.com/discuss/159\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u963f\u91cc\u5df4\u5df4-\u8682\u8681\u9762\u7ecf\uff08\u5206\u4eab\u6512\u4eba\u54c1\uff01\uff09 www.nowcoder.com/discuss/162\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u3010\u963f\u91cc\u8682\u8681\u91d1\u670d\u4e0a\u6d77\u4e00\u9762\u3011\u4e00\u9762\u7535\u9762\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u3010\u963f\u91cc\u8682\u8681\u91d1\u670d\u4e0a\u6d77\u4e00\u9762\u8865\u5145\u9762\u3011\u4e00\u9762\u7535\u9762\u8865\u5145\u9762\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u91d1\u670djava\u7814\u53d1\u7535\u8bdd\u9762\uff0c\u51c9\u51c9 www.nowcoder.com/discuss/165\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u8682\u8681\u4e00\u9762 \u6628\u5929\u65e9\u4e0a\u9762\u7684 www.nowcoder.com/discuss/165\u2026 \u3010\u8682\u8681\u91d1\u670d\u3011\u963f\u91cc\u8682\u8681\u91d1\u670d1\u9762\u9762\u7ecf www.nowcoder.com/discuss/165\u2026 \u3010\u6469\u6839\u58eb\u4e39\u5229\u3011\u6469\u6839\u8f6f\u4ef6\u5f00\u53d1\u5b9e\u4e60\u9762\u8bd5\u2026\u2026 www.nowcoder.com/discuss/163\u2026 \u3010\u67e0\u6aac\u5fae\u8da3\u3011\u67e0\u6aac\u5fae\u8da3\u6821\u62db\u7b14\u8bd5\u9898\u76ee\u5206\u4eab www.nowcoder.com/discuss/159\u2026 \u3010\u62fc\u591a\u591a\u3011\u62fc\u591a\u591a \u57fa\u7840\u67b6\u6784 \u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31java\u6e38\u620f\u5f00\u53d1\u9762\u8bd5,\u611f\u89c9\u6709\u70b9\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31 \u6625\u62dbJava\u6e38\u620f \u4e09\u9762\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31\u4e00\u9762 13mins www.nowcoder.com/discuss/163\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31java\u5f00\u53d1\u7535\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31java\u6e38\u620f\u5f00\u53d1\u9762\u8bd5,\u611f\u89c9\u6709\u70b9\u51c9 www.nowcoder.com/discuss/162\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\u7f51\u7ad9\u5de5\u7a0b\u5e08\uff08java\u5e73\u53f0\u5de5\u7a0b\u5e08\uff09\u9762\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u301137\u4e92\u5a31\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\uff08JAVA\uff09\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/164\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011Java\u4e09\u4e03\u4e92\u5a31\u4e24\u8f6e\u6280\u672f\u9762\u52a0HR\u9762\u540e\uff0c\u7b49\u901a\u77e5 www.nowcoder.com/discuss/166\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31Java\u6e38\u620f\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/165\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31java\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/166\u2026 \u3010\u4e09\u4e03\u4e92\u5a31\u3011\u4e09\u4e03\u4e92\u5a31\u7f51\u7ad9\u5de5\u7a0b\u5e08\u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/166\u2026 \u3010\u5546\u6c64\uff0c\u4eca\u65e5\u5934\u6761\uff0c\u5fae\u535a\uff0c\u6d77\u5eb7\uff0c360\u3011JAVA\u5b9e\u4e60\u9762\u7ecf\uff08\u5546\u6c64\uff0c\u4eca\u65e5\u5934\u6761\uff0c\u5fae\u535a\uff0c\u6d77\u5eb7\uff0c360\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u4e0a\u6d77\u94f6\u884c\u3011\u4e0a\u6d77\u94f6\u884cit\u5f00\u53d1\u5c97\u9762\u8bd5 www.nowcoder.com/discuss/163\u2026 \u3010\u6df1\u4fe1\u670d\u3001VIVO\u3011\u4e00\u4e2a\u83dc\u9e21\u7684\u6625\u62db\u75db\u82e6\u5386\u7a0b\uff08\u5e0c\u671b\u5bf9\u8fd8\u5728\u6821\u56ed\u7684\u4f60\u4eec\u6709\u7528\uff09 www.nowcoder.com/discuss/160\u2026 \u3010\u6df1\u5733\u519c\u5546\u884c\u3011\u6df1\u5733\u519c\u5546\u884c\u7b14\u8bd5\u9762\u7ecf www.nowcoder.com/discuss/159\u2026 \u3010\u795e\u7b56\u6570\u636e\u3011\u795e\u7b56\u6570\u636e\u540e\u53f0\u5f00\u53d1\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u601d\u6770\u3011\u601d\u6770\u5b9e\u4e60\u751f\u9762\u8bd5 www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6691\u5047\u5b9e\u4e60\u9762\u8bd5___\u51c9\u51c9 www.nowcoder.com/discuss/159\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u63d0\u524d\u627920\u5c4a\u5b9e\u4e60\u751f\u9762\u7ecf www.nowcoder.com/discuss/159\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u4e00\u9762\u7535\u8bdd\u9762\uff0828\u5206\u949f\uff09 www.nowcoder.com/discuss/159\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u4e00\u9762\u4e8c\u9762\u4e09\u9762 www.nowcoder.com/discuss/160\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf java\u540e\u53f0 \u4e00\u9762 www.nowcoder.com/discuss/160\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf java\u540e\u53f0 \u4e00\u9762 www.nowcoder.com/discuss/160\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6df1\u5733\u7535\u8bdd\u4e00\u9762\u51c9\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u817e\u8baf\u301120190312 \u817e\u8baf java\u540e\u7aef \u7535\u8bdd\u4e00\u9762 www.nowcoder.com/discuss/161\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u4e00\u9762\uff0c\u7109\u77e5\u559c\u51c9 www.nowcoder.com/discuss/161\u2026 \u3010\u817e\u8baf\u301120190314 \u5206\u4eab\u817e\u8baf \u4e8c\u9762 \u51c9\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0 \u4e00\u9762 \u89c6\u9891\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u8bb0\u4e00\u6b21\u7384\u5b66\u7684\u817e\u8baf\u540e\u53f0\u63d0\u524d\u6279\u9762\u8bd5 www.nowcoder.com/discuss/163\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafjava\u540e\u53f0\u4e00\u9762 www.nowcoder.com/discuss/164\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u6691\u671f\u5b9e\u4e60\u521d\u9762\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u540e\u53f0\u590d\u8bd5(\u51c9\u7ecf) www.nowcoder.com/discuss/166\u2026 \u3010\u817e\u8baf\u3011\u817e\u8bafjava\u4e8c\u9762\uff08\u51c9\u534a\u6512\u4eba\u54c1\uff09 www.nowcoder.com/discuss/165\u2026 \u3010\u817e\u8baf\u30112020\u5c4a\u817e\u8baf\u6691\u671f\u5b9e\u4e60Java\u7814\u53d1\u4e00\u4e8c\u9762 www.nowcoder.com/discuss/166\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\u4e8c\u9762 \u83dc\u7684\u771f\u5b9e\u3002\u3002 www.nowcoder.com/discuss/166\u2026 \u3010\u817e\u8baf\u3011\u817e\u8baf\uff08\u4e09\u9762\u3001\u9762\u59d4\u4f1a\uff1f\uff09 www.nowcoder.com/discuss/166\u2026 \u3010\u5b8c\u7f8e\u4e16\u754c\u3011\u5b8c\u7f8e\u540e\u53f0\u7814\u53d1\u4e8c\u9762,\u9879\u76ee\u8bf7\u6559 www.nowcoder.com/discuss/163\u2026 \u3010\u7f51\u6613\u3011\u7f51\u6613\u6709\u9053\u4e00\u9762\u9762\u7ecf\uff082019\u5c4a\u6625\u62db\uff09 www.nowcoder.com/discuss/162\u2026 \u3010\u7f51\u6613\u3011\u7f51\u6613\u6e38\u620f\u4e92\u5a31 \u540e\u7aef\u5f00\u53d1\u5b9e\u4e60 \u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/165\u2026 \u3010\u4e00\u52a0\u3011\u4e00\u52a0\u4e24\u9762\u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u4e00\u52a0\u3011\u4e00\u52a0Java\u6b66\u6c49\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010\u82f1\u7279\u5c14\u3011intell\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/160\u2026 \u3010\u7528\u53cb\u3011\u7528\u53cb\u51c9\u7ecf www.nowcoder.com/discuss/163\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u4e8c\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u4e8c\u9762 www.nowcoder.com/discuss/163\u2026 \u3010\u6709\u8d5e\u3011\u6709\u8d5e\u4e09\u9762+hr www.nowcoder.com/discuss/165\u2026 \u3010\u8fdc\u666f\u80fd\u6e90\u3011\u8fdc\u666f\u80fd\u6e90java\u5b9e\u4e60\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/164\u2026 \u3010\u8fdc\u666f\u80fd\u6e90\u3011\u8fdc\u666f\u80fd\u6e90 \u4e00\u9762\uff08\u7535\u9762\uff09 3.13 www.nowcoder.com/discuss/164\u2026 \u3010\u62db\u884c\u3011\u65b0\u51fa\u7089\u7684\u62db\u884c\u9762\u7ecf\uff01\uff01\uff01Java\u540e\u7aef www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u7f51\u7edc\u79d1\u6280\u7535\u8bdd\u9762\u8bd5 www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u9762\u8bd5 www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\uff08JAVA\uff09\u786c\u6838\u7535\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u89c6\u9891\u9762\u8bd5\uff08\u6821\u62db\uff09 www.nowcoder.com/discuss/161\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6java\u8f6f\u5f00\u7535\u9762+\u4e09\u9762\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u7f51\u7edc\u79d1\u6280 Java\u9762\u7ecf\uff08\u6210\u90fd\uff09 www.nowcoder.com/discuss/164\u2026 \u3010\u62db\u94f6\u3011\u62db\u94f6\u7f51\u7edc\u9762\u8bd5\u9898\u603b\u7ed3 www.nowcoder.com/discuss/166\u2026 \u3010\u62db\u94f6\u7f51\u7edc\u3011\u62db\u94f6java\u8f6f\u5f00\u7535\u9762+\u4e09\u9762\u9762\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u62db\u94f6\u7f51\u7edc\u3011\u62db\u94f6\u7f51\u7edc\u79d1\u6280\u6625\u62db\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u62db\u94f6\u7f51\u7edc\u3011\u62db\u94f6\u7f51\u7edc\u9762\u7ecf www.nowcoder.com/discuss/162\u2026 \u3010\u73cd\u7231\u7f51\u3011\u56db\u975e\u83dc\u72d7\u7684\u73cd\u7231\u7f51 Java \u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u73cd\u7231\u7f51\u3011\u73cd\u7231\u7f51\u4e00\u9762\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010\u73cd\u7231\u7f51\u3011\u73cd\u7231\u7f51java\u540e\u53f0\u9762\u7ecf www.nowcoder.com/discuss/160\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u4e00\u9762\u9762\u8bd5\u7ecf\u9a8c www.nowcoder.com/discuss/158\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8 \u540e\u7aef\u9762\u7ecf 18\u5e74\u5e95 www.nowcoder.com/discuss/158\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8java\u540e\u53f0\u5b9e\u4e60\u7684\u4e00\u9762\u4e8c\u9762\u9762\u7ecf www.nowcoder.com/discuss/158\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u8bb0\u4e00\u6b21\u5b57\u8282\u8df3\u52a8\u540e\u7aef\u5f00\u53d1\uff08\u4e0a\u6d77\uff09\u4e00\u9762 www.nowcoder.com/discuss/159\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5b57\u8282\u8df3\u52a8\u4e00\u4e8c\u9762\u51c9\u7ecf www.nowcoder.com/discuss/161\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u5934\u6761\u540e\u7aef\u5f00\u53d1\u5b9e\u4e60\u5c97 \u4e09\u8f6e\u9762\u7ecf\uff08Offer) www.nowcoder.com/discuss/163\u2026 \u3010\u5b57\u8282\u8df3\u52a8\u3011\u6296\u97f3\u540e\u53f0\u7814\u53d1\u5b9e\u4e60\u4e00\u9762 www.nowcoder.com/discuss/166\u2026 \u3010CVTE\u3001\u83dc\u9e1f\u7f51\u7edc\u3011cvte\u4e00\u9762\u548c\u83dc\u9e1f\u5185\u63a8\u7535\u8bdd\u7a81\u51fb www.nowcoder.com/discuss/160\u2026 \u3010OPPO\u3001VIVO\u3001\u62db\u94f6\u3011\u5206\u4eab\u4e00\u4e0b\u81ea\u5df1\u7684\u6625\u62db\u7ecf\u9a8c www.nowcoder.com/discuss/166\u2026 \u3010vivo\u3001oppo\u3001\u73cd\u7231\u7f51\u3001\u8001\u864e\u8bc1\u5238\u3011vivo oppo \u73cd\u7231\u7f51 \u8001\u864e\u8bc1\u5238\u9762\u7ecf java\u540e\u7aef www.nowcoder.com/discuss/161\u2026","title":"Java"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/","text":"\u9ad8\u9891\u667a\u529b\u9898 \u00b6 1. \u9ad8\u697c\u6254\u9e21\u86cb\u95ee\u9898 \u00b6 \u6709\u4e00\u680b\u697c\u5171 **100** \u5c42\uff0c\u4e00\u4e2a\u9e21\u86cb\u4ece\u7b2c **N** \u5c42\u53ca\u4ee5\u4e0a\u7684\u697c\u5c42\u843d\u4e0b\u6765\u4f1a\u6454\u7834\uff0c \u5728\u7b2c **N** \u5c42\u4ee5\u4e0b\u7684\u697c\u5c42\u843d\u4e0b\u4e0d\u4f1a\u6454\u7834\u3002\u7ed9\u4f60 **2** \u4e2a\u9e21\u86cb\uff0c\u5982\u4f55\u7528\u6700\u5c11\u7684\u5c1d\u8bd5\u6b21\u6570\uff0c\u6d4b\u8bd5\u51fa\u9e21\u86cb\u4e0d\u4f1a\u6454\u788e\u7684\u4e34\u754c\u70b9\uff1f \u9996\u5148\u8981\u8bf4\u660e\u7684\u662f\u8fd9\u9053\u9898\u4f60\u8981\u662f\u4e00\u4e0a\u6765\u5c31\u8bf4\u51fa\u6b63\u786e\u7b54\u6848\uff0c\u90a3\u8bf4\u660e\u4f60\u7684\u667a\u5546\u4e0d\u662f\u8d85\u8fc7160\u5c31\u662f\u4f60\u505a\u8fc7\u8fd9\u9898\u3002 \u6240\u4ee5\u5efa\u8bae\u4f60\u5faa\u5e8f\u6e10\u8fdb\u7684\u56de\u7b54\uff0c\u4e00\u4e0a\u6765\u5c31\u8bf4\u6700\u4f18\u89e3\u53ef\u80fd\u7ed3\u679c\u4e0d\u4f1a\u8ba9\u9762\u8bd5\u5b98\u6ee1\u610f\u3002 1. \u66b4\u529b\u6cd5 \u4ece 1 \u5230 100 \uff0c\u4e00\u5c42\u4e00\u5c42\u8bd5\u3002\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u6254 100 \u6b21\u3002 \u8fd9\u4e2a\u529e\u6cd5\u592a\u8822\u4e86\uff0c\u5b8c\u5168\u7528\u4e0d\u4e0a\u4e24\u4e2a\u9e21\u86cb\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4e0d\u5efa\u8bae\u56de\u7b54\u8fd9\u4e2a\u65b9\u6cd5\u3002 2. \u4e8c\u5206\u6cd5 \u91c7\u7528\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\uff0c\u628a\u9e21\u86cb\u4ece\u4e00\u534a\u697c\u5c42\uff08 50 \u5c42\uff09\u5f80\u4e0b\u6254\u3002 \u5982\u679c\u7b2c\u4e00\u679a\u9e21\u86cb\uff0c\u5728 50 \u5c42\u788e\u4e86\uff0c\u7b2c\u4e8c\u679a\u9e21\u86cb\uff0c\u5c31\u4ece\u7b2c 1 \u5c42\u5f00\u59cb\u6254\uff0c\u4e00\u5c42\u4e00\u5c42\u589e\u957f\uff0c\u4e00\u76f4\u6254\u5230\u7b2c 49 \u5c42\u3002 \u5982\u679c\u7b2c\u4e00\u679a\u9e21\u86cb\u5728 50 \u5c42\u6ca1\u788e\uff0c\u5219\u7ee7\u7eed\u4f7f\u7528\u4e8c\u5206\u6cd5\uff0c\u5728\u5269\u4f59\u697c\u5c42\u7684\u4e00\u534a\uff08 75 \u5c42\uff09\u5f80\u4e0b\u6254...... \u8fd9\u4e2a\u65b9\u6cd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5c1d\u8bd5 50 \u6b21\u3002 3. \u5747\u5300\u6cd5 \u5982\u4f55\u8ba9\u7b2c\u4e00\u679a\u9e21\u86cb\u548c\u7b2c\u4e8c\u679a\u9e21\u86cb\u7684\u5c1d\u8bd5\u6b21\u6570\uff0c\u5c3d\u53ef\u80fd\u5747\u8861\u5462\uff1f \u5f88\u7b80\u5355\uff0c\u505a\u4e00\u4e2a\u5e73\u65b9\u6839\u8fd0\u7b97\uff0c 100 \u7684\u5e73\u65b9\u6839\u662f 10 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c1d\u8bd5\u6bcf 10 \u5c42\u6254\u4e00\u6b21\uff0c\u7b2c\u4e00\u6b21\u4ece 10 \u5c42\u6254\uff0c\u7b2c\u4e8c\u6b21\u4ece 20 \u5c42\u6254\uff0c\u7b2c\u4e09\u6b21\u4ece 30 \u5c42......\u4e00\u76f4\u6254\u5230 100 \u5c42\u3002 \u8fd9\u6837\u7684\u6700\u597d\u60c5\u51b5\u662f\u5728\u7b2c 10 \u5c42\u788e\u6389\uff0c\u5c1d\u8bd5\u6b21\u6570\u4e3a 1 + 9 = 10 \u6b21\u3002 \u6700\u574f\u7684\u60c5\u51b5\u662f\u5728\u7b2c 100 \u5c42\u788e\u6389\uff0c\u5c1d\u8bd5\u6b21\u6570\u4e3a 10 + 9 = 19 \u6b21\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 15 \u5c42\u5f00\u59cb\u6254\uff0c\u63a5\u4e0b\u6765\u4ece 25 \u5c42\u3001 35 \u5c42\u6254......\u4e00\u76f4\u5230 95 \u5c42\u3002 \u8fd9\u6837\u6700\u574f\u60c5\u51b5\u662f\u5728\u7b2c 95 \u5c42\u788e\u6389\uff0c\u5c1d\u8bd5\u6b21\u6570\u4e3a 9 + 9 = 18 \u6b21\u3002 4. \u6700\u4f18\u89e3\u6cd5 \u6700\u4f18\u89e3\u6cd5\u662f\u53cd\u5411\u601d\u8003\u7684\u7ecf\u5178\uff1a\u5982\u679c\u6700\u4f18\u89e3\u6cd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u6254 X \u6b21\uff0c\u90a3\u7b2c\u4e00\u6b21\u5728\u7b2c\u51e0\u5c42\u6254\u6700\u597d\u5462\uff1f \u7b54\u6848\u662f\uff1a\u4ece X \u5c42\u6254 \u5047\u8bbe\u6700\u4f18\u7684\u5c1d\u8bd5\u6b21\u6570\u7684 x \u6b21\uff0c\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u6b21\u6254\u5c31\u8981\u9009\u62e9\u7b2c x \u5c42\u5462\uff1f \u8fd9\u91cc\u7684\u89e3\u91ca\u4f1a\u6709\u4e9b\u70e7\u8111\uff0c\u8bf7\u5c0f\u4f19\u4f34\u4eec\u5750\u7a33\u6276\u597d\uff1a \u5047\u8bbe\u7b2c\u4e00\u6b21\u6254\u5728\u7b2c x+1 \u5c42\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u9e21\u86cb\u788e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u9e21\u86cb\u53ea\u80fd\u4ece\u7b2c1\u5c42\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6254\uff0c\u4e00\u76f4\u6254\u5230\u7b2cx\u5c42\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u603b\u5171\u5c1d\u8bd5\u4e86 x+1 \u6b21\uff0c\u548c\u5047\u8bbe\u5c1d\u8bd5 x \u6b21\u76f8\u6096\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u7b2c\u4e00\u6b21\u6254\u7684\u697c\u5c42\u5fc5\u987b\u5c0f\u4e8e x+1 \u5c42\u3002 \u5047\u8bbe\u7b2c\u4e00\u6b21\u6254\u5728\u7b2c x-1 \u5c42\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u9e21\u86cb\u788e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u9e21\u86cb\u53ea\u80fd\u4ece\u7b2c 1 \u5c42\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6254\uff0c\u4e00\u76f4\u6254\u5230\u7b2c x-2 \u5c42\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u603b\u5171\u5c1d\u8bd5\u4e86 x-2+1 = x-1 \u6b21\uff0c\u867d\u7136\u6ca1\u6709\u8d85\u51fa\u5047\u8bbe\u6b21\u6570\uff0c\u4f46\u4f3c\u4e4e\u6709\u4e9b\u8fc7\u4e8e\u4fdd\u5b88\u3002 \u5047\u8bbe\u7b2c\u4e00\u6b21\u6254\u5728\u7b2c x \u5c42\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u9e21\u86cb\u788e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u9e21\u86cb\u53ea\u80fd\u4ece\u7b2c 1 \u5c42\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6254\uff0c\u4e00\u76f4\u6254\u5230\u7b2c x-1 \u5c42\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u603b\u5171\u5c1d\u8bd5\u4e86 x-1+1 = x \u6b21\uff0c\u521a\u521a\u597d\u6ca1\u6709\u8d85\u51fa\u5047\u8bbe\u6b21\u6570\u3002 \u56e0\u6b64\uff0c\u8981\u60f3\u5c3d\u91cf\u697c\u5c42\u8de8\u5ea6\u5927\u4e00\u4e9b\uff0c\u53c8\u8981\u4fdd\u8bc1\u4e0d\u8d85\u8fc7\u5047\u8bbe\u7684\u5c1d\u8bd5\u6b21\u6570x\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u6254\u9e21\u86cb\u7684\u6700\u4f18\u9009\u62e9\u5c31\u662f\u7b2c x \u5c42\u3002 \u90a3\u4e48\u7b97\u6700\u574f\u60c5\u51b5\uff0c\u7b2c\u4e8c\u6b21\u4f60\u53ea\u5269\u4e0b x-1 \u6b21\u673a\u4f1a\uff0c\u6309\u7167\u4e0a\u9762\u7684\u8bf4\u6cd5\uff0c\u4f60\u7b2c\u4e8c\u6b21\u5c1d\u8bd5\u7684\u4f4d\u7f6e\u5fc5\u7136\u662f X +\uff08X-1\uff09 \uff1b \u4ee5\u6b64\u7c7b\u63a8\u6211\u4eec\u53ef\u5f97\uff1a x + (x-1) + (x-2) + ... + 1 = 100 \u8fd9\u4e2a\u65b9\u7a0b\u4e0d\u96be\u7406\u89e3\uff1a \u5de6\u8fb9\u7684\u591a\u9879\u5f0f\u662f\u5404\u6b21\u6254\u9e21\u86cb\u7684\u697c\u5c42\u8de8\u5ea6\u4e4b\u548c\u3002\u7531\u4e8e\u5047\u8bbe\u5c1d\u8bd5 x \u6b21\uff0c\u6240\u4ee5\u8fd9\u4e2a\u591a\u9879\u5f0f\u5171\u6709 x \u9879\u3002 \u53f3\u8fb9\u662f\u603b\u7684\u697c\u5c42\u6570 100 \u3002 \u4e0b\u9762\u6211\u4eec\u6765\u89e3\u8fd9\u4e2a\u65b9\u7a0b\uff1a x + (x-1) + (x-2) + ... + 1 = 100 \u8f6c\u5316\u4e3a (x+1)*x/2 = 100 \u6700\u7ec8x\u5411\u4e0a\u53d6\u6574\uff0c\u5f97\u5230 x = 14 \u56e0\u6b64\uff0c\u6700\u4f18\u89e3\u5728\u6700\u574f\u60c5\u51b5\u7684\u5c1d\u8bd5\u6b21\u6570\u662f 14 \u6b21\uff0c\u7b2c\u4e00\u6b21\u6254\u9e21\u86cb\u7684\u697c\u5c42\u4e5f\u662f 14 \u5c42\u3002 \u6700\u540e\uff0c\u8ba9\u6211\u4eec\u628a\u7b2c\u4e00\u4e2a\u9e21\u86cb\u6ca1\u788e\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u5c1d\u8bd5\u7684\u697c\u5c42\u6570\u5b8c\u6574\u5217\u4e3e\u51fa\u6765\uff1a 14\uff0c27\uff0c 39\uff0c 50\uff0c 60\uff0c 69\uff0c 77\uff0c 84\uff0c 90\uff0c 95\uff0c 99\uff0c 100 \u4e3e\u4e2a\u6817\u5b50\u9a8c\u8bc1\u4e0b\uff1a \u5047\u5982\u9e21\u86cb\u4e0d\u4f1a\u788e\u7684\u4e34\u754c\u70b9\u662f 65 \u5c42\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u9e21\u86cb\u6254\u51fa\u7684\u697c\u5c42\u662f 14\uff0c27\uff0c50\uff0c60\uff0c69 \u3002\u8fd9\u65f6\u5019\u556a\u7684\u4e00\u58f0\u788e\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u9e21\u86cb\u7ee7\u7eed\uff0c\u4ece 61 \u5c42\u5f00\u59cb\uff0c 61\uff0c62\uff0c63\uff0c64\uff0c65\uff0c66 \uff0c\u556a\u7684\u4e00\u58f0\u788e\u4e86\u3002 \u56e0\u6b64\u5f97\u5230\u4e0d\u4f1a\u788e\u7684\u4e34\u754c\u70b9 65 \u5c42\uff0c\u603b\u5c1d\u8bd5\u6b21\u6570\u662f 6 + 6 = 12 < 14 \u3002 \u4e0b\u9762\u662f\u6211\u4e2a\u4eba\u7684\u7406\u89e3\uff1a\u8fd9\u4e2a\u66f4\u50cf\u662f\u4f18\u5316\u7248\u7684\u5747\u5300\u6cd5\uff0c\u5747\u5300\u6cd5\u8ba9\u4f60\u7b2c\u4e8c\u6b21\u5c1d\u8bd5\u4e0d\u8d85\u8fc7 10 \uff0c\u4f46\u662f\u7b2c\u4e00\u6b21\u7684\u4f4d\u7f6e\u65e0\u6cd5\u4fdd\u8bc1\uff08\u6700\u591a\u8981 9 \u6b21\uff0c\u6700\u597d\u4e00\u6b21\uff09\uff0c\u8fd9\u4e2a\u7531\u4e8e\u6bcf\u591a\u4e00\u6b21\u5c1d\u8bd5\uff0c\u697c\u5c42\u95f4\u9694\u5c31 -1 \uff0c\u6700\u7ec8\u4f7f\u5f97\u7b2c\u4e00\u6b21\u4e0e\u7b2c\u4e8c\u6b21\u7684\u548c\u5b8c\u5168\u5747\u5300\uff08\u6700\u5dee\u60c5\u51b5\uff09\u3002 \u4f46\u662f\u6838\u5fc3\u601d\u8def\u662f\u9006\u5411\u601d\u8003\uff0c\u56e0\u4e3a\u5373\u4f7f\u7406\u89e3\u4e86\u9700\u8981\u4e24\u6b21\u7684\u548c\u5747\u5300\u4e5f\u5f88\u96be\u5f97\u5230\u7b2c\u4e00\u6b21\u8981\u5728\u54ea\u5c42\u697c\u6254\u3002 \u4e00\u65e6\u7406\u89e3\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff0c\u591a\u5c11\u5c42\u697c\u4f60\u90fd\u4e0d\u4f1a\u6015\u5566~ 2. \u627e\u781d\u7801\u95ee\u9898 \u00b6 \u6709\u4e00\u4e2a\u5929\u5e73\uff0c\u4e5d\u4e2a\u781d\u7801\uff0c\u4e00\u4e2a\u8f7b\u4e00\u4e9b\uff0c\u7528\u5929\u5e73\u81f3\u5c11\u51e0\u6b21\u80fd\u627e\u5230\u8f7b\u7684\uff1f \u4e09\u5206\u6cd5\u3002 \u7b54\u6848\uff1a2\u6b21\u3002 \u5206\u4e09\u4efd\uff0c\u4e24\u4efd\u6bd4\u8f83\uff0c\u7b2c\u4e09\u4efd\u653e\u4e00\u8fb9\uff0c\u5982\u679c\u4e24\u4efd\u76f8\u7b49\u8d28\u91cf\uff0c\u5219\u8bf4\u660e\u8f7b\u7684\u5728\u7b2c\u4e09\u4efd\u3002 \u4e0d\u8bba\u5982\u4f55\uff0c\u53ef\u4ee5\u786e\u5b9a\u8f7b\u7684\u781d\u7801\u5728\u67d0\u4e00\u4efd\u7684\u4e09\u4e2a\u4e4b\u4e2d\uff0c\u518d\u7528\u4e00\u6b21\u4e09\u5206\u6cd5\uff0c\u5373\u53ef\u786e\u5b9a\u3002 3. \u627e\u73bb\u7483\u7403\u95ee\u9898 \u00b6 \u6709\u5341\u7ec4\u73bb\u7483\u7403\uff0c\u6bcf\u7ec4\u5341\u4e2a\uff0c\u6bcf\u4e2a\u73bb\u7483\u7403\u91cd **10** g\uff0c\u4f46\u5176\u4e2d\u6709\u4e00\u7ec4\u73bb\u7483\u7403\u6bcf\u4e2a\u53ea\u6709 **9** g\uff0c\u7ed9\u4f60\u4e00\u4e2a\u80fd\u663e\u793a\u514b\u6570\u7684\u79e4\uff0c\u95ee\u4f60\u6700\u5c11\u51e0\u6b21\u80fd\u627e\u5230\u8f7b\u7684\u90a3\u4e00\u7ec4\u781d\u7801\uff1f \u5c06\u5341\u7ec4\u73bb\u7483\u73e0\u7f16\u53f7 1~10 \uff0c\u7136\u540e\u7b2c\u4e00\u7ec4\u62ff\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u7ec4\u62ff\u4e24\u4e2a\u4ee5\u6b64\u7c7b\u63a8...\u7b2c\u5341\u7ec4\u62ff\u5341\u4e2a \u5c06\u8fd9\u4e9b\u73bb\u7483\u73e0\u4e00\u8d77\u653e\u5230\u79e4\u4e0a\u79f0\u51fa\u514b\u6570 x \uff0c \u5219 y = 1*10 + 2*10 + 3*10 + ... + 10 * 10 - x \u7b49\u4ef7\u4e8e y = (1 + 2 + 3 + ... + 10) * 10 - x = 550 - x \u7b2c y \u7ec4\u5c31\u662f\u8f7b\u7684\u90a3\u7ec4\u3002 4. \u6bd2\u836f\u95ee\u9898 \u00b6 **1000** \u74f6\u6c34\uff0c\u5176\u4e2d\u6709\u4e00\u74f6\u53ef\u4ee5\u65e0\u9650\u7a00\u91ca\u7684\u6bd2\u836f\uff0c\u5c0f\u767d\u9f20\u559d\u4e86\u6bd2\u6c34\u5c31\u4f1a\u6b7b\uff08\u4e0d\u8bba\u542b\u91cf\u591a\u4f4e\uff09\u3002\u8981\u5feb\u901f\u627e\u51fa\u54ea\u4e00\u74f6\u6709\u6bd2\uff0c\u9700\u8981\u51e0\u53ea\u5c0f\u767d\u9f20\uff1f \u4e8c\u8fdb\u5236\u601d\u8def\u3002 \u7b54\uff1a 2^10 = 1024 > 1000 \uff0c\u56e0\u6b64 10 \u53ea\u5c0f\u767d\u9f20\u5373\u53ef\u3002 \u7ed9 1000 \u74f6\u6c34\u6309\u7167\u4e8c\u8fdb\u5236\u7f16\u53f7\uff0c\u6bd4\u5982 3 \u53f7\u7f16\u4e3a 00000 00011 \uff0c\u62ff 10 \u4e2a\u7897\uff0c\u5bf9\u5e94 10 \u4f4d\uff0c\u5bf9\u4e8e 3 \u53f7\u6c34\u6765\u8bf4\uff0c\u6700\u540e\u4e24\u4f4d\u662f 1 \uff0c\u5219\u628a\u6c34\u6df7\u5408\u8fdb\u6700\u540e\u4e24\u4e2a\u7897\u4e2d\u3002 \u6700\u7ec8\u628a 10 \u7897\u6c34\u7ed9\u5bf9\u5e94\u7684\u5c0f\u767d\u9f20\u559d\uff0c\u6839\u636e\u6700\u540e\u5c0f\u767d\u9f20\u6b7b\u4ea1\u7684\u60c5\u51b5\uff08\u6b7b\u5373\u4e3a 1 \uff0c\u6d3b\u5373\u4e3a 0 \uff09\uff0c\u5373\u53ef\u786e\u5b9a\u51fa\u6709\u6bd2\u7684\u90a3\u7897\u6c34\u3002 5. \u751f\u6210\u968f\u673a\u6570\u95ee\u9898 \u00b6 \u7ed9\u5b9a\u751f\u6210 **1** \u5230 **5** \u7684\u968f\u673a\u6570 **Rand5()** \uff0c\u5982\u4f55\u5f97\u5230\u751f\u6210 **1** \u5230 **7** \u7684\u968f\u673a\u6570\u51fd\u6570 **Rand7()** \uff1f \u4f7f\u7528 rand5() \u751f\u6210 rand7() // \u9700\u8981\u968f\u673a\u5f97\u5230 1-7 public static int rand7 ( ) { while ( true ) { int row , col , idx ; // rand5() \u8fd4\u56de 1-5 row = rand5 ( ) ; // 5 * 5 = 25, \u8bbe\u60f3\u4e00\u4e2a 5*5 \u7684\u77e9\u9635 col = rand5 ( ) ; // \u7136\u540e\u627e\u5230\u5c0f\u4e8e25\u7684\uff0c7\u7684\u6700\u5927\u500d\u657021 idx = col + ( row - 1 ) * 5 ; if ( idx <= 21 ) // \u53ea\u8003\u8651 1-21\uff0c\u5212\u5206\u6210 7 \u4efd return 1 + ( idx - 1 ) % 7 ; } } 6. \u5148\u624b\u5fc5\u80dc\u7b56\u7565\u95ee\u9898\uff1a \u00b6 **100** \u672c\u4e66\uff0c\u6bcf\u6b21\u80fd\u591f\u62ff **1-5** \u672c\uff0c\u600e\u4e48\u62ff\u80fd\u4fdd\u8bc1\u6700\u540e\u4e00\u6b21\u662f\u4f60\u62ff\uff1f \u5361\u5173\u952e\u70b9\uff0c\u6bcf\u6b21\u53ea\u80fd\u62ff 1 5 \u672c\uff0c\u6240\u4ee5\u5f53\u5269\u4e0b 6 \u672c\u7684\u65f6\u5019\uff0c\u4e0d\u8bba\u5bf9\u9762\u600e\u4e48\u62ff\u4f60\u90fd\u80fd\u8d62\uff1b \u7136\u540e\u63a8 6 \u7684\u500d\u6570\uff1a 12\u300118\u3001...\u300196 \uff0c\u4e5f\u5c31\u662f\u4e00\u5f00\u59cb\u8981\u62ff 4 \u672c\uff1b \u63a5\u4e0b\u6765\u5bf9\u9762\u62ff 1 \uff0c\u4f60\u5c31\u62ff 5 \uff0c\u5bf9\u9762\u62ff 2 \uff0c\u4f60\u5c31\u62ff 4 \uff0c\u603b\u4e4b\u8ba9\u4f60\u62ff\u7684\u548c\u5bf9\u9762\u62ff\u7684\u52a0\u8d77\u6765\u662f 6 \uff0c\u6700\u7ec8\u5c31\u80fd\u8d62\u3002 \u63a8\u5e7f\u5230 **n** \u672c\u4e66\uff0c\u6bcf\u6b21\u62ff **1-k** \u672c\uff0c\u600e\u4e48\u4fdd\u8bc1\u6700\u540e\u4e00\u6b21\u662f\u4f60\u62ff\uff1f 7. \u74f6\u5b50\u6362\u996e\u6599\u95ee\u9898 \u00b6 **1000** \u74f6\u996e\u6599\uff0c **3** \u4e2a\u7a7a\u74f6\u5b50\u80fd\u591f\u6362 **1** \u74f6\u996e\u6599\uff0c\u95ee\u6700\u591a\u80fd\u559d\u51e0\u74f6\uff1f 1000 % 3 = 333...1 \u559d\u6389 1000 \u74f6,\u53ef\u4ee5\u6362 333 \u74f6\u6c7d\u6c34, \u4f59 1 \u4e2a\u7a7a\u74f6 333 % 3 = 111...0 \u3000\u559d\u6389 333 \u74f6\uff0c\u53ef\u4ee5\u6362 111 \u74f6\u6c7d\u6c34, \u4f59 0 \u4e2a\u7a7a\u74f6 111 % 3 = 37...0 \u559d\u6389 111 \u74f6\uff0c\u53ef\u4ee5\u6362 37 \u74f6\u6c7d\u6c34, \u4f59 0 \u4e2a\u7a7a\u74f6 37 % 3 = 12...1 \u559d\u6389 37 \u74f6\uff0c\u53ef\u4ee5\u6362 12 \u74f6\u6c7d\u6c34, \u4f59 1 \u4e2a\u7a7a\u74f6 12 % 3 = 4...0 \u559d\u6389 12 \u74f6\uff0c\u53ef\u4ee5\u6362 4 \u74f6\u6c7d\u6c34, \u4f59 0 \u4e2a\u7a7a\u74f6 4 % 3 = 1...1 \u559d\u6389 4 \u74f6\uff0c\u53ef\u4ee5\u6362 1 \u74f6\u6c7d\u6c34, \u4f59 1 \u4e2a\u7a7a\u74f6 \u6b64\u65f6\u5269\u4e0b 1 \u74f6\u6c7d\u6c34 + 3 \u4e2a\u7a7a\u74f6\uff0c\u5176\u4e2d 3 \u4e2a\u7a7a\u74f6\u53ef\u4ee5\u518d\u6362 1 \u74f6 \u6b64\u65f6\u5269\u4e0b 2 \u74f6\uff0c\u559d\u6389 2 \u74f6\uff0c\u4e0d\u80fd\u518d\u6362\u4e86\u3002 \u603b\u5171\uff1a 1000 + 333 + 111 + 37 + 12 + 4 + 2 = 1499 \u74f6 8. \u91cd\u5408\u95ee\u9898 \u00b6 \u5728\u4e00\u5929\u7684 **24** \u5c0f\u65f6\u4e4b\u4e2d\uff0c\u65f6\u949f\u7684\u65f6\u9488\u3001\u5206\u9488\u548c\u79d2\u9488\u5b8c\u5168\u91cd\u5408\u5728\u4e00\u8d77\u7684\u65f6\u5019\u6709\u51e0\u6b21\uff1f\u90fd\u5206\u522b\u662f\u4ec0\u4e48\u65f6\u95f4\uff1f \u5047\u8bbe\u65f6\u9488\u7684\u89d2\u901f\u5ea6\u4e3a \u03c9\uff08\u03c9 = 1 / 120 (\u5ea6/\u79d2)\uff09 \uff0c\u90a3\u4e48\u5206\u9488\u7684\u89d2\u901f\u5ea6\u5c31\u4e3a 12\u03c9 \uff0c\u79d2\u9488\u7684\u89d2\u901f\u5ea6\u4e3a 720\u03c9 \u5047\u8bbe\u65f6\u9488\u548c\u5206\u9488\u5728 t \u79d2\u540e\u91cd\u5408\uff0c\u90a3\u4e48\u5206\u9488\u5728 t \u65f6\u95f4\u5185\u8d70\u8fc7\u7684\u89d2\u5ea6\u51cf\u53bb\u65f6\u9488\u5728 t \u65f6\u95f4\u5185\u8d70\u8fc7\u7684\u89d2\u5ea6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u80af\u5b9a\u662f 360 \u7684\u6574\u6570\u500d \u6839\u636e\u4e0a\u9762\u7684\u89c4\u5219\uff0c\u53ef\u4ee5\u7b97\u51fa \u65f6\u9488\u548c\u5206\u9488 \u91cd\u5408\u7684\u65f6\u95f4 \u2013 \u96c6\u5408 A \u540c\u7406\u4e5f\u80fd\u7b97\u51fa \u5206\u9488\u548c\u79d2\u9488 \u91cd\u5408\u7684\u65f6\u95f4 \u2013 \u96c6\u5408 B \u90a3\u4e48 \u65f6\u9488\u3001\u5206\u9488\u53ca\u79d2\u9488 \u4e09\u8005\u91cd\u5408\u7684\u65f6\u95f4\u5c31\u662f\u96c6\u5408 A\u3001B \u7684\u4ea4\u96c6 \u7ed3\u679c\uff1a A.length = 22 B.length = 1416 A \u2229 B = ['00:00:00', '12:00:00'] = 2 9. \u8d5b\u9a6c\u95ee\u9898\uff08\u817e\u8baf\u9ad8\u9891\uff09 \u00b6 \u6709 **25** \u5339\u9a6c\uff0c\u6bcf\u573a\u6bd4\u8d5b\u53ea\u80fd\u8d5b **5** \u5339\uff0c\u627e\u6700\u5feb\u7684 **3** \u5339\u9a6c\uff0c\u81f3\u5c11\u8981\u8d5b\u591a\u5c11\u573a\uff1f \u6709 **64** \u5339\u9a6c\uff0c\u6bcf\u573a\u6bd4\u8d5b\u53ea\u80fd\u8d5b **8** \u5339\uff0c\u627e\u6700\u5feb\u7684 **4** \u5339\u9a6c\uff0c\u81f3\u5c11\u8981\u8d5b\u591a\u5c11\u573a\uff1f \u6709 **25** \u5339\u9a6c\uff0c\u6bcf\u573a\u6bd4\u8d5b\u53ea\u80fd\u8d5b **5** \u5339\uff0c\u627e\u6700\u5feb\u7684 **5** \u5339\u9a6c\uff0c\u81f3\u5c11\u8981\u8d5b\u591a\u5c11\u573a\uff1f 25 \u5339\u9a6c 5 \u6761\u8dd1\u9053\u627e\u6700\u5feb\u7684 3 \u5339\u9a6c\uff0c\u9700\u8981\u8dd1\u51e0\u6b21\uff1f\u7b54\u6848\uff1a 7 \u6b21 64 \u5339\u9a6c 8 \u6761\u8dd1\u9053\u627e\u6700\u5feb\u7684 4 \u5339\u9a6c\uff0c\u9700\u8981\u8dd1\u51e0\u6b21\uff1f\u7b54\u6848\uff1a\u6700\u5c11 10 \u6b21\uff0c\u6700\u591a 11 \u6b21 \u6b64\u65f6 A1 \u663e\u7136\u662f\u7b2c\u4e00\u540d\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u627e\u51fa\u7b2c 2\u30013\u30014 \u540d \u5982\u679c A3 \u62ff\u4e86\u7b2c\u4e00\u540d \u5982\u679c A3 \u4e0d\u662f\u7b2c\u4e00\uff0c\u4e5f\u5c31\u662f\u8bf4 B1 \u62ff\u4e86\u7b2c\u4e00 25 \u5339\u9a6c 5 \u6761\u8dd1\u9053\u627e\u6700\u5feb\u7684 5 \u5339\u9a6c\uff0c\u9700\u8981\u8dd1\u51e0\u6b21\uff1f\u7b54\u6848\uff1a\u6700\u5c11 8 \u6b21\uff0c\u6700\u591a 9 \u6b21 \u73b0\u5728\u5df2\u7ecf\u8dd1\u4e86 5 + 1 = 6 \u6b21 \u73b0\u5728\u5df2\u7ecf\u8dd1\u4e86 5 + 1 + 1 = 7 \u6b21 10. \u70e7\u9999\u786e\u5b9a\u65f6\u95f4\u95ee\u9898 \u00b6 \u6709\u4e24\u6839\u4e0d\u5747\u5300\u7684\u9999\uff0c\u71c3\u70e7\u5b8c\u90fd\u9700\u8981\u4e00\u4e2a\u5c0f\u65f6\uff0c\u95ee\u600e\u4e48\u786e\u5b9a **15** \u5206\u949f\u7684\u65f6\u957f\uff1f \u76f8\u5bf9\u65f6\u95f4\u7684\u601d\u8def\u3002 \u7b54\uff1a\u8bbe\u4e24\u6839\u9999\u5206\u522b\u4e3a A \u3001 B \uff0c\u5148\u628a A \u4e00\u7aef\u70b9\u71c3\uff0c\u7136\u540e\u628a B \u7684\u4e24\u7aef\u90fd\u70b9\u71c3\uff0c\u8fd9\u6837\u5f53 B \u70e7\u5b8c\u7684\u65f6\u5019\uff0c A \u5c31\u8fd8\u5269\u4e0b\u4e00\u534a\uff08\u6b64\u65f6\u80fd\u786e\u5b9a\u534a\u5c0f\u65f6\uff09\uff0c\u6b64\u65f6\u628a A \u7684\u53e6\u4e00\u7aef\u4e5f\u70b9\u71c3\uff0c\u90a3\u4e48\u4ece\u6b64\u523b\u5230 A \u70e7\u5b8c\u7684\u65f6\u95f4\u5c31\u662f 15 \u5206\u949f\u3002 11. \u63b0\u5de7\u514b\u529b\u95ee\u9898 \u00b6 **N\\*M** \u5757\u5de7\u514b\u529b\uff0c\u6bcf\u6b21\u63b0\u4e00\u5757\u7684\u4e00\u884c\u6216\u4e00\u5217\uff0c\u63b0\u6210 **1\\*1** \u7684\u5de7\u514b\u529b\u9700\u8981\u591a\u5c11\u6b21\uff1f \u6dd8\u6c70\u95ee\u9898\uff1a **1000** \u4e2a\u4eba\u53c2\u52a0\u8fa9\u8bba\u8d5b\uff0c **1V1** \uff0c\u8f93\u4e86\u5c31\u9000\u51fa\uff0c\u9700\u8981\u5b89\u6392\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f \u6bcf\u6b21\u62ff\u8d77\u4e00\u5757\u5de7\u514b\u529b\uff0c\u63b0\u4e00\u4e0b\uff08\u65e0\u8bba\u6a2a\u7740\u8fd8\u662f\u7ad6\u7740\uff09\u90fd\u4f1a\u53d8\u6210\u4e24\u5757\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5de7\u514b\u529b\u5171\u6709 N*M \u5757\uff0c\u6240\u4ee5\u8981\u63b0 N*M-1 \u6b21\uff0c\u51cf 1 \u662f\u56e0\u4e3a\u6700\u5f00\u59cb\u7684\u4e00\u5757\u662f\u4e0d\u7528\u7b97\u8fdb\u53bb\u7684\u3002 \u6bcf\u4e00\u573a\u8fa9\u8bba\u8d5b\u4e24\u4e2a\u4eba\uff0c\u6dd8\u6c70\u4e00\u4e2a\u4eba\uff0c\u6240\u4ee5\u53ef\u4ee5\u770b\u4f5c\u662f\u6bcf\u4e00\u573a\u8fa9\u8bba\u8d5b\u51cf\u5c11\u4e00\u4e2a\u4eba\uff0c\u76f4\u5230\u6700\u540e\u5269\u4e0b 1 \u4e2a\u4eba\uff0c\u6240\u4ee5\u662f 1000 - 1 = 999 \u573a\u3002","title":"\u667a\u529b\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#_1","text":"","title":"\u9ad8\u9891\u667a\u529b\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#1","text":"\u6709\u4e00\u680b\u697c\u5171 **100** \u5c42\uff0c\u4e00\u4e2a\u9e21\u86cb\u4ece\u7b2c **N** \u5c42\u53ca\u4ee5\u4e0a\u7684\u697c\u5c42\u843d\u4e0b\u6765\u4f1a\u6454\u7834\uff0c \u5728\u7b2c **N** \u5c42\u4ee5\u4e0b\u7684\u697c\u5c42\u843d\u4e0b\u4e0d\u4f1a\u6454\u7834\u3002\u7ed9\u4f60 **2** \u4e2a\u9e21\u86cb\uff0c\u5982\u4f55\u7528\u6700\u5c11\u7684\u5c1d\u8bd5\u6b21\u6570\uff0c\u6d4b\u8bd5\u51fa\u9e21\u86cb\u4e0d\u4f1a\u6454\u788e\u7684\u4e34\u754c\u70b9\uff1f \u9996\u5148\u8981\u8bf4\u660e\u7684\u662f\u8fd9\u9053\u9898\u4f60\u8981\u662f\u4e00\u4e0a\u6765\u5c31\u8bf4\u51fa\u6b63\u786e\u7b54\u6848\uff0c\u90a3\u8bf4\u660e\u4f60\u7684\u667a\u5546\u4e0d\u662f\u8d85\u8fc7160\u5c31\u662f\u4f60\u505a\u8fc7\u8fd9\u9898\u3002 \u6240\u4ee5\u5efa\u8bae\u4f60\u5faa\u5e8f\u6e10\u8fdb\u7684\u56de\u7b54\uff0c\u4e00\u4e0a\u6765\u5c31\u8bf4\u6700\u4f18\u89e3\u53ef\u80fd\u7ed3\u679c\u4e0d\u4f1a\u8ba9\u9762\u8bd5\u5b98\u6ee1\u610f\u3002 1. \u66b4\u529b\u6cd5 \u4ece 1 \u5230 100 \uff0c\u4e00\u5c42\u4e00\u5c42\u8bd5\u3002\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u6254 100 \u6b21\u3002 \u8fd9\u4e2a\u529e\u6cd5\u592a\u8822\u4e86\uff0c\u5b8c\u5168\u7528\u4e0d\u4e0a\u4e24\u4e2a\u9e21\u86cb\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4e0d\u5efa\u8bae\u56de\u7b54\u8fd9\u4e2a\u65b9\u6cd5\u3002 2. \u4e8c\u5206\u6cd5 \u91c7\u7528\u7c7b\u4f3c\u4e8e\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\uff0c\u628a\u9e21\u86cb\u4ece\u4e00\u534a\u697c\u5c42\uff08 50 \u5c42\uff09\u5f80\u4e0b\u6254\u3002 \u5982\u679c\u7b2c\u4e00\u679a\u9e21\u86cb\uff0c\u5728 50 \u5c42\u788e\u4e86\uff0c\u7b2c\u4e8c\u679a\u9e21\u86cb\uff0c\u5c31\u4ece\u7b2c 1 \u5c42\u5f00\u59cb\u6254\uff0c\u4e00\u5c42\u4e00\u5c42\u589e\u957f\uff0c\u4e00\u76f4\u6254\u5230\u7b2c 49 \u5c42\u3002 \u5982\u679c\u7b2c\u4e00\u679a\u9e21\u86cb\u5728 50 \u5c42\u6ca1\u788e\uff0c\u5219\u7ee7\u7eed\u4f7f\u7528\u4e8c\u5206\u6cd5\uff0c\u5728\u5269\u4f59\u697c\u5c42\u7684\u4e00\u534a\uff08 75 \u5c42\uff09\u5f80\u4e0b\u6254...... \u8fd9\u4e2a\u65b9\u6cd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5c1d\u8bd5 50 \u6b21\u3002 3. \u5747\u5300\u6cd5 \u5982\u4f55\u8ba9\u7b2c\u4e00\u679a\u9e21\u86cb\u548c\u7b2c\u4e8c\u679a\u9e21\u86cb\u7684\u5c1d\u8bd5\u6b21\u6570\uff0c\u5c3d\u53ef\u80fd\u5747\u8861\u5462\uff1f \u5f88\u7b80\u5355\uff0c\u505a\u4e00\u4e2a\u5e73\u65b9\u6839\u8fd0\u7b97\uff0c 100 \u7684\u5e73\u65b9\u6839\u662f 10 \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c1d\u8bd5\u6bcf 10 \u5c42\u6254\u4e00\u6b21\uff0c\u7b2c\u4e00\u6b21\u4ece 10 \u5c42\u6254\uff0c\u7b2c\u4e8c\u6b21\u4ece 20 \u5c42\u6254\uff0c\u7b2c\u4e09\u6b21\u4ece 30 \u5c42......\u4e00\u76f4\u6254\u5230 100 \u5c42\u3002 \u8fd9\u6837\u7684\u6700\u597d\u60c5\u51b5\u662f\u5728\u7b2c 10 \u5c42\u788e\u6389\uff0c\u5c1d\u8bd5\u6b21\u6570\u4e3a 1 + 9 = 10 \u6b21\u3002 \u6700\u574f\u7684\u60c5\u51b5\u662f\u5728\u7b2c 100 \u5c42\u788e\u6389\uff0c\u5c1d\u8bd5\u6b21\u6570\u4e3a 10 + 9 = 19 \u6b21\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u5c0f\u5c0f\u7684\u4f18\u5316\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 15 \u5c42\u5f00\u59cb\u6254\uff0c\u63a5\u4e0b\u6765\u4ece 25 \u5c42\u3001 35 \u5c42\u6254......\u4e00\u76f4\u5230 95 \u5c42\u3002 \u8fd9\u6837\u6700\u574f\u60c5\u51b5\u662f\u5728\u7b2c 95 \u5c42\u788e\u6389\uff0c\u5c1d\u8bd5\u6b21\u6570\u4e3a 9 + 9 = 18 \u6b21\u3002 4. \u6700\u4f18\u89e3\u6cd5 \u6700\u4f18\u89e3\u6cd5\u662f\u53cd\u5411\u601d\u8003\u7684\u7ecf\u5178\uff1a\u5982\u679c\u6700\u4f18\u89e3\u6cd5\u5728\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u6254 X \u6b21\uff0c\u90a3\u7b2c\u4e00\u6b21\u5728\u7b2c\u51e0\u5c42\u6254\u6700\u597d\u5462\uff1f \u7b54\u6848\u662f\uff1a\u4ece X \u5c42\u6254 \u5047\u8bbe\u6700\u4f18\u7684\u5c1d\u8bd5\u6b21\u6570\u7684 x \u6b21\uff0c\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u6b21\u6254\u5c31\u8981\u9009\u62e9\u7b2c x \u5c42\u5462\uff1f \u8fd9\u91cc\u7684\u89e3\u91ca\u4f1a\u6709\u4e9b\u70e7\u8111\uff0c\u8bf7\u5c0f\u4f19\u4f34\u4eec\u5750\u7a33\u6276\u597d\uff1a \u5047\u8bbe\u7b2c\u4e00\u6b21\u6254\u5728\u7b2c x+1 \u5c42\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u9e21\u86cb\u788e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u9e21\u86cb\u53ea\u80fd\u4ece\u7b2c1\u5c42\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6254\uff0c\u4e00\u76f4\u6254\u5230\u7b2cx\u5c42\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u603b\u5171\u5c1d\u8bd5\u4e86 x+1 \u6b21\uff0c\u548c\u5047\u8bbe\u5c1d\u8bd5 x \u6b21\u76f8\u6096\u3002\u7531\u6b64\u53ef\u89c1\uff0c\u7b2c\u4e00\u6b21\u6254\u7684\u697c\u5c42\u5fc5\u987b\u5c0f\u4e8e x+1 \u5c42\u3002 \u5047\u8bbe\u7b2c\u4e00\u6b21\u6254\u5728\u7b2c x-1 \u5c42\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u9e21\u86cb\u788e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u9e21\u86cb\u53ea\u80fd\u4ece\u7b2c 1 \u5c42\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6254\uff0c\u4e00\u76f4\u6254\u5230\u7b2c x-2 \u5c42\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u603b\u5171\u5c1d\u8bd5\u4e86 x-2+1 = x-1 \u6b21\uff0c\u867d\u7136\u6ca1\u6709\u8d85\u51fa\u5047\u8bbe\u6b21\u6570\uff0c\u4f46\u4f3c\u4e4e\u6709\u4e9b\u8fc7\u4e8e\u4fdd\u5b88\u3002 \u5047\u8bbe\u7b2c\u4e00\u6b21\u6254\u5728\u7b2c x \u5c42\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u9e21\u86cb\u788e\u4e86\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u9e21\u86cb\u53ea\u80fd\u4ece\u7b2c 1 \u5c42\u5f00\u59cb\u4e00\u5c42\u4e00\u5c42\u6254\uff0c\u4e00\u76f4\u6254\u5230\u7b2c x-1 \u5c42\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u603b\u5171\u5c1d\u8bd5\u4e86 x-1+1 = x \u6b21\uff0c\u521a\u521a\u597d\u6ca1\u6709\u8d85\u51fa\u5047\u8bbe\u6b21\u6570\u3002 \u56e0\u6b64\uff0c\u8981\u60f3\u5c3d\u91cf\u697c\u5c42\u8de8\u5ea6\u5927\u4e00\u4e9b\uff0c\u53c8\u8981\u4fdd\u8bc1\u4e0d\u8d85\u8fc7\u5047\u8bbe\u7684\u5c1d\u8bd5\u6b21\u6570x\uff0c\u90a3\u4e48\u7b2c\u4e00\u6b21\u6254\u9e21\u86cb\u7684\u6700\u4f18\u9009\u62e9\u5c31\u662f\u7b2c x \u5c42\u3002 \u90a3\u4e48\u7b97\u6700\u574f\u60c5\u51b5\uff0c\u7b2c\u4e8c\u6b21\u4f60\u53ea\u5269\u4e0b x-1 \u6b21\u673a\u4f1a\uff0c\u6309\u7167\u4e0a\u9762\u7684\u8bf4\u6cd5\uff0c\u4f60\u7b2c\u4e8c\u6b21\u5c1d\u8bd5\u7684\u4f4d\u7f6e\u5fc5\u7136\u662f X +\uff08X-1\uff09 \uff1b \u4ee5\u6b64\u7c7b\u63a8\u6211\u4eec\u53ef\u5f97\uff1a x + (x-1) + (x-2) + ... + 1 = 100 \u8fd9\u4e2a\u65b9\u7a0b\u4e0d\u96be\u7406\u89e3\uff1a \u5de6\u8fb9\u7684\u591a\u9879\u5f0f\u662f\u5404\u6b21\u6254\u9e21\u86cb\u7684\u697c\u5c42\u8de8\u5ea6\u4e4b\u548c\u3002\u7531\u4e8e\u5047\u8bbe\u5c1d\u8bd5 x \u6b21\uff0c\u6240\u4ee5\u8fd9\u4e2a\u591a\u9879\u5f0f\u5171\u6709 x \u9879\u3002 \u53f3\u8fb9\u662f\u603b\u7684\u697c\u5c42\u6570 100 \u3002 \u4e0b\u9762\u6211\u4eec\u6765\u89e3\u8fd9\u4e2a\u65b9\u7a0b\uff1a x + (x-1) + (x-2) + ... + 1 = 100 \u8f6c\u5316\u4e3a (x+1)*x/2 = 100 \u6700\u7ec8x\u5411\u4e0a\u53d6\u6574\uff0c\u5f97\u5230 x = 14 \u56e0\u6b64\uff0c\u6700\u4f18\u89e3\u5728\u6700\u574f\u60c5\u51b5\u7684\u5c1d\u8bd5\u6b21\u6570\u662f 14 \u6b21\uff0c\u7b2c\u4e00\u6b21\u6254\u9e21\u86cb\u7684\u697c\u5c42\u4e5f\u662f 14 \u5c42\u3002 \u6700\u540e\uff0c\u8ba9\u6211\u4eec\u628a\u7b2c\u4e00\u4e2a\u9e21\u86cb\u6ca1\u788e\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u5c1d\u8bd5\u7684\u697c\u5c42\u6570\u5b8c\u6574\u5217\u4e3e\u51fa\u6765\uff1a 14\uff0c27\uff0c 39\uff0c 50\uff0c 60\uff0c 69\uff0c 77\uff0c 84\uff0c 90\uff0c 95\uff0c 99\uff0c 100 \u4e3e\u4e2a\u6817\u5b50\u9a8c\u8bc1\u4e0b\uff1a \u5047\u5982\u9e21\u86cb\u4e0d\u4f1a\u788e\u7684\u4e34\u754c\u70b9\u662f 65 \u5c42\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u9e21\u86cb\u6254\u51fa\u7684\u697c\u5c42\u662f 14\uff0c27\uff0c50\uff0c60\uff0c69 \u3002\u8fd9\u65f6\u5019\u556a\u7684\u4e00\u58f0\u788e\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u9e21\u86cb\u7ee7\u7eed\uff0c\u4ece 61 \u5c42\u5f00\u59cb\uff0c 61\uff0c62\uff0c63\uff0c64\uff0c65\uff0c66 \uff0c\u556a\u7684\u4e00\u58f0\u788e\u4e86\u3002 \u56e0\u6b64\u5f97\u5230\u4e0d\u4f1a\u788e\u7684\u4e34\u754c\u70b9 65 \u5c42\uff0c\u603b\u5c1d\u8bd5\u6b21\u6570\u662f 6 + 6 = 12 < 14 \u3002 \u4e0b\u9762\u662f\u6211\u4e2a\u4eba\u7684\u7406\u89e3\uff1a\u8fd9\u4e2a\u66f4\u50cf\u662f\u4f18\u5316\u7248\u7684\u5747\u5300\u6cd5\uff0c\u5747\u5300\u6cd5\u8ba9\u4f60\u7b2c\u4e8c\u6b21\u5c1d\u8bd5\u4e0d\u8d85\u8fc7 10 \uff0c\u4f46\u662f\u7b2c\u4e00\u6b21\u7684\u4f4d\u7f6e\u65e0\u6cd5\u4fdd\u8bc1\uff08\u6700\u591a\u8981 9 \u6b21\uff0c\u6700\u597d\u4e00\u6b21\uff09\uff0c\u8fd9\u4e2a\u7531\u4e8e\u6bcf\u591a\u4e00\u6b21\u5c1d\u8bd5\uff0c\u697c\u5c42\u95f4\u9694\u5c31 -1 \uff0c\u6700\u7ec8\u4f7f\u5f97\u7b2c\u4e00\u6b21\u4e0e\u7b2c\u4e8c\u6b21\u7684\u548c\u5b8c\u5168\u5747\u5300\uff08\u6700\u5dee\u60c5\u51b5\uff09\u3002 \u4f46\u662f\u6838\u5fc3\u601d\u8def\u662f\u9006\u5411\u601d\u8003\uff0c\u56e0\u4e3a\u5373\u4f7f\u7406\u89e3\u4e86\u9700\u8981\u4e24\u6b21\u7684\u548c\u5747\u5300\u4e5f\u5f88\u96be\u5f97\u5230\u7b2c\u4e00\u6b21\u8981\u5728\u54ea\u5c42\u697c\u6254\u3002 \u4e00\u65e6\u7406\u89e3\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff0c\u591a\u5c11\u5c42\u697c\u4f60\u90fd\u4e0d\u4f1a\u6015\u5566~","title":"1. \u9ad8\u697c\u6254\u9e21\u86cb\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#2","text":"\u6709\u4e00\u4e2a\u5929\u5e73\uff0c\u4e5d\u4e2a\u781d\u7801\uff0c\u4e00\u4e2a\u8f7b\u4e00\u4e9b\uff0c\u7528\u5929\u5e73\u81f3\u5c11\u51e0\u6b21\u80fd\u627e\u5230\u8f7b\u7684\uff1f \u4e09\u5206\u6cd5\u3002 \u7b54\u6848\uff1a2\u6b21\u3002 \u5206\u4e09\u4efd\uff0c\u4e24\u4efd\u6bd4\u8f83\uff0c\u7b2c\u4e09\u4efd\u653e\u4e00\u8fb9\uff0c\u5982\u679c\u4e24\u4efd\u76f8\u7b49\u8d28\u91cf\uff0c\u5219\u8bf4\u660e\u8f7b\u7684\u5728\u7b2c\u4e09\u4efd\u3002 \u4e0d\u8bba\u5982\u4f55\uff0c\u53ef\u4ee5\u786e\u5b9a\u8f7b\u7684\u781d\u7801\u5728\u67d0\u4e00\u4efd\u7684\u4e09\u4e2a\u4e4b\u4e2d\uff0c\u518d\u7528\u4e00\u6b21\u4e09\u5206\u6cd5\uff0c\u5373\u53ef\u786e\u5b9a\u3002","title":"2. \u627e\u781d\u7801\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#3","text":"\u6709\u5341\u7ec4\u73bb\u7483\u7403\uff0c\u6bcf\u7ec4\u5341\u4e2a\uff0c\u6bcf\u4e2a\u73bb\u7483\u7403\u91cd **10** g\uff0c\u4f46\u5176\u4e2d\u6709\u4e00\u7ec4\u73bb\u7483\u7403\u6bcf\u4e2a\u53ea\u6709 **9** g\uff0c\u7ed9\u4f60\u4e00\u4e2a\u80fd\u663e\u793a\u514b\u6570\u7684\u79e4\uff0c\u95ee\u4f60\u6700\u5c11\u51e0\u6b21\u80fd\u627e\u5230\u8f7b\u7684\u90a3\u4e00\u7ec4\u781d\u7801\uff1f \u5c06\u5341\u7ec4\u73bb\u7483\u73e0\u7f16\u53f7 1~10 \uff0c\u7136\u540e\u7b2c\u4e00\u7ec4\u62ff\u4e00\u4e2a\uff0c\u7b2c\u4e8c\u7ec4\u62ff\u4e24\u4e2a\u4ee5\u6b64\u7c7b\u63a8...\u7b2c\u5341\u7ec4\u62ff\u5341\u4e2a \u5c06\u8fd9\u4e9b\u73bb\u7483\u73e0\u4e00\u8d77\u653e\u5230\u79e4\u4e0a\u79f0\u51fa\u514b\u6570 x \uff0c \u5219 y = 1*10 + 2*10 + 3*10 + ... + 10 * 10 - x \u7b49\u4ef7\u4e8e y = (1 + 2 + 3 + ... + 10) * 10 - x = 550 - x \u7b2c y \u7ec4\u5c31\u662f\u8f7b\u7684\u90a3\u7ec4\u3002","title":"3. \u627e\u73bb\u7483\u7403\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#4","text":"**1000** \u74f6\u6c34\uff0c\u5176\u4e2d\u6709\u4e00\u74f6\u53ef\u4ee5\u65e0\u9650\u7a00\u91ca\u7684\u6bd2\u836f\uff0c\u5c0f\u767d\u9f20\u559d\u4e86\u6bd2\u6c34\u5c31\u4f1a\u6b7b\uff08\u4e0d\u8bba\u542b\u91cf\u591a\u4f4e\uff09\u3002\u8981\u5feb\u901f\u627e\u51fa\u54ea\u4e00\u74f6\u6709\u6bd2\uff0c\u9700\u8981\u51e0\u53ea\u5c0f\u767d\u9f20\uff1f \u4e8c\u8fdb\u5236\u601d\u8def\u3002 \u7b54\uff1a 2^10 = 1024 > 1000 \uff0c\u56e0\u6b64 10 \u53ea\u5c0f\u767d\u9f20\u5373\u53ef\u3002 \u7ed9 1000 \u74f6\u6c34\u6309\u7167\u4e8c\u8fdb\u5236\u7f16\u53f7\uff0c\u6bd4\u5982 3 \u53f7\u7f16\u4e3a 00000 00011 \uff0c\u62ff 10 \u4e2a\u7897\uff0c\u5bf9\u5e94 10 \u4f4d\uff0c\u5bf9\u4e8e 3 \u53f7\u6c34\u6765\u8bf4\uff0c\u6700\u540e\u4e24\u4f4d\u662f 1 \uff0c\u5219\u628a\u6c34\u6df7\u5408\u8fdb\u6700\u540e\u4e24\u4e2a\u7897\u4e2d\u3002 \u6700\u7ec8\u628a 10 \u7897\u6c34\u7ed9\u5bf9\u5e94\u7684\u5c0f\u767d\u9f20\u559d\uff0c\u6839\u636e\u6700\u540e\u5c0f\u767d\u9f20\u6b7b\u4ea1\u7684\u60c5\u51b5\uff08\u6b7b\u5373\u4e3a 1 \uff0c\u6d3b\u5373\u4e3a 0 \uff09\uff0c\u5373\u53ef\u786e\u5b9a\u51fa\u6709\u6bd2\u7684\u90a3\u7897\u6c34\u3002","title":"4. \u6bd2\u836f\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#5","text":"\u7ed9\u5b9a\u751f\u6210 **1** \u5230 **5** \u7684\u968f\u673a\u6570 **Rand5()** \uff0c\u5982\u4f55\u5f97\u5230\u751f\u6210 **1** \u5230 **7** \u7684\u968f\u673a\u6570\u51fd\u6570 **Rand7()** \uff1f \u4f7f\u7528 rand5() \u751f\u6210 rand7() // \u9700\u8981\u968f\u673a\u5f97\u5230 1-7 public static int rand7 ( ) { while ( true ) { int row , col , idx ; // rand5() \u8fd4\u56de 1-5 row = rand5 ( ) ; // 5 * 5 = 25, \u8bbe\u60f3\u4e00\u4e2a 5*5 \u7684\u77e9\u9635 col = rand5 ( ) ; // \u7136\u540e\u627e\u5230\u5c0f\u4e8e25\u7684\uff0c7\u7684\u6700\u5927\u500d\u657021 idx = col + ( row - 1 ) * 5 ; if ( idx <= 21 ) // \u53ea\u8003\u8651 1-21\uff0c\u5212\u5206\u6210 7 \u4efd return 1 + ( idx - 1 ) % 7 ; } }","title":"5. \u751f\u6210\u968f\u673a\u6570\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#6","text":"**100** \u672c\u4e66\uff0c\u6bcf\u6b21\u80fd\u591f\u62ff **1-5** \u672c\uff0c\u600e\u4e48\u62ff\u80fd\u4fdd\u8bc1\u6700\u540e\u4e00\u6b21\u662f\u4f60\u62ff\uff1f \u5361\u5173\u952e\u70b9\uff0c\u6bcf\u6b21\u53ea\u80fd\u62ff 1 5 \u672c\uff0c\u6240\u4ee5\u5f53\u5269\u4e0b 6 \u672c\u7684\u65f6\u5019\uff0c\u4e0d\u8bba\u5bf9\u9762\u600e\u4e48\u62ff\u4f60\u90fd\u80fd\u8d62\uff1b \u7136\u540e\u63a8 6 \u7684\u500d\u6570\uff1a 12\u300118\u3001...\u300196 \uff0c\u4e5f\u5c31\u662f\u4e00\u5f00\u59cb\u8981\u62ff 4 \u672c\uff1b \u63a5\u4e0b\u6765\u5bf9\u9762\u62ff 1 \uff0c\u4f60\u5c31\u62ff 5 \uff0c\u5bf9\u9762\u62ff 2 \uff0c\u4f60\u5c31\u62ff 4 \uff0c\u603b\u4e4b\u8ba9\u4f60\u62ff\u7684\u548c\u5bf9\u9762\u62ff\u7684\u52a0\u8d77\u6765\u662f 6 \uff0c\u6700\u7ec8\u5c31\u80fd\u8d62\u3002 \u63a8\u5e7f\u5230 **n** \u672c\u4e66\uff0c\u6bcf\u6b21\u62ff **1-k** \u672c\uff0c\u600e\u4e48\u4fdd\u8bc1\u6700\u540e\u4e00\u6b21\u662f\u4f60\u62ff\uff1f","title":"6. \u5148\u624b\u5fc5\u80dc\u7b56\u7565\u95ee\u9898\uff1a"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#7","text":"**1000** \u74f6\u996e\u6599\uff0c **3** \u4e2a\u7a7a\u74f6\u5b50\u80fd\u591f\u6362 **1** \u74f6\u996e\u6599\uff0c\u95ee\u6700\u591a\u80fd\u559d\u51e0\u74f6\uff1f 1000 % 3 = 333...1 \u559d\u6389 1000 \u74f6,\u53ef\u4ee5\u6362 333 \u74f6\u6c7d\u6c34, \u4f59 1 \u4e2a\u7a7a\u74f6 333 % 3 = 111...0 \u3000\u559d\u6389 333 \u74f6\uff0c\u53ef\u4ee5\u6362 111 \u74f6\u6c7d\u6c34, \u4f59 0 \u4e2a\u7a7a\u74f6 111 % 3 = 37...0 \u559d\u6389 111 \u74f6\uff0c\u53ef\u4ee5\u6362 37 \u74f6\u6c7d\u6c34, \u4f59 0 \u4e2a\u7a7a\u74f6 37 % 3 = 12...1 \u559d\u6389 37 \u74f6\uff0c\u53ef\u4ee5\u6362 12 \u74f6\u6c7d\u6c34, \u4f59 1 \u4e2a\u7a7a\u74f6 12 % 3 = 4...0 \u559d\u6389 12 \u74f6\uff0c\u53ef\u4ee5\u6362 4 \u74f6\u6c7d\u6c34, \u4f59 0 \u4e2a\u7a7a\u74f6 4 % 3 = 1...1 \u559d\u6389 4 \u74f6\uff0c\u53ef\u4ee5\u6362 1 \u74f6\u6c7d\u6c34, \u4f59 1 \u4e2a\u7a7a\u74f6 \u6b64\u65f6\u5269\u4e0b 1 \u74f6\u6c7d\u6c34 + 3 \u4e2a\u7a7a\u74f6\uff0c\u5176\u4e2d 3 \u4e2a\u7a7a\u74f6\u53ef\u4ee5\u518d\u6362 1 \u74f6 \u6b64\u65f6\u5269\u4e0b 2 \u74f6\uff0c\u559d\u6389 2 \u74f6\uff0c\u4e0d\u80fd\u518d\u6362\u4e86\u3002 \u603b\u5171\uff1a 1000 + 333 + 111 + 37 + 12 + 4 + 2 = 1499 \u74f6","title":"7. \u74f6\u5b50\u6362\u996e\u6599\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#8","text":"\u5728\u4e00\u5929\u7684 **24** \u5c0f\u65f6\u4e4b\u4e2d\uff0c\u65f6\u949f\u7684\u65f6\u9488\u3001\u5206\u9488\u548c\u79d2\u9488\u5b8c\u5168\u91cd\u5408\u5728\u4e00\u8d77\u7684\u65f6\u5019\u6709\u51e0\u6b21\uff1f\u90fd\u5206\u522b\u662f\u4ec0\u4e48\u65f6\u95f4\uff1f \u5047\u8bbe\u65f6\u9488\u7684\u89d2\u901f\u5ea6\u4e3a \u03c9\uff08\u03c9 = 1 / 120 (\u5ea6/\u79d2)\uff09 \uff0c\u90a3\u4e48\u5206\u9488\u7684\u89d2\u901f\u5ea6\u5c31\u4e3a 12\u03c9 \uff0c\u79d2\u9488\u7684\u89d2\u901f\u5ea6\u4e3a 720\u03c9 \u5047\u8bbe\u65f6\u9488\u548c\u5206\u9488\u5728 t \u79d2\u540e\u91cd\u5408\uff0c\u90a3\u4e48\u5206\u9488\u5728 t \u65f6\u95f4\u5185\u8d70\u8fc7\u7684\u89d2\u5ea6\u51cf\u53bb\u65f6\u9488\u5728 t \u65f6\u95f4\u5185\u8d70\u8fc7\u7684\u89d2\u5ea6\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u80af\u5b9a\u662f 360 \u7684\u6574\u6570\u500d \u6839\u636e\u4e0a\u9762\u7684\u89c4\u5219\uff0c\u53ef\u4ee5\u7b97\u51fa \u65f6\u9488\u548c\u5206\u9488 \u91cd\u5408\u7684\u65f6\u95f4 \u2013 \u96c6\u5408 A \u540c\u7406\u4e5f\u80fd\u7b97\u51fa \u5206\u9488\u548c\u79d2\u9488 \u91cd\u5408\u7684\u65f6\u95f4 \u2013 \u96c6\u5408 B \u90a3\u4e48 \u65f6\u9488\u3001\u5206\u9488\u53ca\u79d2\u9488 \u4e09\u8005\u91cd\u5408\u7684\u65f6\u95f4\u5c31\u662f\u96c6\u5408 A\u3001B \u7684\u4ea4\u96c6 \u7ed3\u679c\uff1a A.length = 22 B.length = 1416 A \u2229 B = ['00:00:00', '12:00:00'] = 2","title":"8. \u91cd\u5408\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#9","text":"\u6709 **25** \u5339\u9a6c\uff0c\u6bcf\u573a\u6bd4\u8d5b\u53ea\u80fd\u8d5b **5** \u5339\uff0c\u627e\u6700\u5feb\u7684 **3** \u5339\u9a6c\uff0c\u81f3\u5c11\u8981\u8d5b\u591a\u5c11\u573a\uff1f \u6709 **64** \u5339\u9a6c\uff0c\u6bcf\u573a\u6bd4\u8d5b\u53ea\u80fd\u8d5b **8** \u5339\uff0c\u627e\u6700\u5feb\u7684 **4** \u5339\u9a6c\uff0c\u81f3\u5c11\u8981\u8d5b\u591a\u5c11\u573a\uff1f \u6709 **25** \u5339\u9a6c\uff0c\u6bcf\u573a\u6bd4\u8d5b\u53ea\u80fd\u8d5b **5** \u5339\uff0c\u627e\u6700\u5feb\u7684 **5** \u5339\u9a6c\uff0c\u81f3\u5c11\u8981\u8d5b\u591a\u5c11\u573a\uff1f 25 \u5339\u9a6c 5 \u6761\u8dd1\u9053\u627e\u6700\u5feb\u7684 3 \u5339\u9a6c\uff0c\u9700\u8981\u8dd1\u51e0\u6b21\uff1f\u7b54\u6848\uff1a 7 \u6b21 64 \u5339\u9a6c 8 \u6761\u8dd1\u9053\u627e\u6700\u5feb\u7684 4 \u5339\u9a6c\uff0c\u9700\u8981\u8dd1\u51e0\u6b21\uff1f\u7b54\u6848\uff1a\u6700\u5c11 10 \u6b21\uff0c\u6700\u591a 11 \u6b21 \u6b64\u65f6 A1 \u663e\u7136\u662f\u7b2c\u4e00\u540d\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u627e\u51fa\u7b2c 2\u30013\u30014 \u540d \u5982\u679c A3 \u62ff\u4e86\u7b2c\u4e00\u540d \u5982\u679c A3 \u4e0d\u662f\u7b2c\u4e00\uff0c\u4e5f\u5c31\u662f\u8bf4 B1 \u62ff\u4e86\u7b2c\u4e00 25 \u5339\u9a6c 5 \u6761\u8dd1\u9053\u627e\u6700\u5feb\u7684 5 \u5339\u9a6c\uff0c\u9700\u8981\u8dd1\u51e0\u6b21\uff1f\u7b54\u6848\uff1a\u6700\u5c11 8 \u6b21\uff0c\u6700\u591a 9 \u6b21 \u73b0\u5728\u5df2\u7ecf\u8dd1\u4e86 5 + 1 = 6 \u6b21 \u73b0\u5728\u5df2\u7ecf\u8dd1\u4e86 5 + 1 + 1 = 7 \u6b21","title":"9. \u8d5b\u9a6c\u95ee\u9898\uff08\u817e\u8baf\u9ad8\u9891\uff09"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#10","text":"\u6709\u4e24\u6839\u4e0d\u5747\u5300\u7684\u9999\uff0c\u71c3\u70e7\u5b8c\u90fd\u9700\u8981\u4e00\u4e2a\u5c0f\u65f6\uff0c\u95ee\u600e\u4e48\u786e\u5b9a **15** \u5206\u949f\u7684\u65f6\u957f\uff1f \u76f8\u5bf9\u65f6\u95f4\u7684\u601d\u8def\u3002 \u7b54\uff1a\u8bbe\u4e24\u6839\u9999\u5206\u522b\u4e3a A \u3001 B \uff0c\u5148\u628a A \u4e00\u7aef\u70b9\u71c3\uff0c\u7136\u540e\u628a B \u7684\u4e24\u7aef\u90fd\u70b9\u71c3\uff0c\u8fd9\u6837\u5f53 B \u70e7\u5b8c\u7684\u65f6\u5019\uff0c A \u5c31\u8fd8\u5269\u4e0b\u4e00\u534a\uff08\u6b64\u65f6\u80fd\u786e\u5b9a\u534a\u5c0f\u65f6\uff09\uff0c\u6b64\u65f6\u628a A \u7684\u53e6\u4e00\u7aef\u4e5f\u70b9\u71c3\uff0c\u90a3\u4e48\u4ece\u6b64\u523b\u5230 A \u70e7\u5b8c\u7684\u65f6\u95f4\u5c31\u662f 15 \u5206\u949f\u3002","title":"10. \u70e7\u9999\u786e\u5b9a\u65f6\u95f4\u95ee\u9898"},{"location":"%E9%9D%A2%E8%AF%95/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/#11","text":"**N\\*M** \u5757\u5de7\u514b\u529b\uff0c\u6bcf\u6b21\u63b0\u4e00\u5757\u7684\u4e00\u884c\u6216\u4e00\u5217\uff0c\u63b0\u6210 **1\\*1** \u7684\u5de7\u514b\u529b\u9700\u8981\u591a\u5c11\u6b21\uff1f \u6dd8\u6c70\u95ee\u9898\uff1a **1000** \u4e2a\u4eba\u53c2\u52a0\u8fa9\u8bba\u8d5b\uff0c **1V1** \uff0c\u8f93\u4e86\u5c31\u9000\u51fa\uff0c\u9700\u8981\u5b89\u6392\u591a\u5c11\u573a\u6bd4\u8d5b\uff1f \u6bcf\u6b21\u62ff\u8d77\u4e00\u5757\u5de7\u514b\u529b\uff0c\u63b0\u4e00\u4e0b\uff08\u65e0\u8bba\u6a2a\u7740\u8fd8\u662f\u7ad6\u7740\uff09\u90fd\u4f1a\u53d8\u6210\u4e24\u5757\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5de7\u514b\u529b\u5171\u6709 N*M \u5757\uff0c\u6240\u4ee5\u8981\u63b0 N*M-1 \u6b21\uff0c\u51cf 1 \u662f\u56e0\u4e3a\u6700\u5f00\u59cb\u7684\u4e00\u5757\u662f\u4e0d\u7528\u7b97\u8fdb\u53bb\u7684\u3002 \u6bcf\u4e00\u573a\u8fa9\u8bba\u8d5b\u4e24\u4e2a\u4eba\uff0c\u6dd8\u6c70\u4e00\u4e2a\u4eba\uff0c\u6240\u4ee5\u53ef\u4ee5\u770b\u4f5c\u662f\u6bcf\u4e00\u573a\u8fa9\u8bba\u8d5b\u51cf\u5c11\u4e00\u4e2a\u4eba\uff0c\u76f4\u5230\u6700\u540e\u5269\u4e0b 1 \u4e2a\u4eba\uff0c\u6240\u4ee5\u662f 1000 - 1 = 999 \u573a\u3002","title":"11. \u63b0\u5de7\u514b\u529b\u95ee\u9898"}]}